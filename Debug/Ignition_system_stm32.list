
Ignition_system_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008dc8  08008dc8  00009dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009204  08009204  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009204  08009204  0000a204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800920c  0800920c  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800920c  0800920c  0000a20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009214  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d8  2**0
                  CONTENTS
 10 .bss          000004b8  200001d8  200001d8  0000b1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000690  20000690  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a20  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028d1  00000000  00000000  0001cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  0001f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bac  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cfe  00000000  00000000  00020fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012428  00000000  00000000  00044caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da4ba  00000000  00000000  000570d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013158c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dc0  00000000  00000000  001315d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00136390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dac 	.word	0x08008dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008dac 	.word	0x08008dac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <CylinderScheduler_GetCurrent>:
//    { 660,  9 },
//    { 720, 12 }
//};

// Returns current cylinder to be fired based on encoder position (crankshaft angle)
uint8_t CylinderScheduler_GetCurrent(uint32_t encoder_pos) {
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

    //uint16_t angle = (encoder_pos * CRANK_CYCLE_DEG) / PULSES_PER_CYCLE;
	uint16_t angle = (encoder_pos * CRANK_CYCLE_DEG) / ENCODER_TIMER_ENGINE_FULL_CYCLE_PULSES;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <CylinderScheduler_GetCurrent+0x58>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	817b      	strh	r3, [r7, #10]

    for (int i = 0; i < TOTAL_CYLINDERS; ++i) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e00f      	b.n	8000fb6 <CylinderScheduler_GetCurrent+0x42>
        if (angle < ignition_table[i].angle_deg) {
 8000f96:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd0 <CylinderScheduler_GetCurrent+0x5c>)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000f9e:	897a      	ldrh	r2, [r7, #10]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d205      	bcs.n	8000fb0 <CylinderScheduler_GetCurrent+0x3c>
            return ignition_table[i].cylinder;
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <CylinderScheduler_GetCurrent+0x5c>)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	789b      	ldrb	r3, [r3, #2]
 8000fae:	e006      	b.n	8000fbe <CylinderScheduler_GetCurrent+0x4a>
    for (int i = 0; i < TOTAL_CYLINDERS; ++i) {
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	ddec      	ble.n	8000f96 <CylinderScheduler_GetCurrent+0x22>
        }
    }
    return ignition_table[0].cylinder; // fallback to first if not matched
 8000fbc:	2301      	movs	r3, #1
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	891ac73b 	.word	0x891ac73b
 8000fd0:	08008e14 	.word	0x08008e14

08000fd4 <CylinderScheduler_GetIgnitionAngle>:

// Returns ignition angle for given cylinder (in degrees)
int CylinderScheduler_GetIgnitionAngle(uint8_t cylinder) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < TOTAL_CYLINDERS; ++i) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e00f      	b.n	8001004 <CylinderScheduler_GetIgnitionAngle+0x30>
        if (ignition_table[i].cylinder == cylinder) {
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8001018 <CylinderScheduler_GetIgnitionAngle+0x44>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	789b      	ldrb	r3, [r3, #2]
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d104      	bne.n	8000ffe <CylinderScheduler_GetIgnitionAngle+0x2a>
            return ignition_table[i].angle_deg;
 8000ff4:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <CylinderScheduler_GetIgnitionAngle+0x44>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000ffc:	e006      	b.n	800100c <CylinderScheduler_GetIgnitionAngle+0x38>
    for (int i = 0; i < TOTAL_CYLINDERS; ++i) {
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3301      	adds	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b07      	cmp	r3, #7
 8001008:	ddec      	ble.n	8000fe4 <CylinderScheduler_GetIgnitionAngle+0x10>
        }
    }
    return ignition_table[0].angle_deg; // fallback
 800100a:	235a      	movs	r3, #90	@ 0x5a
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	08008e14 	.word	0x08008e14

0800101c <ISM_Init>:
 * --------------------------------------------------------------------------*/

#include "ignition_state_machine.h"
#include "cylinder_scheduler.h"
// Initialize the state machine
void ISM_Init(IgnitionStateMachine *sm) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    sm->current_state = ISM_IDLE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
    sm->index_detected = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	705a      	strb	r2, [r3, #1]
    sm->encoder_position = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
    sm->ignition_angle = 237;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	22ed      	movs	r2, #237	@ 0xed
 800103a:	609a      	str	r2, [r3, #8]
    sm->dwell_pulses = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    sm->pulse_counter = 0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	825a      	strh	r2, [r3, #18]
    sm->fired_count = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	829a      	strh	r2, [r3, #20]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <ISM_Update>:
void ISM_Update(IgnitionStateMachine *sm,
                uint32_t            encoder_pos,
                uint32_t            dwell_pulses,
                int                 angle_deg,
                uint8_t             cylinder)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	603b      	str	r3, [r7, #0]
    // 1) Compute positions in encoder ticks

	sm->encoder_position = encoder_pos;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	605a      	str	r2, [r3, #4]
	sm->dwell_pulses = dwell_pulses;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	60da      	str	r2, [r3, #12]
	sm->ignition_angle = angle_deg;
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	609a      	str	r2, [r3, #8]

    uint32_t fire_pos   = (angle_deg * ENCODER_TIMER_ENGINE_FULL_CYCLE_PULSES) / CRANK_CYCLE_DEG;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001082:	fb02 f303 	mul.w	r3, r2, r3
 8001086:	4a51      	ldr	r2, [pc, #324]	@ (80011cc <ISM_Update+0x170>)
 8001088:	fb82 1203 	smull	r1, r2, r2, r3
 800108c:	441a      	add	r2, r3
 800108e:	1252      	asrs	r2, r2, #9
 8001090:	17db      	asrs	r3, r3, #31
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	61fb      	str	r3, [r7, #28]
    uint32_t charge_pos = (fire_pos + ENCODER_TIMER_ENGINE_FULL_CYCLE_PULSES - dwell_pulses)
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f503 73ef 	add.w	r3, r3, #478	@ 0x1de
 80010a0:	4a4b      	ldr	r2, [pc, #300]	@ (80011d0 <ISM_Update+0x174>)
 80010a2:	fba2 1203 	umull	r1, r2, r2, r3
 80010a6:	0a12      	lsrs	r2, r2, #8
 80010a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80010ac:	fb01 f202 	mul.w	r2, r1, r2
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
                            % ENCODER_TIMER_ENGINE_FULL_CYCLE_PULSES;

    // 2) Detect new cylinder event (scheduler moved us to a new cylinder)
    if (cylinder != sm->current_cylinder) {
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	7c1b      	ldrb	r3, [r3, #16]
 80010b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80010bc:	429a      	cmp	r2, r3
 80010be:	d00c      	beq.n	80010da <ISM_Update+0x7e>
        sm->current_cylinder = cylinder;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80010c6:	741a      	strb	r2, [r3, #16]
        sm->coil_on          = false;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	745a      	strb	r2, [r3, #17]
        sm->pulse_counter    = 0;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	825a      	strh	r2, [r3, #18]
        sm->current_state    = ISM_COIL_CHARGING;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
    }

    // 3) FSM
    switch (sm->current_state)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d002      	beq.n	80010e8 <ISM_Update+0x8c>
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d05d      	beq.n	80011a2 <ISM_Update+0x146>
 80010e6:	e063      	b.n	80011b0 <ISM_Update+0x154>
      {
        // entered the charge window?
        bool in_window =
           ((charge_pos <= fire_pos)
             ? (encoder_pos >= charge_pos && encoder_pos < fire_pos)
             : (encoder_pos >= charge_pos || encoder_pos < fire_pos));
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d80e      	bhi.n	800110e <ISM_Update+0xb2>
             ? (encoder_pos >= charge_pos && encoder_pos < fire_pos)
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d305      	bcc.n	8001104 <ISM_Update+0xa8>
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d201      	bcs.n	8001104 <ISM_Update+0xa8>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <ISM_Update+0xaa>
 8001104:	2300      	movs	r3, #0
             : (encoder_pos >= charge_pos || encoder_pos < fire_pos));
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	e00d      	b.n	800112a <ISM_Update+0xce>
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	429a      	cmp	r2, r3
 8001114:	d203      	bcs.n	800111e <ISM_Update+0xc2>
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	429a      	cmp	r2, r3
 800111c:	d201      	bcs.n	8001122 <ISM_Update+0xc6>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <ISM_Update+0xc8>
 8001122:	2300      	movs	r3, #0
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
        bool in_window =
 800112a:	75fb      	strb	r3, [r7, #23]

        // start charging once
        if (in_window && !sm->coil_on) {
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00c      	beq.n	800114c <ISM_Update+0xf0>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	7c5b      	ldrb	r3, [r3, #17]
 8001136:	f083 0301 	eor.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <ISM_Update+0xf0>
            sm->coil_on       = true;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2201      	movs	r2, #1
 8001144:	745a      	strb	r2, [r3, #17]
            sm->pulse_counter = 0;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	825a      	strh	r2, [r3, #18]
        }

        // if charging, count ticks
        if (sm->coil_on) {
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	7c5b      	ldrb	r3, [r3, #17]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d034      	beq.n	80011be <ISM_Update+0x162>
            sm->pulse_counter++;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8a5b      	ldrh	r3, [r3, #18]
 8001158:	3301      	adds	r3, #1
 800115a:	b29a      	uxth	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	825a      	strh	r2, [r3, #18]

            // either enough dwell ticks or we've passed the fire angle
            bool passed_fire =
                   sm->pulse_counter >= dwell_pulses
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8a5b      	ldrh	r3, [r3, #18]
 8001164:	461a      	mov	r2, r3
                || encoder_pos == fire_pos
                || (encoder_pos >  fire_pos && fire_pos < charge_pos);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4293      	cmp	r3, r2
 800116a:	d90b      	bls.n	8001184 <ISM_Update+0x128>
                || encoder_pos == fire_pos
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	429a      	cmp	r2, r3
 8001172:	d007      	beq.n	8001184 <ISM_Update+0x128>
                || (encoder_pos >  fire_pos && fire_pos < charge_pos);
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	429a      	cmp	r2, r3
 800117a:	d905      	bls.n	8001188 <ISM_Update+0x12c>
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	429a      	cmp	r2, r3
 8001182:	d201      	bcs.n	8001188 <ISM_Update+0x12c>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <ISM_Update+0x12e>
 8001188:	2300      	movs	r3, #0
            bool passed_fire =
 800118a:	75bb      	strb	r3, [r7, #22]
 800118c:	7dbb      	ldrb	r3, [r7, #22]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	75bb      	strb	r3, [r7, #22]

            if (passed_fire) {
 8001194:	7dbb      	ldrb	r3, [r7, #22]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d011      	beq.n	80011be <ISM_Update+0x162>
                sm->current_state = ISM_IGNITION;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2202      	movs	r2, #2
 800119e:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 80011a0:	e00d      	b.n	80011be <ISM_Update+0x162>
      }

      case ISM_IGNITION:
      {
        // spark: clear coil_on and move to DONE
        sm->coil_on       = false;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	745a      	strb	r2, [r3, #17]
        sm->current_state = ISM_IDLE;  // or define ISM_DONE if clearer
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
        break;
 80011ae:	e007      	b.n	80011c0 <ISM_Update+0x164>
      }

      default:
        // stay idle until next cylinder change
        sm->coil_on       = false;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	745a      	strb	r2, [r3, #17]
        sm->current_state = ISM_IDLE;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
        break;
 80011bc:	e000      	b.n	80011c0 <ISM_Update+0x164>
        break;
 80011be:	bf00      	nop
    }
}
 80011c0:	bf00      	nop
 80011c2:	3724      	adds	r7, #36	@ 0x24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	b60b60b7 	.word	0xb60b60b7
 80011d0:	891ac73b 	.word	0x891ac73b

080011d4 <ISM_IndexDetected>:

void ISM_IndexDetected(IgnitionStateMachine *sm) {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    sm->index_detected = 1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	705a      	strb	r2, [r3, #1]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <IS_Init>:


/**
 * @brief Initializes the ignition system and timers
 */
IS_Status IS_Init(IgnitionSystem *sys, IS_Config *cfg) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
    if (!sys || !cfg) return IS_ERROR_NULL_PTR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <IS_Init+0x16>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <IS_Init+0x1a>
 8001206:	2301      	movs	r3, #1
 8001208:	e02a      	b.n	8001260 <IS_Init+0x70>
    memcpy((void*)&sys->cfg, cfg, sizeof(IS_Config));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	224c      	movs	r2, #76	@ 0x4c
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f005 ff26 	bl	8007062 <memcpy>

    memset(&sys->state, 0, sizeof(IS_State)); //zero init
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3350      	adds	r3, #80	@ 0x50
 800121a:	2298      	movs	r2, #152	@ 0x98
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fe9f 	bl	8006f62 <memset>
    sys->state.engine_state = ENGINE_STOPPED;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    ISM_Init(&fsm);
 800122c:	480e      	ldr	r0, [pc, #56]	@ (8001268 <IS_Init+0x78>)
 800122e:	f7ff fef5 	bl	800101c <ISM_Init>

    // Start encoder and timers
    HAL_TIM_Encoder_Start_IT(sys->cfg.encoder_timer, TIM_CHANNEL_ALL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	213c      	movs	r1, #60	@ 0x3c
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fb27 	bl	800488c <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_Base_Start_IT(sys->cfg.input_capture_timer);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f832 	bl	80042ac <HAL_TIM_Base_Start_IT>
    HAL_TIM_IC_Start_IT(sys->cfg.input_capture_timer, TIM_CHANNEL_1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f003 f94e 	bl	80044f0 <HAL_TIM_IC_Start_IT>
    HAL_TIM_Base_Start(sys->cfg.time_base_timer);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f002 ffbf 	bl	80041dc <HAL_TIM_Base_Start>

    return IS_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200001f4 	.word	0x200001f4

0800126c <IS_UpdateRPM>:

/**
 * @brief Updates engine RPM based on encoder position change over time
 */

IS_Status IS_UpdateRPM(IgnitionSystem *sys) {
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    if (!sys) return IS_ERROR_NULL_PTR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <IS_UpdateRPM+0x12>
 800127a:	2301      	movs	r3, #1
 800127c:	e05d      	b.n	800133a <IS_UpdateRPM+0xce>
    unsigned int current_time = __HAL_TIM_GET_COUNTER(sys->cfg.time_base_timer);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	617b      	str	r3, [r7, #20]
    unsigned int current_position = __HAL_TIM_GET_COUNTER(sys->cfg.encoder_timer);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001290:	613b      	str	r3, [r7, #16]

    if ((current_time - sys->state.timestamp_last_position >= RPM_SAMPLE_INTERVAL) ||
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d80f      	bhi.n	80012c4 <IS_UpdateRPM+0x58>
        (current_time < sys->state.timestamp_last_position && (UINT32_MAX - sys->state.timestamp_last_position + current_time) >= RPM_SAMPLE_INTERVAL)) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    if ((current_time - sys->state.timestamp_last_position >= RPM_SAMPLE_INTERVAL) ||
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d243      	bcs.n	8001338 <IS_UpdateRPM+0xcc>
        (current_time < sys->state.timestamp_last_position && (UINT32_MAX - sys->state.timestamp_last_position + current_time) >= RPM_SAMPLE_INTERVAL)) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d939      	bls.n	8001338 <IS_UpdateRPM+0xcc>

        unsigned int delta_pos = (current_position >= sys->state.encoder_last_position)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
            ? current_position - sys->state.encoder_last_position
            : (0xFFFF - sys->state.encoder_last_position + current_position);
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d305      	bcc.n	80012dc <IS_UpdateRPM+0x70>
            ? current_position - sys->state.encoder_last_position
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
            : (0xFFFF - sys->state.encoder_last_position + current_position);
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	e007      	b.n	80012ec <IS_UpdateRPM+0x80>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80012ea:	33ff      	adds	r3, #255	@ 0xff
        unsigned int delta_pos = (current_position >= sys->state.encoder_last_position)
 80012ec:	60fb      	str	r3, [r7, #12]

        if (delta_pos < ENCODER_MIN_DELTA) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10a      	bne.n	800130a <IS_UpdateRPM+0x9e>
            sys->state.engine_state = ENGINE_STOPPED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            sys->state.frequency = 0;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	665a      	str	r2, [r3, #100]	@ 0x64
            sys->state.rpm = 0;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	661a      	str	r2, [r3, #96]	@ 0x60
 8001308:	e00e      	b.n	8001328 <IS_UpdateRPM+0xbc>
        } else {
            sys->state.engine_state = ENGINE_RUNNING;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            sys->state.frequency = sys->state.tim4_frequency;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	665a      	str	r2, [r3, #100]	@ 0x64
            sys->state.rpm = sys->state.tim4_frequency * 2; // Half camshaft encoder
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001322:	005a      	lsls	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        sys->state.encoder_last_position = current_position;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        sys->state.timestamp_last_position = current_time;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }
    return IS_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <IS_CalculatePulseTime>:
/**
 * @brief Calculates how many encoder pulses are needed to charge the coil
 *        for a given RPM and battery voltage
 */
float batt_voltage = -1.f;
IS_Status IS_CalculatePulseTime(IgnitionSystem *sys) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	@ 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    if (!sys) return IS_ERROR_NULL_PTR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <IS_CalculatePulseTime+0x12>
 8001356:	2301      	movs	r3, #1
 8001358:	e094      	b.n	8001484 <IS_CalculatePulseTime+0x13c>
    if (sys->state.rpm == 0) return IS_ERROR_INVALID_STATE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <IS_CalculatePulseTime+0x1e>
 8001362:	2302      	movs	r3, #2
 8001364:	e08e      	b.n	8001484 <IS_CalculatePulseTime+0x13c>

    batt_voltage = Read_BatteryVoltage(sys->cfg.battery_adc)* (V_MAX - V_MIN) / VREF + V_MIN;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fad4 	bl	8002918 <Read_BatteryVoltage>
 8001370:	ee10 3a10 	vmov	r3, s0
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b48      	ldr	r3, [pc, #288]	@ (80014a0 <IS_CalculatePulseTime+0x158>)
 8001380:	f7ff f93a 	bl	80005f8 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	a340      	add	r3, pc, #256	@ (adr r3, 8001490 <IS_CalculatePulseTime+0x148>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff fa5b 	bl	800084c <__aeabi_ddiv>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b40      	ldr	r3, [pc, #256]	@ (80014a4 <IS_CalculatePulseTime+0x15c>)
 80013a4:	f7fe ff72 	bl	800028c <__adddf3>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fbfa 	bl	8000ba8 <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a3c      	ldr	r2, [pc, #240]	@ (80014a8 <IS_CalculatePulseTime+0x160>)
 80013b8:	6013      	str	r3, [r2, #0]

    //float batt_voltage = 15;
    if (batt_voltage < 0.0f) return IS_ERROR_INVALID_STATE;
 80013ba:	4b3b      	ldr	r3, [pc, #236]	@ (80014a8 <IS_CalculatePulseTime+0x160>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d501      	bpl.n	80013ce <IS_CalculatePulseTime+0x86>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e05a      	b.n	8001484 <IS_CalculatePulseTime+0x13c>

    float dwell_time = Lookup_DwellTime(batt_voltage);
 80013ce:	4b36      	ldr	r3, [pc, #216]	@ (80014a8 <IS_CalculatePulseTime+0x160>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eeb0 0a67 	vmov.f32	s0, s15
 80013d8:	f001 fa16 	bl	8002808 <Lookup_DwellTime>
 80013dc:	ee07 0a90 	vmov	s15, r0
 80013e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    double timePerRev = 60.0 / sys->state.rpm; // calcs in seconds and 60 seconds per minute
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f889 	bl	8000504 <__aeabi_ui2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	f04f 0000 	mov.w	r0, #0
 80013fa:	492c      	ldr	r1, [pc, #176]	@ (80014ac <IS_CalculatePulseTime+0x164>)
 80013fc:	f7ff fa26 	bl	800084c <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double timePerPulse = timePerRev * 1000.0 / ENCODER_TIMER_PPR;//in ms //120;//ENCODER_TIMER_PPR;
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <IS_CalculatePulseTime+0x168>)
 800140e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001412:	f7ff f8f1 	bl	80005f8 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	a31e      	add	r3, pc, #120	@ (adr r3, 8001498 <IS_CalculatePulseTime+0x150>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff fa12 	bl	800084c <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double pulsesNeeded = dwell_time / timePerPulse; // required pulses
 8001430:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001432:	f7ff f889 	bl	8000548 <__aeabi_f2d>
 8001436:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800143a:	f7ff fa07 	bl	800084c <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	e9c7 2302 	strd	r2, r3, [r7, #8]

    sys->state.pulses = (int)(pulsesNeeded + 0.5);
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <IS_CalculatePulseTime+0x16c>)
 800144c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001450:	f7fe ff1c 	bl	800028c <__adddf3>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fb7c 	bl	8000b58 <__aeabi_d2iz>
 8001460:	4602      	mov	r2, r0
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	651a      	str	r2, [r3, #80]	@ 0x50
    sys->state.totalTimeMs = sys->state.pulses * timePerPulse;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f85a 	bl	8000524 <__aeabi_i2d>
 8001470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001474:	f7ff f8c0 	bl	80005f8 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    return IS_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3728      	adds	r7, #40	@ 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	f3af 8000 	nop.w
 8001490:	60000000 	.word	0x60000000
 8001494:	400a6666 	.word	0x400a6666
 8001498:	00000000 	.word	0x00000000
 800149c:	406de000 	.word	0x406de000
 80014a0:	402c0000 	.word	0x402c0000
 80014a4:	40180000 	.word	0x40180000
 80014a8:	20000000 	.word	0x20000000
 80014ac:	404e0000 	.word	0x404e0000
 80014b0:	408f4000 	.word	0x408f4000
 80014b4:	3fe00000 	.word	0x3fe00000

080014b8 <IS_ControlCoil>:
/**
 * @brief Controls coil ON/OFF based on state machine and current cylinder
 */


IS_Status IS_ControlCoil(IgnitionSystem *sys) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af02      	add	r7, sp, #8
 80014be:	6078      	str	r0, [r7, #4]
    if (!sys)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <IS_ControlCoil+0x12>
        return IS_ERROR_NULL_PTR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0d7      	b.n	800167a <IS_ControlCoil+0x1c2>

    if (sys->state.engine_state == ENGINE_STOPPED) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d120      	bne.n	8001516 <IS_ControlCoil+0x5e>
        for (int i = 0; i < TOTAL_CYLINDERS; ++i) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e018      	b.n	800150c <IS_ControlCoil+0x54>
            HAL_GPIO_WritePin(sys->cfg.coil_ports[i], sys->cfg.coil_pins[i], GPIO_PIN_RESET);
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3304      	adds	r3, #4
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	6858      	ldr	r0, [r3, #4]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3318      	adds	r3, #24
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	889b      	ldrh	r3, [r3, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	4619      	mov	r1, r3
 80014f6:	f002 f957 	bl	80037a8 <HAL_GPIO_WritePin>
            sys->state.coil_state[i] = COIL_OFF;
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	4413      	add	r3, r2
 8001500:	3379      	adds	r3, #121	@ 0x79
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < TOTAL_CYLINDERS; ++i) {
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b07      	cmp	r3, #7
 8001510:	dde3      	ble.n	80014da <IS_ControlCoil+0x22>
        }
        return IS_OK; // Skip further processing
 8001512:	2300      	movs	r3, #0
 8001514:	e0b1      	b.n	800167a <IS_ControlCoil+0x1c2>
    }
    uint32_t encoder_pos = __HAL_TIM_GET_COUNTER(sys->cfg.encoder_timer);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151e:	613b      	str	r3, [r7, #16]
    if (sys->state.isCrossed)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <IS_ControlCoil+0x80>
        sys->state.encoder_wrapped_position = ENCODER_TIMER_ENGINE_HALF_CYCLE_PULSES + encoder_pos;
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f103 02ef 	add.w	r2, r3, #239	@ 0xef
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001536:	e003      	b.n	8001540 <IS_ControlCoil+0x88>
    else
        sys->state.encoder_wrapped_position = encoder_pos;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    if (sys->state.encoder_wrapped_position >= ENCODER_TIMER_ENGINE_FULL_CYCLE_PULSES) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001546:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 800154a:	d303      	bcc.n	8001554 <IS_ControlCoil+0x9c>
        sys->state.encoder_wrapped_position = 0;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        //sys->state.isCrossed = false;
    }
    sys->state.cyl_no = CylinderScheduler_GetCurrent(sys->state.encoder_wrapped_position);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fd0a 	bl	8000f74 <CylinderScheduler_GetCurrent>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    //sys->state.cyl_no = CylinderScheduler_GetCurrent(encoder_pos);

    if (sys->state.cyl_no < 1 || sys->state.cyl_no > TOTAL_CYLINDERS)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <IS_ControlCoil+0xc6>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800157a:	2b08      	cmp	r3, #8
 800157c:	d901      	bls.n	8001582 <IS_ControlCoil+0xca>
        return IS_ERROR_INVALID_STATE;
 800157e:	2302      	movs	r3, #2
 8001580:	e07b      	b.n	800167a <IS_ControlCoil+0x1c2>

    sys->state.angle = CylinderScheduler_GetIgnitionAngle(sys->state.cyl_no);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fd23 	bl	8000fd4 <CylinderScheduler_GetIgnitionAngle>
 800158e:	4602      	mov	r2, r0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    // update FSM
    ISM_Update(&fsm, sys->state.encoder_wrapped_position, sys->state.pulses, sys->state.angle, sys->state.cyl_no);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a0:	4618      	mov	r0, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	4602      	mov	r2, r0
 80015b4:	4833      	ldr	r0, [pc, #204]	@ (8001684 <IS_ControlCoil+0x1cc>)
 80015b6:	f7ff fd51 	bl	800105c <ISM_Update>

    int idx = fsm.current_cylinder - 1;
 80015ba:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <IS_ControlCoil+0x1cc>)
 80015bc:	7c1b      	ldrb	r3, [r3, #16]
 80015be:	3b01      	subs	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]

    if (fsm.coil_on) { //fsm says to turn the coil on
 80015c2:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <IS_ControlCoil+0x1cc>)
 80015c4:	7c5b      	ldrb	r3, [r3, #17]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d025      	beq.n	8001616 <IS_ControlCoil+0x15e>
        if (sys->state.coil_state[idx] == COIL_OFF) // if coil is off
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	3379      	adds	r3, #121	@ 0x79
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <IS_ControlCoil+0x130>
            sys->state.coil_on_start[idx] = HAL_GetTick(); // tracks time just before turning it on
 80015d8:	f001 fa60 	bl	8002a9c <HAL_GetTick>
 80015dc:	4601      	mov	r1, r0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	322a      	adds	r2, #42	@ 0x2a
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        HAL_GPIO_WritePin(sys->cfg.coil_ports[idx], sys->cfg.coil_pins[idx], GPIO_PIN_SET); // turns on the coil
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3304      	adds	r3, #4
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	6858      	ldr	r0, [r3, #4]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3318      	adds	r3, #24
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	889b      	ldrh	r3, [r3, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	f002 f8d0 	bl	80037a8 <HAL_GPIO_WritePin>
        sys->state.coil_state[idx] = COIL_ON; //sets the state to on
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	3379      	adds	r3, #121	@ 0x79
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e030      	b.n	8001678 <IS_ControlCoil+0x1c0>
    } else {
        if (sys->state.coil_state[idx] == COIL_ON)
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	3379      	adds	r3, #121	@ 0x79
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d113      	bne.n	800164c <IS_ControlCoil+0x194>
            sys->state.coil_durations[idx] = HAL_GetTick() - sys->state.coil_on_start[idx]; // if it is on then checks how much time have passed
 8001624:	f001 fa3a 	bl	8002a9c <HAL_GetTick>
 8001628:	4601      	mov	r1, r0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	322a      	adds	r2, #42	@ 0x2a
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	1acb      	subs	r3, r1, r3
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3332      	adds	r3, #50	@ 0x32
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	edc3 7a00 	vstr	s15, [r3]

        HAL_GPIO_WritePin(sys->cfg.coil_ports[idx], sys->cfg.coil_pins[idx], GPIO_PIN_RESET);
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3304      	adds	r3, #4
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	6858      	ldr	r0, [r3, #4]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3318      	adds	r3, #24
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	889b      	ldrh	r3, [r3, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	f002 f89e 	bl	80037a8 <HAL_GPIO_WritePin>
        sys->state.coil_state[idx] = COIL_OFF;
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	3379      	adds	r3, #121	@ 0x79
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
    }

    return IS_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001f4 	.word	0x200001f4

08001688 <IS_TIM_IC_CaptureCallback>:
}

/**
 * @brief Input Capture callback to measure frequency between encoder pulses
 */
void IS_TIM_IC_CaptureCallback(IgnitionSystem *sys) {
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
    if (!sys) return;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d037      	beq.n	8001706 <IS_TIM_IC_CaptureCallback+0x7e>

    if (sys->state.frequency_status == 0) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10e      	bne.n	80016be <IS_TIM_IC_CaptureCallback+0x36>
        sys->state.pulse_time1 = sys->cfg.input_capture_timer->Instance->CCR1;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	66da      	str	r2, [r3, #108]	@ 0x6c
        sys->state.count_overflow = 0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
        sys->state.frequency_status = 1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
 80016bc:	e024      	b.n	8001708 <IS_TIM_IC_CaptureCallback+0x80>
    } else if (sys->state.frequency_status == 1) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d11f      	bne.n	8001708 <IS_TIM_IC_CaptureCallback+0x80>
        sys->state.pulse_time2 = sys->cfg.input_capture_timer->Instance->CCR1;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	671a      	str	r2, [r3, #112]	@ 0x70
        sys->state.ticks = (sys->state.pulse_time2 + (sys->state.count_overflow * 65536)) - sys->state.pulse_time1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	f8b2 2074 	ldrh.w	r2, [r2, #116]	@ 0x74
 80016de:	0412      	lsls	r2, r2, #16
 80016e0:	441a      	add	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016e6:	1ad2      	subs	r2, r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	669a      	str	r2, [r3, #104]	@ 0x68
        sys->state.tim4_frequency = (uint32_t)(84000000UL / sys->state.ticks);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016f0:	4a08      	ldr	r2, [pc, #32]	@ (8001714 <IS_TIM_IC_CaptureCallback+0x8c>)
 80016f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        sys->state.frequency_status = 0;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
 8001704:	e000      	b.n	8001708 <IS_TIM_IC_CaptureCallback+0x80>
    if (!sys) return;
 8001706:	bf00      	nop
    }
}
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	0501bd00 	.word	0x0501bd00

08001718 <IS_TIM_PeriodElapsedCallback>:

/**
 * @brief Period elapsed callback to count overflows between input captures
 */
void IS_TIM_PeriodElapsedCallback(IgnitionSystem *sys) { //overflow to detect errors
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    if (!sys) return;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d008      	beq.n	8001738 <IS_TIM_PeriodElapsedCallback+0x20>
    sys->state.count_overflow++;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800172c:	3301      	adds	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 8001736:	e000      	b.n	800173a <IS_TIM_PeriodElapsedCallback+0x22>
    if (!sys) return;
 8001738:	bf00      	nop
}
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <IS_EXTI_Callback>:

/**
 * @brief External interrupt callback (e.g. encoder index pulse)
 */
void IS_EXTI_Callback(IgnitionSystem *sys, uint16_t GPIO_Pin, uint16_t expected_pin) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	4613      	mov	r3, r2
 8001752:	803b      	strh	r3, [r7, #0]
    if (!sys) return;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d037      	beq.n	80017ca <IS_EXTI_Callback+0x86>
    static uint8_t index_counter = 0;  // counts number of rising edges (index pulses)

    if (GPIO_Pin == expected_pin) {
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	883b      	ldrh	r3, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d134      	bne.n	80017cc <IS_EXTI_Callback+0x88>
    	sys->state.isCrossed ^= 1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001768:	f083 0301 	eor.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2da      	uxtb	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        index_counter++;
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <IS_EXTI_Callback+0x90>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <IS_EXTI_Callback+0x90>)
 8001788:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Encoder_Stop_IT(sys->cfg.encoder_timer, TIM_CHANNEL_ALL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	213c      	movs	r1, #60	@ 0x3c
 8001790:	4618      	mov	r0, r3
 8001792:	f003 f929 	bl	80049e8 <HAL_TIM_Encoder_Stop_IT>
        __HAL_TIM_SET_COUNTER(sys->cfg.encoder_timer, 0);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_TIM_Encoder_Start_IT(sys->cfg.encoder_timer, TIM_CHANNEL_ALL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	213c      	movs	r1, #60	@ 0x3c
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 f870 	bl	800488c <HAL_TIM_Encoder_Start_IT>

        if (index_counter >= (CRANK_CYCLE_DEG/360)) {  // 2 pulses = 720° (full crank cycle)
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <IS_EXTI_Callback+0x90>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d90b      	bls.n	80017cc <IS_EXTI_Callback+0x88>
        	index_counter = 0;
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <IS_EXTI_Callback+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
               sys->state.index_detected = 1;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
               ISM_IndexDetected(&fsm);
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <IS_EXTI_Callback+0x94>)
 80017c4:	f7ff fd06 	bl	80011d4 <ISM_IndexDetected>
 80017c8:	e000      	b.n	80017cc <IS_EXTI_Callback+0x88>
    if (!sys) return;
 80017ca:	bf00      	nop
           }
    }
}
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000020c 	.word	0x2000020c
 80017d8:	200001f4 	.word	0x200001f4

080017dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e0:	f001 f8f6 	bl	80029d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e4:	f000 f818 	bl	8001818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e8:	f000 fb36 	bl	8001e58 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80017ec:	f000 fb0a 	bl	8001e04 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80017f0:	f000 f924 	bl	8001a3c <MX_TIM2_Init>
  MX_TIM1_Init();
 80017f4:	f000 f8cc 	bl	8001990 <MX_TIM1_Init>
  MX_TIM4_Init();
 80017f8:	f000 f9f6 	bl	8001be8 <MX_TIM4_Init>
  MX_TIM3_Init();
 80017fc:	f000 f972 	bl	8001ae4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001800:	f000 fa62 	bl	8001cc8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001804:	f000 faae 	bl	8001d64 <MX_TIM8_Init>
  MX_ADC1_Init();
 8001808:	f000 f870 	bl	80018ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  init();
 800180c:	f000 feac 	bl	8002568 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001810:	f000 fec6 	bl	80025a0 <loop>
 8001814:	e7fc      	b.n	8001810 <main+0x34>
	...

08001818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b094      	sub	sp, #80	@ 0x50
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	2230      	movs	r2, #48	@ 0x30
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f005 fb9b 	bl	8006f62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <SystemClock_Config+0xcc>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	4a27      	ldr	r2, [pc, #156]	@ (80018e4 <SystemClock_Config+0xcc>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800184a:	6413      	str	r3, [r2, #64]	@ 0x40
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <SystemClock_Config+0xcc>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <SystemClock_Config+0xd0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a21      	ldr	r2, [pc, #132]	@ (80018e8 <SystemClock_Config+0xd0>)
 8001862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <SystemClock_Config+0xd0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001874:	2301      	movs	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001878:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187e:	2302      	movs	r3, #2
 8001880:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001882:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001888:	2304      	movs	r3, #4
 800188a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800188c:	23a8      	movs	r3, #168	@ 0xa8
 800188e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001890:	2302      	movs	r3, #2
 8001892:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001894:	2304      	movs	r3, #4
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	4618      	mov	r0, r3
 800189e:	f001 ffb5 	bl	800380c <HAL_RCC_OscConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018a8:	f000 fbca 	bl	8002040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ac:	230f      	movs	r3, #15
 80018ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b0:	2302      	movs	r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2105      	movs	r1, #5
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fa16 	bl	8003cfc <HAL_RCC_ClockConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018d6:	f000 fbb3 	bl	8002040 <Error_Handler>
  }
}
 80018da:	bf00      	nop
 80018dc:	3750      	adds	r7, #80	@ 0x50
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000

080018ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <MX_ADC1_Init+0x98>)
 8001900:	4a21      	ldr	r2, [pc, #132]	@ (8001988 <MX_ADC1_Init+0x9c>)
 8001902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001904:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <MX_ADC1_Init+0x98>)
 8001906:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800190a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800190c:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <MX_ADC1_Init+0x98>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <MX_ADC1_Init+0x98>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <MX_ADC1_Init+0x98>)
 800191a:	2200      	movs	r2, #0
 800191c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800191e:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <MX_ADC1_Init+0x98>)
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001926:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <MX_ADC1_Init+0x98>)
 8001928:	2200      	movs	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <MX_ADC1_Init+0x98>)
 800192e:	4a17      	ldr	r2, [pc, #92]	@ (800198c <MX_ADC1_Init+0xa0>)
 8001930:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001932:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MX_ADC1_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <MX_ADC1_Init+0x98>)
 800193a:	2201      	movs	r2, #1
 800193c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MX_ADC1_Init+0x98>)
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MX_ADC1_Init+0x98>)
 8001948:	2201      	movs	r2, #1
 800194a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800194c:	480d      	ldr	r0, [pc, #52]	@ (8001984 <MX_ADC1_Init+0x98>)
 800194e:	f001 f8b1 	bl	8002ab4 <HAL_ADC_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001958:	f000 fb72 	bl	8002040 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800195c:	2304      	movs	r3, #4
 800195e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001960:	2301      	movs	r3, #1
 8001962:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	@ (8001984 <MX_ADC1_Init+0x98>)
 800196e:	f001 fa4f 	bl	8002e10 <HAL_ADC_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001978:	f000 fb62 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000210 	.word	0x20000210
 8001988:	40012000 	.word	0x40012000
 800198c:	0f000001 	.word	0x0f000001

08001990 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	@ 0x30
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2224      	movs	r2, #36	@ 0x24
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f005 fadf 	bl	8006f62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ac:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <MX_TIM1_Init+0xa4>)
 80019ae:	4a22      	ldr	r2, [pc, #136]	@ (8001a38 <MX_TIM1_Init+0xa8>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <MX_TIM1_Init+0xa4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <MX_TIM1_Init+0xa4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 240-1;
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <MX_TIM1_Init+0xa4>)
 80019c0:	22ef      	movs	r2, #239	@ 0xef
 80019c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <MX_TIM1_Init+0xa4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <MX_TIM1_Init+0xa4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <MX_TIM1_Init+0xa4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019d6:	2303      	movs	r3, #3
 80019d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80019da:	2302      	movs	r3, #2
 80019dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80019ea:	2302      	movs	r3, #2
 80019ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ee:	2301      	movs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <MX_TIM1_Init+0xa4>)
 8001a02:	f002 fe9d 	bl	8004740 <HAL_TIM_Encoder_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001a0c:	f000 fb18 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_TIM1_Init+0xa4>)
 8001a1e:	f004 f813 	bl	8005a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001a28:	f000 fb0a 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3730      	adds	r7, #48	@ 0x30
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000258 	.word	0x20000258
 8001a38:	40010000 	.word	0x40010000

08001a3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	@ 0x30
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	2224      	movs	r2, #36	@ 0x24
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f005 fa89 	bl	8006f62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a58:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <MX_TIM2_Init+0xa4>)
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <MX_TIM2_Init+0xa4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <MX_TIM2_Init+0xa4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <MX_TIM2_Init+0xa4>)
 8001a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <MX_TIM2_Init+0xa4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <MX_TIM2_Init+0xa4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a80:	2303      	movs	r3, #3
 8001a82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a84:	2302      	movs	r3, #2
 8001a86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a94:	2302      	movs	r3, #2
 8001a96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <MX_TIM2_Init+0xa4>)
 8001aac:	f002 fe48 	bl	8004740 <HAL_TIM_Encoder_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ab6:	f000 fac3 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <MX_TIM2_Init+0xa4>)
 8001ac8:	f003 ffbe 	bl	8005a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ad2:	f000 fab5 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	3730      	adds	r7, #48	@ 0x30
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200002a0 	.word	0x200002a0

08001ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08e      	sub	sp, #56	@ 0x38
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	f107 0320 	add.w	r3, r7, #32
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	615a      	str	r2, [r3, #20]
 8001b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b14:	4b32      	ldr	r3, [pc, #200]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b16:	4a33      	ldr	r2, [pc, #204]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001b1a:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b1c:	f240 3247 	movw	r2, #839	@ 0x347
 8001b20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b2a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b36:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b38:	2280      	movs	r2, #128	@ 0x80
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b3c:	4828      	ldr	r0, [pc, #160]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b3e:	f002 fafd 	bl	800413c <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b48:	f000 fa7a 	bl	8002040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4821      	ldr	r0, [pc, #132]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b5a:	f003 fa49 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b64:	f000 fa6c 	bl	8002040 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b68:	481d      	ldr	r0, [pc, #116]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b6a:	f002 fc0f 	bl	800438c <HAL_TIM_PWM_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b74:	f000 fa64 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b80:	f107 0320 	add.w	r3, r7, #32
 8001b84:	4619      	mov	r1, r3
 8001b86:	4816      	ldr	r0, [pc, #88]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001b88:	f003 ff5e 	bl	8005a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b92:	f000 fa55 	bl	8002040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b96:	2360      	movs	r3, #96	@ 0x60
 8001b98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4619      	mov	r1, r3
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001bae:	f003 f95d 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bb8:	f000 fa42 	bl	8002040 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4807      	ldr	r0, [pc, #28]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001bc4:	f003 f952 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001bce:	f000 fa37 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bd2:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <MX_TIM3_Init+0xfc>)
 8001bd4:	f000 fbf4 	bl	80023c0 <HAL_TIM_MspPostInit>

}
 8001bd8:	bf00      	nop
 8001bda:	3738      	adds	r7, #56	@ 0x38
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200002e8 	.word	0x200002e8
 8001be4:	40000400 	.word	0x40000400

08001be8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c06:	463b      	mov	r3, r7
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c12:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c14:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc4 <MX_TIM4_Init+0xdc>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c18:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b28      	ldr	r3, [pc, #160]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c24:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c38:	4821      	ldr	r0, [pc, #132]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c3a:	f002 fa7f 	bl	800413c <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001c44:	f000 f9fc 	bl	8002040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	4619      	mov	r1, r3
 8001c54:	481a      	ldr	r0, [pc, #104]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c56:	f003 f9cb 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c60:	f000 f9ee 	bl	8002040 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001c64:	4816      	ldr	r0, [pc, #88]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c66:	f002 fbea 	bl	800443e <HAL_TIM_IC_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c70:	f000 f9e6 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	480f      	ldr	r0, [pc, #60]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001c84:	f003 fee0 	bl	8005a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001c8e:	f000 f9d7 	bl	8002040 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c92:	2302      	movs	r3, #2
 8001c94:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c96:	2301      	movs	r3, #1
 8001c98:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_TIM4_Init+0xd8>)
 8001caa:	f003 f842 	bl	8004d32 <HAL_TIM_IC_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001cb4:	f000 f9c4 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	@ 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000330 	.word	0x20000330
 8001cc4:	40000800 	.word	0x40000800

08001cc8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	463b      	mov	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <MX_TIM5_Init+0x94>)
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d60 <MX_TIM5_Init+0x98>)
 8001ce8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <MX_TIM5_Init+0x94>)
 8001cec:	2253      	movs	r2, #83	@ 0x53
 8001cee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <MX_TIM5_Init+0x94>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <MX_TIM5_Init+0x94>)
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <MX_TIM5_Init+0x94>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d04:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <MX_TIM5_Init+0x94>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d0a:	4814      	ldr	r0, [pc, #80]	@ (8001d5c <MX_TIM5_Init+0x94>)
 8001d0c:	f002 fa16 	bl	800413c <HAL_TIM_Base_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001d16:	f000 f993 	bl	8002040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	4619      	mov	r1, r3
 8001d26:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <MX_TIM5_Init+0x94>)
 8001d28:	f003 f962 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001d32:	f000 f985 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d3e:	463b      	mov	r3, r7
 8001d40:	4619      	mov	r1, r3
 8001d42:	4806      	ldr	r0, [pc, #24]	@ (8001d5c <MX_TIM5_Init+0x94>)
 8001d44:	f003 fe80 	bl	8005a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001d4e:	f000 f977 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000378 	.word	0x20000378
 8001d60:	40000c00 	.word	0x40000c00

08001d64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	463b      	mov	r3, r7
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d80:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001d82:	4a1f      	ldr	r2, [pc, #124]	@ (8001e00 <MX_TIM8_Init+0x9c>)
 8001d84:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d86:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001d94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d98:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001dac:	4813      	ldr	r0, [pc, #76]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001dae:	f002 f9c5 	bl	800413c <HAL_TIM_Base_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001db8:	f000 f942 	bl	8002040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480c      	ldr	r0, [pc, #48]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001dca:	f003 f911 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001dd4:	f000 f934 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <MX_TIM8_Init+0x98>)
 8001de6:	f003 fe2f 	bl	8005a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001df0:	f000 f926 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200003c0 	.word	0x200003c0
 8001e00:	40010400 	.word	0x40010400

08001e04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e08:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <MX_USART1_UART_Init+0x50>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e3c:	f003 fe94 	bl	8005b68 <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e46:	f000 f8fb 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000408 	.word	0x20000408
 8001e54:	40011000 	.word	0x40011000

08001e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	@ 0x30
 8001e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	4b6d      	ldr	r3, [pc, #436]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a6c      	ldr	r2, [pc, #432]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	4b66      	ldr	r3, [pc, #408]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a65      	ldr	r2, [pc, #404]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b63      	ldr	r3, [pc, #396]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a5e      	ldr	r2, [pc, #376]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b58      	ldr	r3, [pc, #352]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a57      	ldr	r2, [pc, #348]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b55      	ldr	r3, [pc, #340]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b51      	ldr	r3, [pc, #324]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a50      	ldr	r2, [pc, #320]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b4e      	ldr	r3, [pc, #312]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a49      	ldr	r2, [pc, #292]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <MX_GPIO_Init+0x1d0>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f1c:	4843      	ldr	r0, [pc, #268]	@ (800202c <MX_GPIO_Init+0x1d4>)
 8001f1e:	f001 fc43 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYL11_Pin|CYL12_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001f28:	4841      	ldr	r0, [pc, #260]	@ (8002030 <MX_GPIO_Init+0x1d8>)
 8001f2a:	f001 fc3d 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CYL_1_Pin|CYL_2_Pin|CYL_5_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8001f34:	483f      	ldr	r0, [pc, #252]	@ (8002034 <MX_GPIO_Init+0x1dc>)
 8001f36:	f001 fc37 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CYL_3_Pin|CYL_7_Pin|CYL_6_Pin, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001f40:	483d      	ldr	r0, [pc, #244]	@ (8002038 <MX_GPIO_Init+0x1e0>)
 8001f42:	f001 fc31 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CYL_8_Pin|CYL_9_Pin|CYL_10_Pin|CYL_4_Pin
 8001f46:	2200      	movs	r2, #0
 8001f48:	213f      	movs	r1, #63	@ 0x3f
 8001f4a:	483c      	ldr	r0, [pc, #240]	@ (800203c <MX_GPIO_Init+0x1e4>)
 8001f4c:	f001 fc2c 	bl	80037a8 <HAL_GPIO_WritePin>
                          |CYL_12_Pin|CYL_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ENCODER_Z_IDX_Pin PA3 */
  GPIO_InitStruct.Pin = ENCODER_Z_IDX_Pin|GPIO_PIN_3;
 8001f50:	230c      	movs	r3, #12
 8001f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f54:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	4833      	ldr	r0, [pc, #204]	@ (8002034 <MX_GPIO_Init+0x1dc>)
 8001f66:	f001 fa83 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	482a      	ldr	r0, [pc, #168]	@ (800202c <MX_GPIO_Init+0x1d4>)
 8001f84:	f001 fa74 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYL11_Pin CYL12_Pin */
  GPIO_InitStruct.Pin = CYL11_Pin|CYL12_Pin;
 8001f88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4823      	ldr	r0, [pc, #140]	@ (8002030 <MX_GPIO_Init+0x1d8>)
 8001fa2:	f001 fa65 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYL_1_Pin CYL_2_Pin CYL_5_Pin */
  GPIO_InitStruct.Pin = CYL_1_Pin|CYL_2_Pin|CYL_5_Pin;
 8001fa6:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8001faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	481d      	ldr	r0, [pc, #116]	@ (8002034 <MX_GPIO_Init+0x1dc>)
 8001fc0:	f001 fa56 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYL_3_Pin CYL_7_Pin CYL_6_Pin */
  GPIO_InitStruct.Pin = CYL_3_Pin|CYL_7_Pin|CYL_6_Pin;
 8001fc4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4816      	ldr	r0, [pc, #88]	@ (8002038 <MX_GPIO_Init+0x1e0>)
 8001fde:	f001 fa47 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYL_8_Pin CYL_9_Pin CYL_10_Pin CYL_4_Pin
                           CYL_12_Pin CYL_11_Pin */
  GPIO_InitStruct.Pin = CYL_8_Pin|CYL_9_Pin|CYL_10_Pin|CYL_4_Pin
 8001fe2:	233f      	movs	r3, #63	@ 0x3f
 8001fe4:	61fb      	str	r3, [r7, #28]
                          |CYL_12_Pin|CYL_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4810      	ldr	r0, [pc, #64]	@ (800203c <MX_GPIO_Init+0x1e4>)
 8001ffa:	f001 fa39 	bl	8003470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2008      	movs	r0, #8
 8002004:	f001 f9fd 	bl	8003402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002008:	2008      	movs	r0, #8
 800200a:	f001 fa16 	bl	800343a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	2009      	movs	r0, #9
 8002014:	f001 f9f5 	bl	8003402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002018:	2009      	movs	r0, #9
 800201a:	f001 fa0e 	bl	800343a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800201e:	bf00      	nop
 8002020:	3730      	adds	r7, #48	@ 0x30
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40021000 	.word	0x40021000
 8002030:	40020400 	.word	0x40020400
 8002034:	40020000 	.word	0x40020000
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00

08002040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002044:	b672      	cpsid	i
}
 8002046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <Error_Handler+0x8>

0800204c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002054:	1d39      	adds	r1, r7, #4
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	2201      	movs	r2, #1
 800205c:	4803      	ldr	r0, [pc, #12]	@ (800206c <__io_putchar+0x20>)
 800205e:	f003 fdd3 	bl	8005c08 <HAL_UART_Transmit>
  return ch;
 8002062:	687b      	ldr	r3, [r7, #4]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000408 	.word	0x20000408

08002070 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <__io_getchar+0x48>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <__io_getchar+0x48>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002090:	1df9      	adds	r1, r7, #7
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	2201      	movs	r2, #1
 8002098:	4807      	ldr	r0, [pc, #28]	@ (80020b8 <__io_getchar+0x48>)
 800209a:	f003 fe40 	bl	8005d1e <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800209e:	1df9      	adds	r1, r7, #7
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
 80020a4:	2201      	movs	r2, #1
 80020a6:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <__io_getchar+0x48>)
 80020a8:	f003 fdae 	bl	8005c08 <HAL_UART_Transmit>
  return ch;
 80020ac:	79fb      	ldrb	r3, [r7, #7]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000408 	.word	0x20000408

080020bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	@ (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <HAL_ADC_MspInit+0x7c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d127      	bne.n	800217e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b16      	ldr	r3, [pc, #88]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	4a15      	ldr	r2, [pc, #84]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213c:	6453      	str	r3, [r2, #68]	@ 0x44
 800213e:	4b13      	ldr	r3, [pc, #76]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a0e      	ldr	r2, [pc, #56]	@ (800218c <HAL_ADC_MspInit+0x80>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <HAL_ADC_MspInit+0x80>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002166:	2310      	movs	r3, #16
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216a:	2303      	movs	r3, #3
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	@ (8002190 <HAL_ADC_MspInit+0x84>)
 800217a:	f001 f979 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40012000 	.word	0x40012000
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	@ 0x30
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a36      	ldr	r2, [pc, #216]	@ (800228c <HAL_TIM_Encoder_MspInit+0xf8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d135      	bne.n	8002222 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	4b35      	ldr	r3, [pc, #212]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	4a34      	ldr	r2, [pc, #208]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c6:	4b32      	ldr	r3, [pc, #200]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a2d      	ldr	r2, [pc, #180]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 80021dc:	f043 0310 	orr.w	r3, r3, #16
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80021ee:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002200:	2301      	movs	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	4619      	mov	r1, r3
 800220a:	4822      	ldr	r0, [pc, #136]	@ (8002294 <HAL_TIM_Encoder_MspInit+0x100>)
 800220c:	f001 f930 	bl	8003470 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	2019      	movs	r0, #25
 8002216:	f001 f8f4 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800221a:	2019      	movs	r0, #25
 800221c:	f001 f90d 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002220:	e030      	b.n	8002284 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222a:	d12b      	bne.n	8002284 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	4a16      	ldr	r2, [pc, #88]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6413      	str	r3, [r2, #64]	@ 0x40
 800223c:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	4a0f      	ldr	r2, [pc, #60]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6313      	str	r3, [r2, #48]	@ 0x30
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_TIM_Encoder_MspInit+0xfc>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002264:	2303      	movs	r3, #3
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002274:	2301      	movs	r3, #1
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	4806      	ldr	r0, [pc, #24]	@ (8002298 <HAL_TIM_Encoder_MspInit+0x104>)
 8002280:	f001 f8f6 	bl	8003470 <HAL_GPIO_Init>
}
 8002284:	bf00      	nop
 8002286:	3730      	adds	r7, #48	@ 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40010000 	.word	0x40010000
 8002290:	40023800 	.word	0x40023800
 8002294:	40021000 	.word	0x40021000
 8002298:	40020000 	.word	0x40020000

0800229c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	@ 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a3b      	ldr	r2, [pc, #236]	@ (80023a8 <HAL_TIM_Base_MspInit+0x10c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d10e      	bne.n	80022dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a39      	ldr	r2, [pc, #228]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b37      	ldr	r3, [pc, #220]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80022da:	e061      	b.n	80023a0 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a33      	ldr	r2, [pc, #204]	@ (80023b0 <HAL_TIM_Base_MspInit+0x114>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d135      	bne.n	8002352 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	4b30      	ldr	r3, [pc, #192]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	4a2f      	ldr	r2, [pc, #188]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 80022f0:	f043 0304 	orr.w	r3, r3, #4
 80022f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f6:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b29      	ldr	r3, [pc, #164]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	4a28      	ldr	r2, [pc, #160]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	6313      	str	r3, [r2, #48]	@ 0x30
 8002312:	4b26      	ldr	r3, [pc, #152]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800231e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002330:	2302      	movs	r3, #2
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	481e      	ldr	r0, [pc, #120]	@ (80023b4 <HAL_TIM_Base_MspInit+0x118>)
 800233c:	f001 f898 	bl	8003470 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	201e      	movs	r0, #30
 8002346:	f001 f85c 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800234a:	201e      	movs	r0, #30
 800234c:	f001 f875 	bl	800343a <HAL_NVIC_EnableIRQ>
}
 8002350:	e026      	b.n	80023a0 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM5)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <HAL_TIM_Base_MspInit+0x11c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d10e      	bne.n	800237a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6413      	str	r3, [r2, #64]	@ 0x40
 800236c:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	e012      	b.n	80023a0 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM8)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a0f      	ldr	r2, [pc, #60]	@ (80023bc <HAL_TIM_Base_MspInit+0x120>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d10d      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 800238a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238c:	4a07      	ldr	r2, [pc, #28]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	6453      	str	r3, [r2, #68]	@ 0x44
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_TIM_Base_MspInit+0x110>)
 8002396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
}
 80023a0:	bf00      	nop
 80023a2:	3730      	adds	r7, #48	@ 0x30
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40000800 	.word	0x40000800
 80023b4:	40020c00 	.word	0x40020c00
 80023b8:	40000c00 	.word	0x40000c00
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <HAL_TIM_MspPostInit+0x68>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d11d      	bne.n	800241e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_TIM_MspPostInit+0x6c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	@ (800242c <HAL_TIM_MspPostInit+0x6c>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_TIM_MspPostInit+0x6c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023fe:	23c0      	movs	r3, #192	@ 0xc0
 8002400:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800240e:	2302      	movs	r3, #2
 8002410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	@ (8002430 <HAL_TIM_MspPostInit+0x70>)
 800241a:	f001 f829 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40000400 	.word	0x40000400
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	@ 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a19      	ldr	r2, [pc, #100]	@ (80024b8 <HAL_UART_MspInit+0x84>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d12c      	bne.n	80024b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	4b18      	ldr	r3, [pc, #96]	@ (80024bc <HAL_UART_MspInit+0x88>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <HAL_UART_MspInit+0x88>)
 8002460:	f043 0310 	orr.w	r3, r3, #16
 8002464:	6453      	str	r3, [r2, #68]	@ 0x44
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_UART_MspInit+0x88>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_UART_MspInit+0x88>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	4a10      	ldr	r2, [pc, #64]	@ (80024bc <HAL_UART_MspInit+0x88>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	@ 0x30
 8002482:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <HAL_UART_MspInit+0x88>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800248e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024a0:	2307      	movs	r3, #7
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <HAL_UART_MspInit+0x8c>)
 80024ac:	f000 ffe0 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024b0:	bf00      	nop
 80024b2:	3728      	adds	r7, #40	@ 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000

080024c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <NMI_Handler+0x4>

080024cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <HardFault_Handler+0x4>

080024d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <MemManage_Handler+0x4>

080024dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <BusFault_Handler+0x4>

080024e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <UsageFault_Handler+0x4>

080024ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251a:	f000 faab 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}

08002522 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_Z_IDX_Pin);
 8002526:	2004      	movs	r0, #4
 8002528:	f001 f958 	bl	80037dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002534:	2008      	movs	r0, #8
 8002536:	f001 f951 	bl	80037dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002546:	f002 fb04 	bl	8004b52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000258 	.word	0x20000258

08002554 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <TIM4_IRQHandler+0x10>)
 800255a:	f002 fafa 	bl	8004b52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000330 	.word	0x20000330

08002568 <init>:
#include "config.h"

// Ignition system instance
IgnitionSystem ignition;

void init(void) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b094      	sub	sp, #80	@ 0x50
 800256c:	af00      	add	r7, sp, #0

	//   Initialize ignition system config
	IS_Config config = { .encoder_timer = &htim1, .input_capture_timer = &htim4,
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <init+0x30>)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	4611      	mov	r1, r2
 8002574:	224c      	movs	r2, #76	@ 0x4c
 8002576:	4618      	mov	r0, r3
 8002578:	f004 fd73 	bl	8007062 <memcpy>

			.ignition_angle = 237,//717,//237, // 240 - 3 advance// Ignition timing of cylinder 1(9 degree top death corner, 3 degree per pulse)

			.coil_dwell = 5 };
	// Initialize ignition system and start timers
	if (IS_Init(&ignition, &config) != IS_OK) {
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	4619      	mov	r1, r3
 8002580:	4806      	ldr	r0, [pc, #24]	@ (800259c <init+0x34>)
 8002582:	f7fe fe35 	bl	80011f0 <IS_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <init+0x28>
		Error_Handler();
 800258c:	f7ff fd58 	bl	8002040 <Error_Handler>
	}

}
 8002590:	bf00      	nop
 8002592:	3750      	adds	r7, #80	@ 0x50
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	08008dc8 	.word	0x08008dc8
 800259c:	20000450 	.word	0x20000450

080025a0 <loop>:
//
//}
IS_Status status1;
IS_Status status2;
IS_Status status3;
void loop(void) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0

	status1 = IS_UpdateRPM(&ignition);
 80025a4:	480b      	ldr	r0, [pc, #44]	@ (80025d4 <loop+0x34>)
 80025a6:	f7fe fe61 	bl	800126c <IS_UpdateRPM>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <loop+0x38>)
 80025b0:	701a      	strb	r2, [r3, #0]
	status2 = IS_CalculatePulseTime(&ignition);
 80025b2:	4808      	ldr	r0, [pc, #32]	@ (80025d4 <loop+0x34>)
 80025b4:	f7fe fec8 	bl	8001348 <IS_CalculatePulseTime>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <loop+0x3c>)
 80025be:	701a      	strb	r2, [r3, #0]
	status3 = IS_ControlCoil(&ignition);
 80025c0:	4804      	ldr	r0, [pc, #16]	@ (80025d4 <loop+0x34>)
 80025c2:	f7fe ff79 	bl	80014b8 <IS_ControlCoil>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <loop+0x40>)
 80025cc:	701a      	strb	r2, [r3, #0]
//	update_coil_delay();
//	IS_UART_Debug(&ignition); // Optional debug output
//	printf("hellooo \n");
//	HAL_Delay(100);

}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000450 	.word	0x20000450
 80025d8:	20000538 	.word	0x20000538
 80025dc:	20000539 	.word	0x20000539
 80025e0:	2000053a 	.word	0x2000053a

080025e4 <HAL_GPIO_EXTI_Callback>:


//uint8_t intcount=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
	//intcount++;
    IS_EXTI_Callback(&ignition, GPIO_Pin, GPIO_PIN_2); // Assuming EXTI on pin 2
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	2204      	movs	r2, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4803      	ldr	r0, [pc, #12]	@ (8002604 <HAL_GPIO_EXTI_Callback+0x20>)
 80025f6:	f7ff f8a5 	bl	8001744 <IS_EXTI_Callback>

}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000450 	.word	0x20000450

08002608 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <HAL_TIM_IC_CaptureCallback+0x20>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d102      	bne.n	8002620 <HAL_TIM_IC_CaptureCallback+0x18>
    {
        IS_TIM_IC_CaptureCallback(&ignition);
 800261a:	4804      	ldr	r0, [pc, #16]	@ (800262c <HAL_TIM_IC_CaptureCallback+0x24>)
 800261c:	f7ff f834 	bl	8001688 <IS_TIM_IC_CaptureCallback>
    }
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40000800 	.word	0x40000800
 800262c:	20000450 	.word	0x20000450

08002630 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d102      	bne.n	8002648 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        IS_TIM_PeriodElapsedCallback(&ignition);
 8002642:	4804      	ldr	r0, [pc, #16]	@ (8002654 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002644:	f7ff f868 	bl	8001718 <IS_TIM_PeriodElapsedCallback>
    }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40000800 	.word	0x40000800
 8002654:	20000450 	.word	0x20000450

08002658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return 1;
 800265c:	2301      	movs	r3, #1
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_kill>:

int _kill(int pid, int sig)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002672:	f004 fcc9 	bl	8007008 <__errno>
 8002676:	4603      	mov	r3, r0
 8002678:	2216      	movs	r2, #22
 800267a:	601a      	str	r2, [r3, #0]
  return -1;
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_exit>:

void _exit (int status)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ffe7 	bl	8002668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800269a:	bf00      	nop
 800269c:	e7fd      	b.n	800269a <_exit+0x12>

0800269e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e00a      	b.n	80026c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b0:	f7ff fcde 	bl	8002070 <__io_getchar>
 80026b4:	4601      	mov	r1, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	60ba      	str	r2, [r7, #8]
 80026bc:	b2ca      	uxtb	r2, r1
 80026be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dbf0      	blt.n	80026b0 <_read+0x12>
  }

  return len;
 80026ce:	687b      	ldr	r3, [r7, #4]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e009      	b.n	80026fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	60ba      	str	r2, [r7, #8]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fcaa 	bl	800204c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	dbf1      	blt.n	80026ea <_write+0x12>
  }
  return len;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_close>:

int _close(int file)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002738:	605a      	str	r2, [r3, #4]
  return 0;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_isatty>:

int _isatty(int file)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002750:	2301      	movs	r3, #1
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002780:	4a14      	ldr	r2, [pc, #80]	@ (80027d4 <_sbrk+0x5c>)
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <_sbrk+0x60>)
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <_sbrk+0x64>)
 8002796:	4a12      	ldr	r2, [pc, #72]	@ (80027e0 <_sbrk+0x68>)
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <_sbrk+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d207      	bcs.n	80027b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a8:	f004 fc2e 	bl	8007008 <__errno>
 80027ac:	4603      	mov	r3, r0
 80027ae:	220c      	movs	r2, #12
 80027b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	e009      	b.n	80027cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <_sbrk+0x64>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	4a05      	ldr	r2, [pc, #20]	@ (80027dc <_sbrk+0x64>)
 80027c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20020000 	.word	0x20020000
 80027d8:	00000400 	.word	0x00000400
 80027dc:	2000053c 	.word	0x2000053c
 80027e0:	20000690 	.word	0x20000690

080027e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <SystemInit+0x20>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ee:	4a05      	ldr	r2, [pc, #20]	@ (8002804 <SystemInit+0x20>)
 80027f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <Lookup_DwellTime>:
    {16.0f, 2.0},
    {18.0f, 1.2},
    {20.0f, 1.0}
};

uint32_t Lookup_DwellTime(float voltage) {
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage <= dwell_table[0].voltage)
 8002812:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8002816:	edd7 7a01 	vldr	s15, [r7, #4]
 800281a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	d804      	bhi.n	800282e <Lookup_DwellTime+0x26>
        return dwell_table[0].dwell_ms;
 8002824:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8002828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282c:	e069      	b.n	8002902 <Lookup_DwellTime+0xfa>

    if (voltage >= dwell_table[DWELL_TABLE_SIZE - 1].voltage)
 800282e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002832:	edd7 7a01 	vldr	s15, [r7, #4]
 8002836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283e:	db04      	blt.n	800284a <Lookup_DwellTime+0x42>
        return dwell_table[DWELL_TABLE_SIZE - 1].dwell_ms;
 8002840:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002848:	e05b      	b.n	8002902 <Lookup_DwellTime+0xfa>

    for (int i = 0; i < DWELL_TABLE_SIZE - 1; ++i) {
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	e051      	b.n	80028f4 <Lookup_DwellTime+0xec>
        float v1 = dwell_table[i].voltage;
 8002850:	4a30      	ldr	r2, [pc, #192]	@ (8002914 <Lookup_DwellTime+0x10c>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	61bb      	str	r3, [r7, #24]
        float v2 = dwell_table[i + 1].voltage;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	4a2c      	ldr	r2, [pc, #176]	@ (8002914 <Lookup_DwellTime+0x10c>)
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
        float d1 = dwell_table[i].dwell_ms;
 800286a:	4a2a      	ldr	r2, [pc, #168]	@ (8002914 <Lookup_DwellTime+0x10c>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	3304      	adds	r3, #4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	613b      	str	r3, [r7, #16]
        float d2 = dwell_table[i + 1].dwell_ms;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3301      	adds	r3, #1
 800287c:	4a25      	ldr	r2, [pc, #148]	@ (8002914 <Lookup_DwellTime+0x10c>)
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	3304      	adds	r3, #4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

        if (voltage >= v1 && voltage <= v2) {
 8002888:	ed97 7a01 	vldr	s14, [r7, #4]
 800288c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	db29      	blt.n	80028ee <Lookup_DwellTime+0xe6>
 800289a:	ed97 7a01 	vldr	s14, [r7, #4]
 800289e:	edd7 7a05 	vldr	s15, [r7, #20]
 80028a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028aa:	d820      	bhi.n	80028ee <Lookup_DwellTime+0xe6>
            float t = (voltage - v1) / (v2 - v1);
 80028ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80028b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80028b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80028bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80028c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c8:	edc7 7a02 	vstr	s15, [r7, #8]
            return d1 + t * (d2 - d1);
 80028cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80028d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ec:	e009      	b.n	8002902 <Lookup_DwellTime+0xfa>
    for (int i = 0; i < DWELL_TABLE_SIZE - 1; ++i) {
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	ddaa      	ble.n	8002850 <Lookup_DwellTime+0x48>
        }
    }
    return dwell_table[0].dwell_ms; // fallback
 80028fa:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 80028fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
}
 8002902:	ee17 3a90 	vmov	r3, s15
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	@ 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	08008e4c 	.word	0x08008e4c

08002918 <Read_BatteryVoltage>:

// ---------------- ADC Voltage Reader ----------------------
float Read_BatteryVoltage(ADC_HandleTypeDef *hadc) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f90b 	bl	8002b3c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 8002926:	f04f 31ff 	mov.w	r1, #4294967295
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f9d8 	bl	8002ce0 <HAL_ADC_PollForConversion>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d114      	bne.n	8002960 <Read_BatteryVoltage+0x48>
        uint32_t raw = HAL_ADC_GetValue(hadc);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa5d 	bl	8002df6 <HAL_ADC_GetValue>
 800293c:	60f8      	str	r0, [r7, #12]
        float voltage = ((float)raw / ADC_RESOLUTION) * VREF * VOLTAGE_DIVIDER_GAIN;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002948:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002970 <Read_BatteryVoltage+0x58>
 800294c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002950:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002974 <Read_BatteryVoltage+0x5c>
 8002954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002958:	edc7 7a02 	vstr	s15, [r7, #8]
        return voltage;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	e000      	b.n	8002962 <Read_BatteryVoltage+0x4a>
    }
    return -1.0f; // error fallback
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <Read_BatteryVoltage+0x60>)
}
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb0 0a67 	vmov.f32	s0, s15
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	457ff000 	.word	0x457ff000
 8002974:	40533333 	.word	0x40533333
 8002978:	bf800000 	.word	0xbf800000

0800297c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002980:	480d      	ldr	r0, [pc, #52]	@ (80029b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002982:	490e      	ldr	r1, [pc, #56]	@ (80029bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002984:	4a0e      	ldr	r2, [pc, #56]	@ (80029c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0b      	ldr	r2, [pc, #44]	@ (80029c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002998:	4c0b      	ldr	r4, [pc, #44]	@ (80029c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029a6:	f7ff ff1d 	bl	80027e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029aa:	f004 fb33 	bl	8007014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ae:	f7fe ff15 	bl	80017dc <main>
  bx  lr    
 80029b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80029c0:	08009214 	.word	0x08009214
  ldr r2, =_sbss
 80029c4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80029c8:	20000690 	.word	0x20000690

080029cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC_IRQHandler>
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a10 <HAL_Init+0x40>)
 80029da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <HAL_Init+0x40>)
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	@ (8002a10 <HAL_Init+0x40>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 fcf7 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	200f      	movs	r0, #15
 8002a00:	f000 f808 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7ff fb5a 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fd0f 	bl	8003456 <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f000 fcd7 	bl	8003402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	@ (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	2000000c 	.word	0x2000000c
 8002a70:	20000008 	.word	0x20000008

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	@ (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	2000000c 	.word	0x2000000c
 8002a98:	20000540 	.word	0x20000540

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000540 	.word	0x20000540

08002ab4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e033      	b.n	8002b32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fb1a 	bl	800210c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002afa:	f023 0302 	bic.w	r3, r3, #2
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 faa4 	bl	8003054 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b22:	e001      	b.n	8002b28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_Start+0x1a>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e0b2      	b.n	8002cbc <HAL_ADC_Start+0x180>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d018      	beq.n	8002b9e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b7c:	4b52      	ldr	r3, [pc, #328]	@ (8002cc8 <HAL_ADC_Start+0x18c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a52      	ldr	r2, [pc, #328]	@ (8002ccc <HAL_ADC_Start+0x190>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9a      	lsrs	r2, r3, #18
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f9      	bne.n	8002b92 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d17a      	bne.n	8002ca2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bd6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bea:	d106      	bne.n	8002bfa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf0:	f023 0206 	bic.w	r2, r3, #6
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bf8:	e002      	b.n	8002c00 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c08:	4b31      	ldr	r3, [pc, #196]	@ (8002cd0 <HAL_ADC_Start+0x194>)
 8002c0a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c14:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d12a      	bne.n	8002c78 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd4 <HAL_ADC_Start+0x198>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d015      	beq.n	8002c58 <HAL_ADC_Start+0x11c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a29      	ldr	r2, [pc, #164]	@ (8002cd8 <HAL_ADC_Start+0x19c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d105      	bne.n	8002c42 <HAL_ADC_Start+0x106>
 8002c36:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <HAL_ADC_Start+0x194>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a25      	ldr	r2, [pc, #148]	@ (8002cdc <HAL_ADC_Start+0x1a0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d136      	bne.n	8002cba <HAL_ADC_Start+0x17e>
 8002c4c:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <HAL_ADC_Start+0x194>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d130      	bne.n	8002cba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d129      	bne.n	8002cba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	e020      	b.n	8002cba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a15      	ldr	r2, [pc, #84]	@ (8002cd4 <HAL_ADC_Start+0x198>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d11b      	bne.n	8002cba <HAL_ADC_Start+0x17e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d114      	bne.n	8002cba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	e00b      	b.n	8002cba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f043 0210 	orr.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	20000004 	.word	0x20000004
 8002ccc:	431bde83 	.word	0x431bde83
 8002cd0:	40012300 	.word	0x40012300
 8002cd4:	40012000 	.word	0x40012000
 8002cd8:	40012100 	.word	0x40012100
 8002cdc:	40012200 	.word	0x40012200

08002ce0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cfc:	d113      	bne.n	8002d26 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d0c:	d10b      	bne.n	8002d26 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e063      	b.n	8002dee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d26:	f7ff feb9 	bl	8002a9c <HAL_GetTick>
 8002d2a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d2c:	e021      	b.n	8002d72 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d01d      	beq.n	8002d72 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <HAL_ADC_PollForConversion+0x6c>
 8002d3c:	f7ff feae 	bl	8002a9c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d212      	bcs.n	8002d72 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d00b      	beq.n	8002d72 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f043 0204 	orr.w	r2, r3, #4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e03d      	b.n	8002dee <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d1d6      	bne.n	8002d2e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0212 	mvn.w	r2, #18
 8002d88:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d123      	bne.n	8002dec <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11f      	bne.n	8002dec <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d111      	bne.n	8002dec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1c>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e105      	b.n	8003038 <HAL_ADC_ConfigChannel+0x228>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b09      	cmp	r3, #9
 8002e3a:	d925      	bls.n	8002e88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68d9      	ldr	r1, [r3, #12]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b1e      	subs	r3, #30
 8002e52:	2207      	movs	r2, #7
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	400a      	ands	r2, r1
 8002e60:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68d9      	ldr	r1, [r3, #12]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	4603      	mov	r3, r0
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4403      	add	r3, r0
 8002e7a:	3b1e      	subs	r3, #30
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	e022      	b.n	8002ece <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6919      	ldr	r1, [r3, #16]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6919      	ldr	r1, [r3, #16]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4403      	add	r3, r0
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b06      	cmp	r3, #6
 8002ed4:	d824      	bhi.n	8002f20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3b05      	subs	r3, #5
 8002ee8:	221f      	movs	r2, #31
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b05      	subs	r3, #5
 8002f12:	fa00 f203 	lsl.w	r2, r0, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f1e:	e04c      	b.n	8002fba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	d824      	bhi.n	8002f72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	3b23      	subs	r3, #35	@ 0x23
 8002f3a:	221f      	movs	r2, #31
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43da      	mvns	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	400a      	ands	r2, r1
 8002f48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	3b23      	subs	r3, #35	@ 0x23
 8002f64:	fa00 f203 	lsl.w	r2, r0, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f70:	e023      	b.n	8002fba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	3b41      	subs	r3, #65	@ 0x41
 8002f84:	221f      	movs	r2, #31
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	400a      	ands	r2, r1
 8002f92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	3b41      	subs	r3, #65	@ 0x41
 8002fae:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fba:	4b22      	ldr	r3, [pc, #136]	@ (8003044 <HAL_ADC_ConfigChannel+0x234>)
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a21      	ldr	r2, [pc, #132]	@ (8003048 <HAL_ADC_ConfigChannel+0x238>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d109      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x1cc>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b12      	cmp	r3, #18
 8002fce:	d105      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	@ (8003048 <HAL_ADC_ConfigChannel+0x238>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d123      	bne.n	800302e <HAL_ADC_ConfigChannel+0x21e>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d003      	beq.n	8002ff6 <HAL_ADC_ConfigChannel+0x1e6>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b11      	cmp	r3, #17
 8002ff4:	d11b      	bne.n	800302e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b10      	cmp	r3, #16
 8003008:	d111      	bne.n	800302e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <HAL_ADC_ConfigChannel+0x23c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a10      	ldr	r2, [pc, #64]	@ (8003050 <HAL_ADC_ConfigChannel+0x240>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	0c9a      	lsrs	r2, r3, #18
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003020:	e002      	b.n	8003028 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	3b01      	subs	r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f9      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	40012300 	.word	0x40012300
 8003048:	40012000 	.word	0x40012000
 800304c:	20000004 	.word	0x20000004
 8003050:	431bde83 	.word	0x431bde83

08003054 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800305c:	4b79      	ldr	r3, [pc, #484]	@ (8003244 <ADC_Init+0x1f0>)
 800305e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003088:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	021a      	lsls	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	4a58      	ldr	r2, [pc, #352]	@ (8003248 <ADC_Init+0x1f4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d022      	beq.n	8003132 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6899      	ldr	r1, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800311c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	e00f      	b.n	8003152 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003150:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0202 	bic.w	r2, r2, #2
 8003160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7e1b      	ldrb	r3, [r3, #24]
 800316c:	005a      	lsls	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01b      	beq.n	80031b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800318e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800319e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	3b01      	subs	r3, #1
 80031ac:	035a      	lsls	r2, r3, #13
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	e007      	b.n	80031c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	051a      	lsls	r2, r3, #20
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6899      	ldr	r1, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800320a:	025a      	lsls	r2, r3, #9
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6899      	ldr	r1, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	029a      	lsls	r2, r3, #10
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40012300 	.word	0x40012300
 8003248:	0f000001 	.word	0x0f000001

0800324c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <__NVIC_GetPriorityGrouping+0x18>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 0307 	and.w	r3, r3, #7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db0b      	blt.n	80032da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	4907      	ldr	r1, [pc, #28]	@ (80032e8 <__NVIC_EnableIRQ+0x38>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	@ (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	@ (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	@ 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	@ 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033b8:	d301      	bcc.n	80033be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00f      	b.n	80033de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033be:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <SysTick_Config+0x40>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c6:	210f      	movs	r1, #15
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f7ff ff8e 	bl	80032ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d0:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <SysTick_Config+0x40>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d6:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <SysTick_Config+0x40>)
 80033d8:	2207      	movs	r2, #7
 80033da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	e000e010 	.word	0xe000e010

080033ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff29 	bl	800324c <__NVIC_SetPriorityGrouping>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003414:	f7ff ff3e 	bl	8003294 <__NVIC_GetPriorityGrouping>
 8003418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f7ff ff8e 	bl	8003340 <NVIC_EncodePriority>
 8003424:	4602      	mov	r2, r0
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff5d 	bl	80032ec <__NVIC_SetPriority>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff31 	bl	80032b0 <__NVIC_EnableIRQ>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ffa2 	bl	80033a8 <SysTick_Config>
 8003464:	4603      	mov	r3, r0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	@ 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e16b      	b.n	8003764 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800348c:	2201      	movs	r2, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	f040 815a 	bne.w	800375e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d005      	beq.n	80034c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d130      	bne.n	8003524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	2203      	movs	r2, #3
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f8:	2201      	movs	r2, #1
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 0201 	and.w	r2, r3, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b03      	cmp	r3, #3
 800352e:	d017      	beq.n	8003560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d123      	bne.n	80035b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	08da      	lsrs	r2, r3, #3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3208      	adds	r2, #8
 8003574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	220f      	movs	r2, #15
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	08da      	lsrs	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3208      	adds	r2, #8
 80035ae:	69b9      	ldr	r1, [r7, #24]
 80035b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0203 	and.w	r2, r3, #3
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80b4 	beq.w	800375e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b60      	ldr	r3, [pc, #384]	@ (800377c <HAL_GPIO_Init+0x30c>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	4a5f      	ldr	r2, [pc, #380]	@ (800377c <HAL_GPIO_Init+0x30c>)
 8003600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003604:	6453      	str	r3, [r2, #68]	@ 0x44
 8003606:	4b5d      	ldr	r3, [pc, #372]	@ (800377c <HAL_GPIO_Init+0x30c>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003612:	4a5b      	ldr	r2, [pc, #364]	@ (8003780 <HAL_GPIO_Init+0x310>)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	3302      	adds	r3, #2
 800361a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a52      	ldr	r2, [pc, #328]	@ (8003784 <HAL_GPIO_Init+0x314>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d02b      	beq.n	8003696 <HAL_GPIO_Init+0x226>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a51      	ldr	r2, [pc, #324]	@ (8003788 <HAL_GPIO_Init+0x318>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d025      	beq.n	8003692 <HAL_GPIO_Init+0x222>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a50      	ldr	r2, [pc, #320]	@ (800378c <HAL_GPIO_Init+0x31c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01f      	beq.n	800368e <HAL_GPIO_Init+0x21e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4f      	ldr	r2, [pc, #316]	@ (8003790 <HAL_GPIO_Init+0x320>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d019      	beq.n	800368a <HAL_GPIO_Init+0x21a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a4e      	ldr	r2, [pc, #312]	@ (8003794 <HAL_GPIO_Init+0x324>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_GPIO_Init+0x216>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4d      	ldr	r2, [pc, #308]	@ (8003798 <HAL_GPIO_Init+0x328>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00d      	beq.n	8003682 <HAL_GPIO_Init+0x212>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4c      	ldr	r2, [pc, #304]	@ (800379c <HAL_GPIO_Init+0x32c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <HAL_GPIO_Init+0x20e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4b      	ldr	r2, [pc, #300]	@ (80037a0 <HAL_GPIO_Init+0x330>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_GPIO_Init+0x20a>
 8003676:	2307      	movs	r3, #7
 8003678:	e00e      	b.n	8003698 <HAL_GPIO_Init+0x228>
 800367a:	2308      	movs	r3, #8
 800367c:	e00c      	b.n	8003698 <HAL_GPIO_Init+0x228>
 800367e:	2306      	movs	r3, #6
 8003680:	e00a      	b.n	8003698 <HAL_GPIO_Init+0x228>
 8003682:	2305      	movs	r3, #5
 8003684:	e008      	b.n	8003698 <HAL_GPIO_Init+0x228>
 8003686:	2304      	movs	r3, #4
 8003688:	e006      	b.n	8003698 <HAL_GPIO_Init+0x228>
 800368a:	2303      	movs	r3, #3
 800368c:	e004      	b.n	8003698 <HAL_GPIO_Init+0x228>
 800368e:	2302      	movs	r3, #2
 8003690:	e002      	b.n	8003698 <HAL_GPIO_Init+0x228>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_GPIO_Init+0x228>
 8003696:	2300      	movs	r3, #0
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	f002 0203 	and.w	r2, r2, #3
 800369e:	0092      	lsls	r2, r2, #2
 80036a0:	4093      	lsls	r3, r2
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a8:	4935      	ldr	r1, [pc, #212]	@ (8003780 <HAL_GPIO_Init+0x310>)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	3302      	adds	r3, #2
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b6:	4b3b      	ldr	r3, [pc, #236]	@ (80037a4 <HAL_GPIO_Init+0x334>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036da:	4a32      	ldr	r2, [pc, #200]	@ (80037a4 <HAL_GPIO_Init+0x334>)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e0:	4b30      	ldr	r3, [pc, #192]	@ (80037a4 <HAL_GPIO_Init+0x334>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003704:	4a27      	ldr	r2, [pc, #156]	@ (80037a4 <HAL_GPIO_Init+0x334>)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800370a:	4b26      	ldr	r3, [pc, #152]	@ (80037a4 <HAL_GPIO_Init+0x334>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800372e:	4a1d      	ldr	r2, [pc, #116]	@ (80037a4 <HAL_GPIO_Init+0x334>)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003734:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <HAL_GPIO_Init+0x334>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003758:	4a12      	ldr	r2, [pc, #72]	@ (80037a4 <HAL_GPIO_Init+0x334>)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3301      	adds	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b0f      	cmp	r3, #15
 8003768:	f67f ae90 	bls.w	800348c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	3724      	adds	r7, #36	@ 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	40013800 	.word	0x40013800
 8003784:	40020000 	.word	0x40020000
 8003788:	40020400 	.word	0x40020400
 800378c:	40020800 	.word	0x40020800
 8003790:	40020c00 	.word	0x40020c00
 8003794:	40021000 	.word	0x40021000
 8003798:	40021400 	.word	0x40021400
 800379c:	40021800 	.word	0x40021800
 80037a0:	40021c00 	.word	0x40021c00
 80037a4:	40013c00 	.word	0x40013c00

080037a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
 80037b4:	4613      	mov	r3, r2
 80037b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b8:	787b      	ldrb	r3, [r7, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c4:	e003      	b.n	80037ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c6:	887b      	ldrh	r3, [r7, #2]
 80037c8:	041a      	lsls	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	619a      	str	r2, [r3, #24]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037e6:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037f2:	4a05      	ldr	r2, [pc, #20]	@ (8003808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fef2 	bl	80025e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40013c00 	.word	0x40013c00

0800380c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e267      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d075      	beq.n	8003916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800382a:	4b88      	ldr	r3, [pc, #544]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b04      	cmp	r3, #4
 8003834:	d00c      	beq.n	8003850 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003836:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800383e:	2b08      	cmp	r3, #8
 8003840:	d112      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003842:	4b82      	ldr	r3, [pc, #520]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800384e:	d10b      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	4b7e      	ldr	r3, [pc, #504]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05b      	beq.n	8003914 <HAL_RCC_OscConfig+0x108>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d157      	bne.n	8003914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e242      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003870:	d106      	bne.n	8003880 <HAL_RCC_OscConfig+0x74>
 8003872:	4b76      	ldr	r3, [pc, #472]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01d      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x98>
 800388a:	4b70      	ldr	r3, [pc, #448]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6f      	ldr	r2, [pc, #444]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b6d      	ldr	r3, [pc, #436]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a6c      	ldr	r2, [pc, #432]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 80038a4:	4b69      	ldr	r3, [pc, #420]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a68      	ldr	r2, [pc, #416]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b66      	ldr	r3, [pc, #408]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a65      	ldr	r2, [pc, #404]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7ff f8ea 	bl	8002a9c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038cc:	f7ff f8e6 	bl	8002a9c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	@ 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e207      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b5b      	ldr	r3, [pc, #364]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0xc0>
 80038ea:	e014      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7ff f8d6 	bl	8002a9c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7ff f8d2 	bl	8002a9c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	@ 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1f3      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b51      	ldr	r3, [pc, #324]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0xe8>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003922:	4b4a      	ldr	r3, [pc, #296]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b47      	ldr	r3, [pc, #284]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393a:	4b44      	ldr	r3, [pc, #272]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b41      	ldr	r3, [pc, #260]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1c7      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4937      	ldr	r1, [pc, #220]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e03a      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <HAL_RCC_OscConfig+0x244>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7ff f88b 	bl	8002a9c <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398a:	f7ff f887 	bl	8002a9c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1a8      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b28      	ldr	r3, [pc, #160]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4925      	ldr	r1, [pc, #148]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039be:	4b24      	ldr	r3, [pc, #144]	@ (8003a50 <HAL_RCC_OscConfig+0x244>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7ff f86a 	bl	8002a9c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039cc:	f7ff f866 	bl	8002a9c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e187      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d036      	beq.n	8003a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b15      	ldr	r3, [pc, #84]	@ (8003a54 <HAL_RCC_OscConfig+0x248>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7ff f84a 	bl	8002a9c <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7ff f846 	bl	8002a9c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e167      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x200>
 8003a2a:	e01b      	b.n	8003a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2c:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <HAL_RCC_OscConfig+0x248>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7ff f833 	bl	8002a9c <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e00e      	b.n	8003a58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7ff f82f 	bl	8002a9c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d907      	bls.n	8003a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e150      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	42470000 	.word	0x42470000
 8003a54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ea      	bne.n	8003a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8097 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b81      	ldr	r3, [pc, #516]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b7d      	ldr	r3, [pc, #500]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b7a      	ldr	r3, [pc, #488]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b77      	ldr	r3, [pc, #476]	@ (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b74      	ldr	r3, [pc, #464]	@ (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a73      	ldr	r2, [pc, #460]	@ (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fe ffef 	bl	8002a9c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fe ffeb 	bl	8002a9c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e10c      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2ea>
 8003ae8:	4b64      	ldr	r3, [pc, #400]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	4a63      	ldr	r2, [pc, #396]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af4:	e01c      	b.n	8003b30 <HAL_RCC_OscConfig+0x324>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x30c>
 8003afe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	4a5e      	ldr	r2, [pc, #376]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x324>
 8003b18:	4b58      	ldr	r3, [pc, #352]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1c:	4a57      	ldr	r2, [pc, #348]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b24:	4b55      	ldr	r3, [pc, #340]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	4a54      	ldr	r2, [pc, #336]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fe ffb0 	bl	8002a9c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fe ffac 	bl	8002a9c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0cb      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	4b49      	ldr	r3, [pc, #292]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ee      	beq.n	8003b40 <HAL_RCC_OscConfig+0x334>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fe ff9a 	bl	8002a9c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fe ff96 	bl	8002a9c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0b5      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	4b3e      	ldr	r3, [pc, #248]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b39      	ldr	r3, [pc, #228]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	4a38      	ldr	r2, [pc, #224]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80a1 	beq.w	8003cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003baa:	4b34      	ldr	r3, [pc, #208]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d05c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d141      	bne.n	8003c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b31      	ldr	r3, [pc, #196]	@ (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe ff6a 	bl	8002a9c <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe ff66 	bl	8002a9c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e087      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	3b01      	subs	r3, #1
 8003c04:	041b      	lsls	r3, r3, #16
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	491b      	ldr	r1, [pc, #108]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b1b      	ldr	r3, [pc, #108]	@ (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe ff3f 	bl	8002a9c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fe ff3b 	bl	8002a9c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e05c      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x416>
 8003c40:	e054      	b.n	8003cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fe ff28 	bl	8002a9c <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe ff24 	bl	8002a9c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e045      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x444>
 8003c6e:	e03d      	b.n	8003cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e038      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c88:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <HAL_RCC_OscConfig+0x4ec>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d028      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d121      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d11a      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d111      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d107      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800

08003cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0cc      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d10:	4b68      	ldr	r3, [pc, #416]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d90c      	bls.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b65      	ldr	r3, [pc, #404]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b63      	ldr	r3, [pc, #396]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0b8      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d50:	4b59      	ldr	r3, [pc, #356]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a58      	ldr	r2, [pc, #352]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d68:	4b53      	ldr	r3, [pc, #332]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a52      	ldr	r2, [pc, #328]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b50      	ldr	r3, [pc, #320]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	494d      	ldr	r1, [pc, #308]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d044      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	4b47      	ldr	r3, [pc, #284]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d119      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e07f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dca:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e067      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b37      	ldr	r3, [pc, #220]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4934      	ldr	r1, [pc, #208]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dec:	f7fe fe56 	bl	8002a9c <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fe fe52 	bl	8002a9c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e04f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d20c      	bcs.n	8003e44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b22      	ldr	r3, [pc, #136]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e032      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e50:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4916      	ldr	r1, [pc, #88]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6e:	4b12      	ldr	r3, [pc, #72]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	490e      	ldr	r1, [pc, #56]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e82:	f000 f821 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e86:	4602      	mov	r2, r0
 8003e88:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	490a      	ldr	r1, [pc, #40]	@ (8003ebc <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	5ccb      	ldrb	r3, [r1, r3]
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fdb6 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023c00 	.word	0x40023c00
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	08008e34 	.word	0x08008e34
 8003ec0:	20000004 	.word	0x20000004
 8003ec4:	20000008 	.word	0x20000008

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ecc:	b094      	sub	sp, #80	@ 0x50
 8003ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee0:	4b79      	ldr	r3, [pc, #484]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d00d      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x40>
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	f200 80e1 	bhi.w	80040b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x34>
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003efa:	e0db      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b73      	ldr	r3, [pc, #460]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x204>)
 8003efe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f00:	e0db      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f02:	4b73      	ldr	r3, [pc, #460]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f06:	e0d8      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f08:	4b6f      	ldr	r3, [pc, #444]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f12:	4b6d      	ldr	r3, [pc, #436]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d063      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	2200      	movs	r2, #0
 8003f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f32:	2300      	movs	r3, #0
 8003f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	0159      	lsls	r1, r3, #5
 8003f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4c:	0150      	lsls	r0, r2, #5
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4621      	mov	r1, r4
 8003f54:	1a51      	subs	r1, r2, r1
 8003f56:	6139      	str	r1, [r7, #16]
 8003f58:	4629      	mov	r1, r5
 8003f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	018b      	lsls	r3, r1, #6
 8003f70:	4651      	mov	r1, sl
 8003f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f76:	4651      	mov	r1, sl
 8003f78:	018a      	lsls	r2, r1, #6
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f80:	4659      	mov	r1, fp
 8003f82:	eb63 0901 	sbc.w	r9, r3, r1
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9a:	4690      	mov	r8, r2
 8003f9c:	4699      	mov	r9, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	eb18 0303 	adds.w	r3, r8, r3
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	462b      	mov	r3, r5
 8003fa8:	eb49 0303 	adc.w	r3, r9, r3
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	024b      	lsls	r3, r1, #9
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	024a      	lsls	r2, r1, #9
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fce:	2200      	movs	r2, #0
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fd8:	f7fc fe36 	bl	8000c48 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe4:	e058      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe6:	4b38      	ldr	r3, [pc, #224]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	099b      	lsrs	r3, r3, #6
 8003fec:	2200      	movs	r2, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ff6:	623b      	str	r3, [r7, #32]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	0159      	lsls	r1, r3, #5
 800400e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004012:	0150      	lsls	r0, r2, #5
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4641      	mov	r1, r8
 800401a:	ebb2 0a01 	subs.w	sl, r2, r1
 800401e:	4649      	mov	r1, r9
 8004020:	eb63 0b01 	sbc.w	fp, r3, r1
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004030:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004034:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004038:	ebb2 040a 	subs.w	r4, r2, sl
 800403c:	eb63 050b 	sbc.w	r5, r3, fp
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	00eb      	lsls	r3, r5, #3
 800404a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404e:	00e2      	lsls	r2, r4, #3
 8004050:	4614      	mov	r4, r2
 8004052:	461d      	mov	r5, r3
 8004054:	4643      	mov	r3, r8
 8004056:	18e3      	adds	r3, r4, r3
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	464b      	mov	r3, r9
 800405c:	eb45 0303 	adc.w	r3, r5, r3
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800406e:	4629      	mov	r1, r5
 8004070:	028b      	lsls	r3, r1, #10
 8004072:	4621      	mov	r1, r4
 8004074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004078:	4621      	mov	r1, r4
 800407a:	028a      	lsls	r2, r1, #10
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004082:	2200      	movs	r2, #0
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	61fa      	str	r2, [r7, #28]
 8004088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408c:	f7fc fddc 	bl	8000c48 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4613      	mov	r3, r2
 8004096:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004098:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040b2:	e002      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x204>)
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3750      	adds	r7, #80	@ 0x50
 80040c0:	46bd      	mov	sp, r7
 80040c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	00f42400 	.word	0x00f42400
 80040d0:	007a1200 	.word	0x007a1200

080040d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d8:	4b03      	ldr	r3, [pc, #12]	@ (80040e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040da:	681b      	ldr	r3, [r3, #0]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000004 	.word	0x20000004

080040ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040f0:	f7ff fff0 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	0a9b      	lsrs	r3, r3, #10
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	4903      	ldr	r1, [pc, #12]	@ (8004110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	08008e44 	.word	0x08008e44

08004114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004118:	f7ff ffdc 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0b5b      	lsrs	r3, r3, #13
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4903      	ldr	r1, [pc, #12]	@ (8004138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	08008e44 	.word	0x08008e44

0800413c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e041      	b.n	80041d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fe f89a 	bl	800229c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f001 f81e 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e046      	b.n	8004282 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a23      	ldr	r2, [pc, #140]	@ (8004290 <HAL_TIM_Base_Start+0xb4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d022      	beq.n	800424c <HAL_TIM_Base_Start+0x70>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420e:	d01d      	beq.n	800424c <HAL_TIM_Base_Start+0x70>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1f      	ldr	r2, [pc, #124]	@ (8004294 <HAL_TIM_Base_Start+0xb8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d018      	beq.n	800424c <HAL_TIM_Base_Start+0x70>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1e      	ldr	r2, [pc, #120]	@ (8004298 <HAL_TIM_Base_Start+0xbc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <HAL_TIM_Base_Start+0x70>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1c      	ldr	r2, [pc, #112]	@ (800429c <HAL_TIM_Base_Start+0xc0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_TIM_Base_Start+0x70>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1b      	ldr	r2, [pc, #108]	@ (80042a0 <HAL_TIM_Base_Start+0xc4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_TIM_Base_Start+0x70>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a19      	ldr	r2, [pc, #100]	@ (80042a4 <HAL_TIM_Base_Start+0xc8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIM_Base_Start+0x70>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <HAL_TIM_Base_Start+0xcc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d111      	bne.n	8004270 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b06      	cmp	r3, #6
 800425c:	d010      	beq.n	8004280 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426e:	e007      	b.n	8004280 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40010400 	.word	0x40010400
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40001800 	.word	0x40001800

080042ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d001      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e04e      	b.n	8004362 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a23      	ldr	r2, [pc, #140]	@ (8004370 <HAL_TIM_Base_Start_IT+0xc4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x80>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ee:	d01d      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x80>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004374 <HAL_TIM_Base_Start_IT+0xc8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x80>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004378 <HAL_TIM_Base_Start_IT+0xcc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x80>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <HAL_TIM_Base_Start_IT+0xd0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x80>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1b      	ldr	r2, [pc, #108]	@ (8004380 <HAL_TIM_Base_Start_IT+0xd4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x80>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <HAL_TIM_Base_Start_IT+0xd8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x80>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	@ (8004388 <HAL_TIM_Base_Start_IT+0xdc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d111      	bne.n	8004350 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b06      	cmp	r3, #6
 800433c:	d010      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	e007      	b.n	8004360 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40010400 	.word	0x40010400
 8004384:	40014000 	.word	0x40014000
 8004388:	40001800 	.word	0x40001800

0800438c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e041      	b.n	8004422 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f839 	bl	800442a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 fef6 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e041      	b.n	80044d4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f839 	bl	80044dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f000 fe9d 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start_IT+0x1e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800450a:	b2db      	uxtb	r3, r3
 800450c:	e013      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x46>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d104      	bne.n	800451e <HAL_TIM_IC_Start_IT+0x2e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e00b      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x46>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d104      	bne.n	800452e <HAL_TIM_IC_Start_IT+0x3e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e003      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x46>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004534:	b2db      	uxtb	r3, r3
 8004536:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <HAL_TIM_IC_Start_IT+0x58>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e013      	b.n	8004570 <HAL_TIM_IC_Start_IT+0x80>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b04      	cmp	r3, #4
 800454c:	d104      	bne.n	8004558 <HAL_TIM_IC_Start_IT+0x68>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e00b      	b.n	8004570 <HAL_TIM_IC_Start_IT+0x80>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b08      	cmp	r3, #8
 800455c:	d104      	bne.n	8004568 <HAL_TIM_IC_Start_IT+0x78>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004564:	b2db      	uxtb	r3, r3
 8004566:	e003      	b.n	8004570 <HAL_TIM_IC_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800456e:	b2db      	uxtb	r3, r3
 8004570:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004572:	7bbb      	ldrb	r3, [r7, #14]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d102      	bne.n	800457e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004578:	7b7b      	ldrb	r3, [r7, #13]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d001      	beq.n	8004582 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0cc      	b.n	800471c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <HAL_TIM_IC_Start_IT+0xa2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004590:	e013      	b.n	80045ba <HAL_TIM_IC_Start_IT+0xca>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_IC_Start_IT+0xb2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a0:	e00b      	b.n	80045ba <HAL_TIM_IC_Start_IT+0xca>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_IC_Start_IT+0xc2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b0:	e003      	b.n	80045ba <HAL_TIM_IC_Start_IT+0xca>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <HAL_TIM_IC_Start_IT+0xda>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c8:	e013      	b.n	80045f2 <HAL_TIM_IC_Start_IT+0x102>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d104      	bne.n	80045da <HAL_TIM_IC_Start_IT+0xea>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045d8:	e00b      	b.n	80045f2 <HAL_TIM_IC_Start_IT+0x102>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d104      	bne.n	80045ea <HAL_TIM_IC_Start_IT+0xfa>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e8:	e003      	b.n	80045f2 <HAL_TIM_IC_Start_IT+0x102>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b0c      	cmp	r3, #12
 80045f6:	d841      	bhi.n	800467c <HAL_TIM_IC_Start_IT+0x18c>
 80045f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <HAL_TIM_IC_Start_IT+0x110>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004635 	.word	0x08004635
 8004604:	0800467d 	.word	0x0800467d
 8004608:	0800467d 	.word	0x0800467d
 800460c:	0800467d 	.word	0x0800467d
 8004610:	08004647 	.word	0x08004647
 8004614:	0800467d 	.word	0x0800467d
 8004618:	0800467d 	.word	0x0800467d
 800461c:	0800467d 	.word	0x0800467d
 8004620:	08004659 	.word	0x08004659
 8004624:	0800467d 	.word	0x0800467d
 8004628:	0800467d 	.word	0x0800467d
 800462c:	0800467d 	.word	0x0800467d
 8004630:	0800466b 	.word	0x0800466b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0202 	orr.w	r2, r2, #2
 8004642:	60da      	str	r2, [r3, #12]
      break;
 8004644:	e01d      	b.n	8004682 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0204 	orr.w	r2, r2, #4
 8004654:	60da      	str	r2, [r3, #12]
      break;
 8004656:	e014      	b.n	8004682 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0208 	orr.w	r2, r2, #8
 8004666:	60da      	str	r2, [r3, #12]
      break;
 8004668:	e00b      	b.n	8004682 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0210 	orr.w	r2, r2, #16
 8004678:	60da      	str	r2, [r3, #12]
      break;
 800467a:	e002      	b.n	8004682 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      break;
 8004680:	bf00      	nop
  }

  if (status == HAL_OK)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d148      	bne.n	800471a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2201      	movs	r2, #1
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f001 f9b3 	bl	80059fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a22      	ldr	r2, [pc, #136]	@ (8004724 <HAL_TIM_IC_Start_IT+0x234>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a8:	d01d      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004728 <HAL_TIM_IC_Start_IT+0x238>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1c      	ldr	r2, [pc, #112]	@ (800472c <HAL_TIM_IC_Start_IT+0x23c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <HAL_TIM_IC_Start_IT+0x240>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a19      	ldr	r2, [pc, #100]	@ (8004734 <HAL_TIM_IC_Start_IT+0x244>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a18      	ldr	r2, [pc, #96]	@ (8004738 <HAL_TIM_IC_Start_IT+0x248>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a16      	ldr	r2, [pc, #88]	@ (800473c <HAL_TIM_IC_Start_IT+0x24c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d111      	bne.n	800470a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b06      	cmp	r3, #6
 80046f6:	d010      	beq.n	800471a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	e007      	b.n	800471a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40010000 	.word	0x40010000
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40000c00 	.word	0x40000c00
 8004734:	40010400 	.word	0x40010400
 8004738:	40014000 	.word	0x40014000
 800473c:	40001800 	.word	0x40001800

08004740 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e097      	b.n	8004884 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7fd fd13 	bl	8002194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004784:	f023 0307 	bic.w	r3, r3, #7
 8004788:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f000 fd11 	bl	80051bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	4313      	orrs	r3, r2
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80047e0:	f023 030c 	bic.w	r3, r3, #12
 80047e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	4313      	orrs	r3, r2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	011a      	lsls	r2, r3, #4
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	031b      	lsls	r3, r3, #12
 8004810:	4313      	orrs	r3, r2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800481e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004826:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	4313      	orrs	r3, r2
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800489c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d110      	bne.n	80048de <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d102      	bne.n	80048c8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048c2:	7b7b      	ldrb	r3, [r7, #13]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d001      	beq.n	80048cc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e089      	b.n	80049e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048dc:	e031      	b.n	8004942 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d110      	bne.n	8004906 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d102      	bne.n	80048f0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048ea:	7b3b      	ldrb	r3, [r7, #12]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d001      	beq.n	80048f4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e075      	b.n	80049e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004904:	e01d      	b.n	8004942 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d108      	bne.n	800491e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800490c:	7bbb      	ldrb	r3, [r7, #14]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d105      	bne.n	800491e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004912:	7b7b      	ldrb	r3, [r7, #13]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d102      	bne.n	800491e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004918:	7b3b      	ldrb	r3, [r7, #12]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d001      	beq.n	8004922 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e05e      	b.n	80049e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2202      	movs	r2, #2
 8004936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b04      	cmp	r3, #4
 800494c:	d010      	beq.n	8004970 <HAL_TIM_Encoder_Start_IT+0xe4>
 800494e:	e01f      	b.n	8004990 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2201      	movs	r2, #1
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f001 f84f 	bl	80059fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0202 	orr.w	r2, r2, #2
 800496c:	60da      	str	r2, [r3, #12]
      break;
 800496e:	e02e      	b.n	80049ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2201      	movs	r2, #1
 8004976:	2104      	movs	r1, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f001 f83f 	bl	80059fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0204 	orr.w	r2, r2, #4
 800498c:	60da      	str	r2, [r3, #12]
      break;
 800498e:	e01e      	b.n	80049ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2201      	movs	r2, #1
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f001 f82f 	bl	80059fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2201      	movs	r2, #1
 80049a4:	2104      	movs	r1, #4
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 f828 	bl	80059fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0202 	orr.w	r2, r2, #2
 80049ba:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0204 	orr.w	r2, r2, #4
 80049ca:	60da      	str	r2, [r3, #12]
      break;
 80049cc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fffb 	bl	80059fc <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0202 	bic.w	r2, r2, #2
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	e030      	b.n	8004a7a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d10f      	bne.n	8004a3e <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2200      	movs	r2, #0
 8004a24:	2104      	movs	r1, #4
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 ffe8 	bl	80059fc <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0204 	bic.w	r2, r2, #4
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	e01d      	b.n	8004a7a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 ffd8 	bl	80059fc <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2200      	movs	r2, #0
 8004a52:	2104      	movs	r1, #4
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 ffd1 	bl	80059fc <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0202 	bic.w	r2, r2, #2
 8004a68:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0204 	bic.w	r2, r2, #4
 8004a78:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <HAL_TIM_Encoder_Stop_IT+0xc2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d107      	bne.n	8004aaa <HAL_TIM_Encoder_Stop_IT+0xc2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_TIM_Encoder_Stop_IT+0xce>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d138      	bne.n	8004b28 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_Encoder_Stop_IT+0xde>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ac4:	e013      	b.n	8004aee <HAL_TIM_Encoder_Stop_IT+0x106>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_Encoder_Stop_IT+0xee>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ad4:	e00b      	b.n	8004aee <HAL_TIM_Encoder_Stop_IT+0x106>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae4:	e003      	b.n	8004aee <HAL_TIM_Encoder_Stop_IT+0x106>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_Encoder_Stop_IT+0x116>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004afc:	e024      	b.n	8004b48 <HAL_TIM_Encoder_Stop_IT+0x160>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d104      	bne.n	8004b0e <HAL_TIM_Encoder_Stop_IT+0x126>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b0c:	e01c      	b.n	8004b48 <HAL_TIM_Encoder_Stop_IT+0x160>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d104      	bne.n	8004b1e <HAL_TIM_Encoder_Stop_IT+0x136>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b1c:	e014      	b.n	8004b48 <HAL_TIM_Encoder_Stop_IT+0x160>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b26:	e00f      	b.n	8004b48 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d020      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01b      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f06f 0202 	mvn.w	r2, #2
 8004b86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fd fd33 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8004ba2:	e005      	b.n	8004bb0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 faea 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 faf1 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01b      	beq.n	8004c02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0204 	mvn.w	r2, #4
 8004bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fd fd0d 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8004bee:	e005      	b.n	8004bfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fac4 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 facb 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d01b      	beq.n	8004c4e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f06f 0208 	mvn.w	r2, #8
 8004c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2204      	movs	r2, #4
 8004c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fd fce7 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8004c3a:	e005      	b.n	8004c48 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fa9e 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 faa5 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01b      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f06f 0210 	mvn.w	r2, #16
 8004c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2208      	movs	r2, #8
 8004c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fd fcc1 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 8004c86:	e005      	b.n	8004c94 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fa78 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa7f 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00c      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0201 	mvn.w	r2, #1
 8004cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fd fcb9 	bl	8002630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 ff39 	bl	8005b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00c      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa50 	bl	80051a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00c      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 0220 	mvn.w	r2, #32
 8004d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 ff0b 	bl	8005b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e088      	b.n	8004e62 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d11b      	bne.n	8004d96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004d6e:	f000 fc81 	bl	8005674 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 020c 	bic.w	r2, r2, #12
 8004d80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6999      	ldr	r1, [r3, #24]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	619a      	str	r2, [r3, #24]
 8004d94:	e060      	b.n	8004e58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d11c      	bne.n	8004dd6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004dac:	f000 fd05 	bl	80057ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004dbe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6999      	ldr	r1, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	021a      	lsls	r2, r3, #8
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	619a      	str	r2, [r3, #24]
 8004dd4:	e040      	b.n	8004e58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004dec:	f000 fd52 	bl	8005894 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 020c 	bic.w	r2, r2, #12
 8004dfe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69d9      	ldr	r1, [r3, #28]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	61da      	str	r2, [r3, #28]
 8004e12:	e021      	b.n	8004e58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b0c      	cmp	r3, #12
 8004e18:	d11c      	bne.n	8004e54 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004e2a:	f000 fd6f 	bl	800590c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004e3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69d9      	ldr	r1, [r3, #28]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	021a      	lsls	r2, r3, #8
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	61da      	str	r2, [r3, #28]
 8004e52:	e001      	b.n	8004e58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0ae      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	f200 809f 	bhi.w	8004fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004fd9 	.word	0x08004fd9
 8004ea8:	08004fd9 	.word	0x08004fd9
 8004eac:	08004fd9 	.word	0x08004fd9
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004fd9 	.word	0x08004fd9
 8004eb8:	08004fd9 	.word	0x08004fd9
 8004ebc:	08004fd9 	.word	0x08004fd9
 8004ec0:	08004f57 	.word	0x08004f57
 8004ec4:	08004fd9 	.word	0x08004fd9
 8004ec8:	08004fd9 	.word	0x08004fd9
 8004ecc:	08004fd9 	.word	0x08004fd9
 8004ed0:	08004f97 	.word	0x08004f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fa1a 	bl	8005314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0208 	orr.w	r2, r2, #8
 8004eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0204 	bic.w	r2, r2, #4
 8004efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6999      	ldr	r1, [r3, #24]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	619a      	str	r2, [r3, #24]
      break;
 8004f12:	e064      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fa6a 	bl	80053f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6999      	ldr	r1, [r3, #24]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	021a      	lsls	r2, r3, #8
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	619a      	str	r2, [r3, #24]
      break;
 8004f54:	e043      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fabf 	bl	80054e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0208 	orr.w	r2, r2, #8
 8004f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0204 	bic.w	r2, r2, #4
 8004f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69d9      	ldr	r1, [r3, #28]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	61da      	str	r2, [r3, #28]
      break;
 8004f94:	e023      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fb13 	bl	80055c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69d9      	ldr	r1, [r3, #28]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	021a      	lsls	r2, r3, #8
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	61da      	str	r2, [r3, #28]
      break;
 8004fd6:	e002      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_TIM_ConfigClockSource+0x1c>
 8005008:	2302      	movs	r3, #2
 800500a:	e0b4      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x186>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800502a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005044:	d03e      	beq.n	80050c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800504a:	f200 8087 	bhi.w	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005052:	f000 8086 	beq.w	8005162 <HAL_TIM_ConfigClockSource+0x172>
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505a:	d87f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b70      	cmp	r3, #112	@ 0x70
 800505e:	d01a      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xa6>
 8005060:	2b70      	cmp	r3, #112	@ 0x70
 8005062:	d87b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b60      	cmp	r3, #96	@ 0x60
 8005066:	d050      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x11a>
 8005068:	2b60      	cmp	r3, #96	@ 0x60
 800506a:	d877      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b50      	cmp	r3, #80	@ 0x50
 800506e:	d03c      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0xfa>
 8005070:	2b50      	cmp	r3, #80	@ 0x50
 8005072:	d873      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b40      	cmp	r3, #64	@ 0x40
 8005076:	d058      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x13a>
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d86f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b30      	cmp	r3, #48	@ 0x30
 800507e:	d064      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005080:	2b30      	cmp	r3, #48	@ 0x30
 8005082:	d86b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b20      	cmp	r3, #32
 8005086:	d060      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d867      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d05c      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005090:	2b10      	cmp	r3, #16
 8005092:	d05a      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005094:	e062      	b.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a6:	f000 fc89 	bl	80059bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	609a      	str	r2, [r3, #8]
      break;
 80050c2:	e04f      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	f000 fc72 	bl	80059bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050e6:	609a      	str	r2, [r3, #8]
      break;
 80050e8:	e03c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	461a      	mov	r2, r3
 80050f8:	f000 fb30 	bl	800575c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2150      	movs	r1, #80	@ 0x50
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fc3f 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 8005108:	e02c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005116:	461a      	mov	r2, r3
 8005118:	f000 fb8c 	bl	8005834 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2160      	movs	r1, #96	@ 0x60
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fc2f 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 8005128:	e01c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005136:	461a      	mov	r2, r3
 8005138:	f000 fb10 	bl	800575c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2140      	movs	r1, #64	@ 0x40
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fc1f 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 8005148:	e00c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 fc16 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 800515a:	e003      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      break;
 8005160:	e000      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a46      	ldr	r2, [pc, #280]	@ (80052e8 <TIM_Base_SetConfig+0x12c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d013      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051da:	d00f      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a43      	ldr	r2, [pc, #268]	@ (80052ec <TIM_Base_SetConfig+0x130>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00b      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a42      	ldr	r2, [pc, #264]	@ (80052f0 <TIM_Base_SetConfig+0x134>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a41      	ldr	r2, [pc, #260]	@ (80052f4 <TIM_Base_SetConfig+0x138>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a40      	ldr	r2, [pc, #256]	@ (80052f8 <TIM_Base_SetConfig+0x13c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d108      	bne.n	800520e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a35      	ldr	r2, [pc, #212]	@ (80052e8 <TIM_Base_SetConfig+0x12c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d02b      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521c:	d027      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a32      	ldr	r2, [pc, #200]	@ (80052ec <TIM_Base_SetConfig+0x130>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d023      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a31      	ldr	r2, [pc, #196]	@ (80052f0 <TIM_Base_SetConfig+0x134>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01f      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a30      	ldr	r2, [pc, #192]	@ (80052f4 <TIM_Base_SetConfig+0x138>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01b      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2f      	ldr	r2, [pc, #188]	@ (80052f8 <TIM_Base_SetConfig+0x13c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d017      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2e      	ldr	r2, [pc, #184]	@ (80052fc <TIM_Base_SetConfig+0x140>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2d      	ldr	r2, [pc, #180]	@ (8005300 <TIM_Base_SetConfig+0x144>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2c      	ldr	r2, [pc, #176]	@ (8005304 <TIM_Base_SetConfig+0x148>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2b      	ldr	r2, [pc, #172]	@ (8005308 <TIM_Base_SetConfig+0x14c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2a      	ldr	r2, [pc, #168]	@ (800530c <TIM_Base_SetConfig+0x150>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a29      	ldr	r2, [pc, #164]	@ (8005310 <TIM_Base_SetConfig+0x154>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a10      	ldr	r2, [pc, #64]	@ (80052e8 <TIM_Base_SetConfig+0x12c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a12      	ldr	r2, [pc, #72]	@ (80052f8 <TIM_Base_SetConfig+0x13c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d103      	bne.n	80052bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d105      	bne.n	80052da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f023 0201 	bic.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]
  }
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40010400 	.word	0x40010400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800
 8005308:	40001800 	.word	0x40001800
 800530c:	40001c00 	.word	0x40001c00
 8005310:	40002000 	.word	0x40002000

08005314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f023 0201 	bic.w	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0303 	bic.w	r3, r3, #3
 800534a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f023 0302 	bic.w	r3, r3, #2
 800535c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a20      	ldr	r2, [pc, #128]	@ (80053ec <TIM_OC1_SetConfig+0xd8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_OC1_SetConfig+0x64>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <TIM_OC1_SetConfig+0xdc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10c      	bne.n	8005392 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0308 	bic.w	r3, r3, #8
 800537e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <TIM_OC1_SetConfig+0xd8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_OC1_SetConfig+0x8e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a14      	ldr	r2, [pc, #80]	@ (80053f0 <TIM_OC1_SetConfig+0xdc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d111      	bne.n	80053c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	621a      	str	r2, [r3, #32]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40010400 	.word	0x40010400

080053f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f023 0210 	bic.w	r2, r3, #16
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800542a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 0320 	bic.w	r3, r3, #32
 800543e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a22      	ldr	r2, [pc, #136]	@ (80054d8 <TIM_OC2_SetConfig+0xe4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_OC2_SetConfig+0x68>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a21      	ldr	r2, [pc, #132]	@ (80054dc <TIM_OC2_SetConfig+0xe8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10d      	bne.n	8005478 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005476:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a17      	ldr	r2, [pc, #92]	@ (80054d8 <TIM_OC2_SetConfig+0xe4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_OC2_SetConfig+0x94>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a16      	ldr	r2, [pc, #88]	@ (80054dc <TIM_OC2_SetConfig+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d113      	bne.n	80054b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800548e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40010400 	.word	0x40010400

080054e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a21      	ldr	r2, [pc, #132]	@ (80055c0 <TIM_OC3_SetConfig+0xe0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC3_SetConfig+0x66>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a20      	ldr	r2, [pc, #128]	@ (80055c4 <TIM_OC3_SetConfig+0xe4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d10d      	bne.n	8005562 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800554c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a16      	ldr	r2, [pc, #88]	@ (80055c0 <TIM_OC3_SetConfig+0xe0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_OC3_SetConfig+0x92>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a15      	ldr	r2, [pc, #84]	@ (80055c4 <TIM_OC3_SetConfig+0xe4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d113      	bne.n	800559a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40010400 	.word	0x40010400

080055c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	031b      	lsls	r3, r3, #12
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a12      	ldr	r2, [pc, #72]	@ (800566c <TIM_OC4_SetConfig+0xa4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_OC4_SetConfig+0x68>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a11      	ldr	r2, [pc, #68]	@ (8005670 <TIM_OC4_SetConfig+0xa8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d109      	bne.n	8005644 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40010000 	.word	0x40010000
 8005670:	40010400 	.word	0x40010400

08005674 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f023 0201 	bic.w	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a28      	ldr	r2, [pc, #160]	@ (8005740 <TIM_TI1_SetConfig+0xcc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01b      	beq.n	80056da <TIM_TI1_SetConfig+0x66>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a8:	d017      	beq.n	80056da <TIM_TI1_SetConfig+0x66>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a25      	ldr	r2, [pc, #148]	@ (8005744 <TIM_TI1_SetConfig+0xd0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <TIM_TI1_SetConfig+0x66>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a24      	ldr	r2, [pc, #144]	@ (8005748 <TIM_TI1_SetConfig+0xd4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00f      	beq.n	80056da <TIM_TI1_SetConfig+0x66>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a23      	ldr	r2, [pc, #140]	@ (800574c <TIM_TI1_SetConfig+0xd8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00b      	beq.n	80056da <TIM_TI1_SetConfig+0x66>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a22      	ldr	r2, [pc, #136]	@ (8005750 <TIM_TI1_SetConfig+0xdc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_TI1_SetConfig+0x66>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4a21      	ldr	r2, [pc, #132]	@ (8005754 <TIM_TI1_SetConfig+0xe0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_TI1_SetConfig+0x66>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a20      	ldr	r2, [pc, #128]	@ (8005758 <TIM_TI1_SetConfig+0xe4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <TIM_TI1_SetConfig+0x6a>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <TIM_TI1_SetConfig+0x6c>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e003      	b.n	80056fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	b2db      	uxtb	r3, r3
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f023 030a 	bic.w	r3, r3, #10
 8005718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f003 030a 	and.w	r3, r3, #10
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40010000 	.word	0x40010000
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40000c00 	.word	0x40000c00
 8005750:	40010400 	.word	0x40010400
 8005754:	40014000 	.word	0x40014000
 8005758:	40001800 	.word	0x40001800

0800575c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f023 0201 	bic.w	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 030a 	bic.w	r3, r3, #10
 8005798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b087      	sub	sp, #28
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0210 	bic.w	r2, r3, #16
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	031b      	lsls	r3, r3, #12
 80057fe:	b29b      	uxth	r3, r3
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800580c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	621a      	str	r2, [r3, #32]
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	f023 0210 	bic.w	r2, r3, #16
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800585e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	031b      	lsls	r3, r3, #12
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005870:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80058e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	621a      	str	r2, [r3, #32]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005938:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800594a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	031b      	lsls	r3, r3, #12
 8005950:	b29b      	uxth	r3, r3
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800595e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	031b      	lsls	r3, r3, #12
 8005964:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f043 0307 	orr.w	r3, r3, #7
 80059a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	431a      	orrs	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	609a      	str	r2, [r3, #8]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f003 031f 	and.w	r3, r3, #31
 8005a0e:	2201      	movs	r2, #1
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1a      	ldr	r2, [r3, #32]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	401a      	ands	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	431a      	orrs	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	621a      	str	r2, [r3, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e05a      	b.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a21      	ldr	r2, [pc, #132]	@ (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d022      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aac:	d01d      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d018      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1b      	ldr	r2, [pc, #108]	@ (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d013      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00e      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a18      	ldr	r2, [pc, #96]	@ (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a17      	ldr	r2, [pc, #92]	@ (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d004      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a15      	ldr	r2, [pc, #84]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10c      	bne.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40010400 	.word	0x40010400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40001800 	.word	0x40001800

08005b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e042      	b.n	8005c00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc fc50 	bl	8002434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2224      	movs	r2, #36	@ 0x24
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fa09 	bl	8005fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695a      	ldr	r2, [r3, #20]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d175      	bne.n	8005d14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_UART_Transmit+0x2c>
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e06e      	b.n	8005d16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2221      	movs	r2, #33	@ 0x21
 8005c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c46:	f7fc ff29 	bl	8002a9c <HAL_GetTick>
 8005c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	88fa      	ldrh	r2, [r7, #6]
 8005c50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c60:	d108      	bne.n	8005c74 <HAL_UART_Transmit+0x6c>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	e003      	b.n	8005c7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c7c:	e02e      	b.n	8005cdc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2200      	movs	r2, #0
 8005c86:	2180      	movs	r1, #128	@ 0x80
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f8df 	bl	8005e4c <UART_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e03a      	b.n	8005d16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	3302      	adds	r3, #2
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	e007      	b.n	8005cce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1cb      	bne.n	8005c7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2200      	movs	r2, #0
 8005cee:	2140      	movs	r1, #64	@ 0x40
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f8ab 	bl	8005e4c <UART_WaitOnFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e006      	b.n	8005d16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b08a      	sub	sp, #40	@ 0x28
 8005d22:	af02      	add	r7, sp, #8
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	603b      	str	r3, [r7, #0]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	f040 8081 	bne.w	8005e42 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_UART_Receive+0x2e>
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e079      	b.n	8005e44 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2222      	movs	r2, #34	@ 0x22
 8005d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d64:	f7fc fe9a 	bl	8002a9c <HAL_GetTick>
 8005d68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	88fa      	ldrh	r2, [r7, #6]
 8005d74:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7e:	d108      	bne.n	8005d92 <HAL_UART_Receive+0x74>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	e003      	b.n	8005d9a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005d9a:	e047      	b.n	8005e2c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2200      	movs	r2, #0
 8005da4:	2120      	movs	r1, #32
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f850 	bl	8005e4c <UART_WaitOnFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e042      	b.n	8005e44 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10c      	bne.n	8005dde <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	3302      	adds	r3, #2
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	e01f      	b.n	8005e1e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005de6:	d007      	beq.n	8005df8 <HAL_UART_Receive+0xda>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <HAL_UART_Receive+0xe8>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e008      	b.n	8005e18 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1b2      	bne.n	8005d9c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e000      	b.n	8005e44 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
  }
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e5c:	e03b      	b.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d037      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e66:	f7fc fe19 	bl	8002a9c <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	6a3a      	ldr	r2, [r7, #32]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d302      	bcc.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e03a      	b.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d023      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b80      	cmp	r3, #128	@ 0x80
 8005e92:	d020      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b40      	cmp	r3, #64	@ 0x40
 8005e98:	d01d      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d116      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f81d 	bl	8005efe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e00f      	b.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d0b4      	beq.n	8005e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b095      	sub	sp, #84	@ 0x54
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f26:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e5      	bne.n	8005f06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3314      	adds	r3, #20
 8005f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3314      	adds	r3, #20
 8005f58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e5      	bne.n	8005f3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d119      	bne.n	8005faa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	330c      	adds	r3, #12
 8005f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f023 0310 	bic.w	r3, r3, #16
 8005f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330c      	adds	r3, #12
 8005f94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f96:	61ba      	str	r2, [r7, #24]
 8005f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6979      	ldr	r1, [r7, #20]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e5      	bne.n	8005f76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fb8:	bf00      	nop
 8005fba:	3754      	adds	r7, #84	@ 0x54
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc8:	b0c0      	sub	sp, #256	@ 0x100
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe0:	68d9      	ldr	r1, [r3, #12]
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	ea40 0301 	orr.w	r3, r0, r1
 8005fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	431a      	orrs	r2, r3
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800601c:	f021 010c 	bic.w	r1, r1, #12
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800602a:	430b      	orrs	r3, r1
 800602c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603e:	6999      	ldr	r1, [r3, #24]
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	ea40 0301 	orr.w	r3, r0, r1
 800604a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b8f      	ldr	r3, [pc, #572]	@ (8006290 <UART_SetConfig+0x2cc>)
 8006054:	429a      	cmp	r2, r3
 8006056:	d005      	beq.n	8006064 <UART_SetConfig+0xa0>
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b8d      	ldr	r3, [pc, #564]	@ (8006294 <UART_SetConfig+0x2d0>)
 8006060:	429a      	cmp	r2, r3
 8006062:	d104      	bne.n	800606e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006064:	f7fe f856 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 8006068:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800606c:	e003      	b.n	8006076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800606e:	f7fe f83d 	bl	80040ec <HAL_RCC_GetPCLK1Freq>
 8006072:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006080:	f040 810c 	bne.w	800629c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006088:	2200      	movs	r2, #0
 800608a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800608e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006096:	4622      	mov	r2, r4
 8006098:	462b      	mov	r3, r5
 800609a:	1891      	adds	r1, r2, r2
 800609c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800609e:	415b      	adcs	r3, r3
 80060a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060a6:	4621      	mov	r1, r4
 80060a8:	eb12 0801 	adds.w	r8, r2, r1
 80060ac:	4629      	mov	r1, r5
 80060ae:	eb43 0901 	adc.w	r9, r3, r1
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060c6:	4690      	mov	r8, r2
 80060c8:	4699      	mov	r9, r3
 80060ca:	4623      	mov	r3, r4
 80060cc:	eb18 0303 	adds.w	r3, r8, r3
 80060d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060d4:	462b      	mov	r3, r5
 80060d6:	eb49 0303 	adc.w	r3, r9, r3
 80060da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060f2:	460b      	mov	r3, r1
 80060f4:	18db      	adds	r3, r3, r3
 80060f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80060f8:	4613      	mov	r3, r2
 80060fa:	eb42 0303 	adc.w	r3, r2, r3
 80060fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006108:	f7fa fd9e 	bl	8000c48 <__aeabi_uldivmod>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4b61      	ldr	r3, [pc, #388]	@ (8006298 <UART_SetConfig+0x2d4>)
 8006112:	fba3 2302 	umull	r2, r3, r3, r2
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	011c      	lsls	r4, r3, #4
 800611a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800611e:	2200      	movs	r2, #0
 8006120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006124:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800612c:	4642      	mov	r2, r8
 800612e:	464b      	mov	r3, r9
 8006130:	1891      	adds	r1, r2, r2
 8006132:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006134:	415b      	adcs	r3, r3
 8006136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800613c:	4641      	mov	r1, r8
 800613e:	eb12 0a01 	adds.w	sl, r2, r1
 8006142:	4649      	mov	r1, r9
 8006144:	eb43 0b01 	adc.w	fp, r3, r1
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800615c:	4692      	mov	sl, r2
 800615e:	469b      	mov	fp, r3
 8006160:	4643      	mov	r3, r8
 8006162:	eb1a 0303 	adds.w	r3, sl, r3
 8006166:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800616a:	464b      	mov	r3, r9
 800616c:	eb4b 0303 	adc.w	r3, fp, r3
 8006170:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006180:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006188:	460b      	mov	r3, r1
 800618a:	18db      	adds	r3, r3, r3
 800618c:	643b      	str	r3, [r7, #64]	@ 0x40
 800618e:	4613      	mov	r3, r2
 8006190:	eb42 0303 	adc.w	r3, r2, r3
 8006194:	647b      	str	r3, [r7, #68]	@ 0x44
 8006196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800619a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800619e:	f7fa fd53 	bl	8000c48 <__aeabi_uldivmod>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4611      	mov	r1, r2
 80061a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006298 <UART_SetConfig+0x2d4>)
 80061aa:	fba3 2301 	umull	r2, r3, r3, r1
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	2264      	movs	r2, #100	@ 0x64
 80061b2:	fb02 f303 	mul.w	r3, r2, r3
 80061b6:	1acb      	subs	r3, r1, r3
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061be:	4b36      	ldr	r3, [pc, #216]	@ (8006298 <UART_SetConfig+0x2d4>)
 80061c0:	fba3 2302 	umull	r2, r3, r3, r2
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80061cc:	441c      	add	r4, r3
 80061ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80061dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061e0:	4642      	mov	r2, r8
 80061e2:	464b      	mov	r3, r9
 80061e4:	1891      	adds	r1, r2, r2
 80061e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061e8:	415b      	adcs	r3, r3
 80061ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061f0:	4641      	mov	r1, r8
 80061f2:	1851      	adds	r1, r2, r1
 80061f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80061f6:	4649      	mov	r1, r9
 80061f8:	414b      	adcs	r3, r1
 80061fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006208:	4659      	mov	r1, fp
 800620a:	00cb      	lsls	r3, r1, #3
 800620c:	4651      	mov	r1, sl
 800620e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006212:	4651      	mov	r1, sl
 8006214:	00ca      	lsls	r2, r1, #3
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	4603      	mov	r3, r0
 800621c:	4642      	mov	r2, r8
 800621e:	189b      	adds	r3, r3, r2
 8006220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006224:	464b      	mov	r3, r9
 8006226:	460a      	mov	r2, r1
 8006228:	eb42 0303 	adc.w	r3, r2, r3
 800622c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800623c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006244:	460b      	mov	r3, r1
 8006246:	18db      	adds	r3, r3, r3
 8006248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800624a:	4613      	mov	r3, r2
 800624c:	eb42 0303 	adc.w	r3, r2, r3
 8006250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800625a:	f7fa fcf5 	bl	8000c48 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <UART_SetConfig+0x2d4>)
 8006264:	fba3 1302 	umull	r1, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	2164      	movs	r1, #100	@ 0x64
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	3332      	adds	r3, #50	@ 0x32
 8006276:	4a08      	ldr	r2, [pc, #32]	@ (8006298 <UART_SetConfig+0x2d4>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	f003 0207 	and.w	r2, r3, #7
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4422      	add	r2, r4
 800628a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800628c:	e106      	b.n	800649c <UART_SetConfig+0x4d8>
 800628e:	bf00      	nop
 8006290:	40011000 	.word	0x40011000
 8006294:	40011400 	.word	0x40011400
 8006298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800629c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80062aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80062ae:	4642      	mov	r2, r8
 80062b0:	464b      	mov	r3, r9
 80062b2:	1891      	adds	r1, r2, r2
 80062b4:	6239      	str	r1, [r7, #32]
 80062b6:	415b      	adcs	r3, r3
 80062b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062be:	4641      	mov	r1, r8
 80062c0:	1854      	adds	r4, r2, r1
 80062c2:	4649      	mov	r1, r9
 80062c4:	eb43 0501 	adc.w	r5, r3, r1
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	00eb      	lsls	r3, r5, #3
 80062d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062d6:	00e2      	lsls	r2, r4, #3
 80062d8:	4614      	mov	r4, r2
 80062da:	461d      	mov	r5, r3
 80062dc:	4643      	mov	r3, r8
 80062de:	18e3      	adds	r3, r4, r3
 80062e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062e4:	464b      	mov	r3, r9
 80062e6:	eb45 0303 	adc.w	r3, r5, r3
 80062ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800630a:	4629      	mov	r1, r5
 800630c:	008b      	lsls	r3, r1, #2
 800630e:	4621      	mov	r1, r4
 8006310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006314:	4621      	mov	r1, r4
 8006316:	008a      	lsls	r2, r1, #2
 8006318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800631c:	f7fa fc94 	bl	8000c48 <__aeabi_uldivmod>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4b60      	ldr	r3, [pc, #384]	@ (80064a8 <UART_SetConfig+0x4e4>)
 8006326:	fba3 2302 	umull	r2, r3, r3, r2
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	011c      	lsls	r4, r3, #4
 800632e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006338:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800633c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	1891      	adds	r1, r2, r2
 8006346:	61b9      	str	r1, [r7, #24]
 8006348:	415b      	adcs	r3, r3
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006350:	4641      	mov	r1, r8
 8006352:	1851      	adds	r1, r2, r1
 8006354:	6139      	str	r1, [r7, #16]
 8006356:	4649      	mov	r1, r9
 8006358:	414b      	adcs	r3, r1
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006368:	4659      	mov	r1, fp
 800636a:	00cb      	lsls	r3, r1, #3
 800636c:	4651      	mov	r1, sl
 800636e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006372:	4651      	mov	r1, sl
 8006374:	00ca      	lsls	r2, r1, #3
 8006376:	4610      	mov	r0, r2
 8006378:	4619      	mov	r1, r3
 800637a:	4603      	mov	r3, r0
 800637c:	4642      	mov	r2, r8
 800637e:	189b      	adds	r3, r3, r2
 8006380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006384:	464b      	mov	r3, r9
 8006386:	460a      	mov	r2, r1
 8006388:	eb42 0303 	adc.w	r3, r2, r3
 800638c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	67bb      	str	r3, [r7, #120]	@ 0x78
 800639a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80063a8:	4649      	mov	r1, r9
 80063aa:	008b      	lsls	r3, r1, #2
 80063ac:	4641      	mov	r1, r8
 80063ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b2:	4641      	mov	r1, r8
 80063b4:	008a      	lsls	r2, r1, #2
 80063b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063ba:	f7fa fc45 	bl	8000c48 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	4b38      	ldr	r3, [pc, #224]	@ (80064a8 <UART_SetConfig+0x4e4>)
 80063c6:	fba3 2301 	umull	r2, r3, r3, r1
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	2264      	movs	r2, #100	@ 0x64
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
 80063d2:	1acb      	subs	r3, r1, r3
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	3332      	adds	r3, #50	@ 0x32
 80063d8:	4a33      	ldr	r2, [pc, #204]	@ (80064a8 <UART_SetConfig+0x4e4>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063e4:	441c      	add	r4, r3
 80063e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ea:	2200      	movs	r2, #0
 80063ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80063ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80063f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063f4:	4642      	mov	r2, r8
 80063f6:	464b      	mov	r3, r9
 80063f8:	1891      	adds	r1, r2, r2
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	415b      	adcs	r3, r3
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006404:	4641      	mov	r1, r8
 8006406:	1851      	adds	r1, r2, r1
 8006408:	6039      	str	r1, [r7, #0]
 800640a:	4649      	mov	r1, r9
 800640c:	414b      	adcs	r3, r1
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800641c:	4659      	mov	r1, fp
 800641e:	00cb      	lsls	r3, r1, #3
 8006420:	4651      	mov	r1, sl
 8006422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006426:	4651      	mov	r1, sl
 8006428:	00ca      	lsls	r2, r1, #3
 800642a:	4610      	mov	r0, r2
 800642c:	4619      	mov	r1, r3
 800642e:	4603      	mov	r3, r0
 8006430:	4642      	mov	r2, r8
 8006432:	189b      	adds	r3, r3, r2
 8006434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006436:	464b      	mov	r3, r9
 8006438:	460a      	mov	r2, r1
 800643a:	eb42 0303 	adc.w	r3, r2, r3
 800643e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	663b      	str	r3, [r7, #96]	@ 0x60
 800644a:	667a      	str	r2, [r7, #100]	@ 0x64
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006458:	4649      	mov	r1, r9
 800645a:	008b      	lsls	r3, r1, #2
 800645c:	4641      	mov	r1, r8
 800645e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006462:	4641      	mov	r1, r8
 8006464:	008a      	lsls	r2, r1, #2
 8006466:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800646a:	f7fa fbed 	bl	8000c48 <__aeabi_uldivmod>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4b0d      	ldr	r3, [pc, #52]	@ (80064a8 <UART_SetConfig+0x4e4>)
 8006474:	fba3 1302 	umull	r1, r3, r3, r2
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	2164      	movs	r1, #100	@ 0x64
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	3332      	adds	r3, #50	@ 0x32
 8006486:	4a08      	ldr	r2, [pc, #32]	@ (80064a8 <UART_SetConfig+0x4e4>)
 8006488:	fba2 2303 	umull	r2, r3, r2, r3
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	f003 020f 	and.w	r2, r3, #15
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4422      	add	r2, r4
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064a2:	46bd      	mov	sp, r7
 80064a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064a8:	51eb851f 	.word	0x51eb851f

080064ac <__cvt>:
 80064ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064b0:	ec57 6b10 	vmov	r6, r7, d0
 80064b4:	2f00      	cmp	r7, #0
 80064b6:	460c      	mov	r4, r1
 80064b8:	4619      	mov	r1, r3
 80064ba:	463b      	mov	r3, r7
 80064bc:	bfbb      	ittet	lt
 80064be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80064c2:	461f      	movlt	r7, r3
 80064c4:	2300      	movge	r3, #0
 80064c6:	232d      	movlt	r3, #45	@ 0x2d
 80064c8:	700b      	strb	r3, [r1, #0]
 80064ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80064d0:	4691      	mov	r9, r2
 80064d2:	f023 0820 	bic.w	r8, r3, #32
 80064d6:	bfbc      	itt	lt
 80064d8:	4632      	movlt	r2, r6
 80064da:	4616      	movlt	r6, r2
 80064dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064e0:	d005      	beq.n	80064ee <__cvt+0x42>
 80064e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064e6:	d100      	bne.n	80064ea <__cvt+0x3e>
 80064e8:	3401      	adds	r4, #1
 80064ea:	2102      	movs	r1, #2
 80064ec:	e000      	b.n	80064f0 <__cvt+0x44>
 80064ee:	2103      	movs	r1, #3
 80064f0:	ab03      	add	r3, sp, #12
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	ab02      	add	r3, sp, #8
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	ec47 6b10 	vmov	d0, r6, r7
 80064fc:	4653      	mov	r3, sl
 80064fe:	4622      	mov	r2, r4
 8006500:	f000 fe46 	bl	8007190 <_dtoa_r>
 8006504:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006508:	4605      	mov	r5, r0
 800650a:	d119      	bne.n	8006540 <__cvt+0x94>
 800650c:	f019 0f01 	tst.w	r9, #1
 8006510:	d00e      	beq.n	8006530 <__cvt+0x84>
 8006512:	eb00 0904 	add.w	r9, r0, r4
 8006516:	2200      	movs	r2, #0
 8006518:	2300      	movs	r3, #0
 800651a:	4630      	mov	r0, r6
 800651c:	4639      	mov	r1, r7
 800651e:	f7fa fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006522:	b108      	cbz	r0, 8006528 <__cvt+0x7c>
 8006524:	f8cd 900c 	str.w	r9, [sp, #12]
 8006528:	2230      	movs	r2, #48	@ 0x30
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	454b      	cmp	r3, r9
 800652e:	d31e      	bcc.n	800656e <__cvt+0xc2>
 8006530:	9b03      	ldr	r3, [sp, #12]
 8006532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006534:	1b5b      	subs	r3, r3, r5
 8006536:	4628      	mov	r0, r5
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	b004      	add	sp, #16
 800653c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006540:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006544:	eb00 0904 	add.w	r9, r0, r4
 8006548:	d1e5      	bne.n	8006516 <__cvt+0x6a>
 800654a:	7803      	ldrb	r3, [r0, #0]
 800654c:	2b30      	cmp	r3, #48	@ 0x30
 800654e:	d10a      	bne.n	8006566 <__cvt+0xba>
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7fa fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800655c:	b918      	cbnz	r0, 8006566 <__cvt+0xba>
 800655e:	f1c4 0401 	rsb	r4, r4, #1
 8006562:	f8ca 4000 	str.w	r4, [sl]
 8006566:	f8da 3000 	ldr.w	r3, [sl]
 800656a:	4499      	add	r9, r3
 800656c:	e7d3      	b.n	8006516 <__cvt+0x6a>
 800656e:	1c59      	adds	r1, r3, #1
 8006570:	9103      	str	r1, [sp, #12]
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	e7d9      	b.n	800652a <__cvt+0x7e>

08006576 <__exponent>:
 8006576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006578:	2900      	cmp	r1, #0
 800657a:	bfba      	itte	lt
 800657c:	4249      	neglt	r1, r1
 800657e:	232d      	movlt	r3, #45	@ 0x2d
 8006580:	232b      	movge	r3, #43	@ 0x2b
 8006582:	2909      	cmp	r1, #9
 8006584:	7002      	strb	r2, [r0, #0]
 8006586:	7043      	strb	r3, [r0, #1]
 8006588:	dd29      	ble.n	80065de <__exponent+0x68>
 800658a:	f10d 0307 	add.w	r3, sp, #7
 800658e:	461d      	mov	r5, r3
 8006590:	270a      	movs	r7, #10
 8006592:	461a      	mov	r2, r3
 8006594:	fbb1 f6f7 	udiv	r6, r1, r7
 8006598:	fb07 1416 	mls	r4, r7, r6, r1
 800659c:	3430      	adds	r4, #48	@ 0x30
 800659e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065a2:	460c      	mov	r4, r1
 80065a4:	2c63      	cmp	r4, #99	@ 0x63
 80065a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80065aa:	4631      	mov	r1, r6
 80065ac:	dcf1      	bgt.n	8006592 <__exponent+0x1c>
 80065ae:	3130      	adds	r1, #48	@ 0x30
 80065b0:	1e94      	subs	r4, r2, #2
 80065b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065b6:	1c41      	adds	r1, r0, #1
 80065b8:	4623      	mov	r3, r4
 80065ba:	42ab      	cmp	r3, r5
 80065bc:	d30a      	bcc.n	80065d4 <__exponent+0x5e>
 80065be:	f10d 0309 	add.w	r3, sp, #9
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	42ac      	cmp	r4, r5
 80065c6:	bf88      	it	hi
 80065c8:	2300      	movhi	r3, #0
 80065ca:	3302      	adds	r3, #2
 80065cc:	4403      	add	r3, r0
 80065ce:	1a18      	subs	r0, r3, r0
 80065d0:	b003      	add	sp, #12
 80065d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065dc:	e7ed      	b.n	80065ba <__exponent+0x44>
 80065de:	2330      	movs	r3, #48	@ 0x30
 80065e0:	3130      	adds	r1, #48	@ 0x30
 80065e2:	7083      	strb	r3, [r0, #2]
 80065e4:	70c1      	strb	r1, [r0, #3]
 80065e6:	1d03      	adds	r3, r0, #4
 80065e8:	e7f1      	b.n	80065ce <__exponent+0x58>
	...

080065ec <_printf_float>:
 80065ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f0:	b08d      	sub	sp, #52	@ 0x34
 80065f2:	460c      	mov	r4, r1
 80065f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065f8:	4616      	mov	r6, r2
 80065fa:	461f      	mov	r7, r3
 80065fc:	4605      	mov	r5, r0
 80065fe:	f000 fcb9 	bl	8006f74 <_localeconv_r>
 8006602:	6803      	ldr	r3, [r0, #0]
 8006604:	9304      	str	r3, [sp, #16]
 8006606:	4618      	mov	r0, r3
 8006608:	f7f9 fe32 	bl	8000270 <strlen>
 800660c:	2300      	movs	r3, #0
 800660e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006610:	f8d8 3000 	ldr.w	r3, [r8]
 8006614:	9005      	str	r0, [sp, #20]
 8006616:	3307      	adds	r3, #7
 8006618:	f023 0307 	bic.w	r3, r3, #7
 800661c:	f103 0208 	add.w	r2, r3, #8
 8006620:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006624:	f8d4 b000 	ldr.w	fp, [r4]
 8006628:	f8c8 2000 	str.w	r2, [r8]
 800662c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006630:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006634:	9307      	str	r3, [sp, #28]
 8006636:	f8cd 8018 	str.w	r8, [sp, #24]
 800663a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800663e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006642:	4b9c      	ldr	r3, [pc, #624]	@ (80068b4 <_printf_float+0x2c8>)
 8006644:	f04f 32ff 	mov.w	r2, #4294967295
 8006648:	f7fa fa70 	bl	8000b2c <__aeabi_dcmpun>
 800664c:	bb70      	cbnz	r0, 80066ac <_printf_float+0xc0>
 800664e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006652:	4b98      	ldr	r3, [pc, #608]	@ (80068b4 <_printf_float+0x2c8>)
 8006654:	f04f 32ff 	mov.w	r2, #4294967295
 8006658:	f7fa fa4a 	bl	8000af0 <__aeabi_dcmple>
 800665c:	bb30      	cbnz	r0, 80066ac <_printf_float+0xc0>
 800665e:	2200      	movs	r2, #0
 8006660:	2300      	movs	r3, #0
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7fa fa39 	bl	8000adc <__aeabi_dcmplt>
 800666a:	b110      	cbz	r0, 8006672 <_printf_float+0x86>
 800666c:	232d      	movs	r3, #45	@ 0x2d
 800666e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006672:	4a91      	ldr	r2, [pc, #580]	@ (80068b8 <_printf_float+0x2cc>)
 8006674:	4b91      	ldr	r3, [pc, #580]	@ (80068bc <_printf_float+0x2d0>)
 8006676:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800667a:	bf8c      	ite	hi
 800667c:	4690      	movhi	r8, r2
 800667e:	4698      	movls	r8, r3
 8006680:	2303      	movs	r3, #3
 8006682:	6123      	str	r3, [r4, #16]
 8006684:	f02b 0304 	bic.w	r3, fp, #4
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	f04f 0900 	mov.w	r9, #0
 800668e:	9700      	str	r7, [sp, #0]
 8006690:	4633      	mov	r3, r6
 8006692:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006694:	4621      	mov	r1, r4
 8006696:	4628      	mov	r0, r5
 8006698:	f000 f9d2 	bl	8006a40 <_printf_common>
 800669c:	3001      	adds	r0, #1
 800669e:	f040 808d 	bne.w	80067bc <_printf_float+0x1d0>
 80066a2:	f04f 30ff 	mov.w	r0, #4294967295
 80066a6:	b00d      	add	sp, #52	@ 0x34
 80066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ac:	4642      	mov	r2, r8
 80066ae:	464b      	mov	r3, r9
 80066b0:	4640      	mov	r0, r8
 80066b2:	4649      	mov	r1, r9
 80066b4:	f7fa fa3a 	bl	8000b2c <__aeabi_dcmpun>
 80066b8:	b140      	cbz	r0, 80066cc <_printf_float+0xe0>
 80066ba:	464b      	mov	r3, r9
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bfbc      	itt	lt
 80066c0:	232d      	movlt	r3, #45	@ 0x2d
 80066c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066c6:	4a7e      	ldr	r2, [pc, #504]	@ (80068c0 <_printf_float+0x2d4>)
 80066c8:	4b7e      	ldr	r3, [pc, #504]	@ (80068c4 <_printf_float+0x2d8>)
 80066ca:	e7d4      	b.n	8006676 <_printf_float+0x8a>
 80066cc:	6863      	ldr	r3, [r4, #4]
 80066ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80066d2:	9206      	str	r2, [sp, #24]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	d13b      	bne.n	8006750 <_printf_float+0x164>
 80066d8:	2306      	movs	r3, #6
 80066da:	6063      	str	r3, [r4, #4]
 80066dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80066e0:	2300      	movs	r3, #0
 80066e2:	6022      	str	r2, [r4, #0]
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80066e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80066ec:	ab09      	add	r3, sp, #36	@ 0x24
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	6861      	ldr	r1, [r4, #4]
 80066f2:	ec49 8b10 	vmov	d0, r8, r9
 80066f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7ff fed6 	bl	80064ac <__cvt>
 8006700:	9b06      	ldr	r3, [sp, #24]
 8006702:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006704:	2b47      	cmp	r3, #71	@ 0x47
 8006706:	4680      	mov	r8, r0
 8006708:	d129      	bne.n	800675e <_printf_float+0x172>
 800670a:	1cc8      	adds	r0, r1, #3
 800670c:	db02      	blt.n	8006714 <_printf_float+0x128>
 800670e:	6863      	ldr	r3, [r4, #4]
 8006710:	4299      	cmp	r1, r3
 8006712:	dd41      	ble.n	8006798 <_printf_float+0x1ac>
 8006714:	f1aa 0a02 	sub.w	sl, sl, #2
 8006718:	fa5f fa8a 	uxtb.w	sl, sl
 800671c:	3901      	subs	r1, #1
 800671e:	4652      	mov	r2, sl
 8006720:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006724:	9109      	str	r1, [sp, #36]	@ 0x24
 8006726:	f7ff ff26 	bl	8006576 <__exponent>
 800672a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800672c:	1813      	adds	r3, r2, r0
 800672e:	2a01      	cmp	r2, #1
 8006730:	4681      	mov	r9, r0
 8006732:	6123      	str	r3, [r4, #16]
 8006734:	dc02      	bgt.n	800673c <_printf_float+0x150>
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	07d2      	lsls	r2, r2, #31
 800673a:	d501      	bpl.n	8006740 <_printf_float+0x154>
 800673c:	3301      	adds	r3, #1
 800673e:	6123      	str	r3, [r4, #16]
 8006740:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0a2      	beq.n	800668e <_printf_float+0xa2>
 8006748:	232d      	movs	r3, #45	@ 0x2d
 800674a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800674e:	e79e      	b.n	800668e <_printf_float+0xa2>
 8006750:	9a06      	ldr	r2, [sp, #24]
 8006752:	2a47      	cmp	r2, #71	@ 0x47
 8006754:	d1c2      	bne.n	80066dc <_printf_float+0xf0>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1c0      	bne.n	80066dc <_printf_float+0xf0>
 800675a:	2301      	movs	r3, #1
 800675c:	e7bd      	b.n	80066da <_printf_float+0xee>
 800675e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006762:	d9db      	bls.n	800671c <_printf_float+0x130>
 8006764:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006768:	d118      	bne.n	800679c <_printf_float+0x1b0>
 800676a:	2900      	cmp	r1, #0
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	dd0b      	ble.n	8006788 <_printf_float+0x19c>
 8006770:	6121      	str	r1, [r4, #16]
 8006772:	b913      	cbnz	r3, 800677a <_printf_float+0x18e>
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	07d0      	lsls	r0, r2, #31
 8006778:	d502      	bpl.n	8006780 <_printf_float+0x194>
 800677a:	3301      	adds	r3, #1
 800677c:	440b      	add	r3, r1
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006782:	f04f 0900 	mov.w	r9, #0
 8006786:	e7db      	b.n	8006740 <_printf_float+0x154>
 8006788:	b913      	cbnz	r3, 8006790 <_printf_float+0x1a4>
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	07d2      	lsls	r2, r2, #31
 800678e:	d501      	bpl.n	8006794 <_printf_float+0x1a8>
 8006790:	3302      	adds	r3, #2
 8006792:	e7f4      	b.n	800677e <_printf_float+0x192>
 8006794:	2301      	movs	r3, #1
 8006796:	e7f2      	b.n	800677e <_printf_float+0x192>
 8006798:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800679c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800679e:	4299      	cmp	r1, r3
 80067a0:	db05      	blt.n	80067ae <_printf_float+0x1c2>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	6121      	str	r1, [r4, #16]
 80067a6:	07d8      	lsls	r0, r3, #31
 80067a8:	d5ea      	bpl.n	8006780 <_printf_float+0x194>
 80067aa:	1c4b      	adds	r3, r1, #1
 80067ac:	e7e7      	b.n	800677e <_printf_float+0x192>
 80067ae:	2900      	cmp	r1, #0
 80067b0:	bfd4      	ite	le
 80067b2:	f1c1 0202 	rsble	r2, r1, #2
 80067b6:	2201      	movgt	r2, #1
 80067b8:	4413      	add	r3, r2
 80067ba:	e7e0      	b.n	800677e <_printf_float+0x192>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	055a      	lsls	r2, r3, #21
 80067c0:	d407      	bmi.n	80067d2 <_printf_float+0x1e6>
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	4642      	mov	r2, r8
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	d12b      	bne.n	8006828 <_printf_float+0x23c>
 80067d0:	e767      	b.n	80066a2 <_printf_float+0xb6>
 80067d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067d6:	f240 80dd 	bls.w	8006994 <_printf_float+0x3a8>
 80067da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067de:	2200      	movs	r2, #0
 80067e0:	2300      	movs	r3, #0
 80067e2:	f7fa f971 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d033      	beq.n	8006852 <_printf_float+0x266>
 80067ea:	4a37      	ldr	r2, [pc, #220]	@ (80068c8 <_printf_float+0x2dc>)
 80067ec:	2301      	movs	r3, #1
 80067ee:	4631      	mov	r1, r6
 80067f0:	4628      	mov	r0, r5
 80067f2:	47b8      	blx	r7
 80067f4:	3001      	adds	r0, #1
 80067f6:	f43f af54 	beq.w	80066a2 <_printf_float+0xb6>
 80067fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067fe:	4543      	cmp	r3, r8
 8006800:	db02      	blt.n	8006808 <_printf_float+0x21c>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	07d8      	lsls	r0, r3, #31
 8006806:	d50f      	bpl.n	8006828 <_printf_float+0x23c>
 8006808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f af45 	beq.w	80066a2 <_printf_float+0xb6>
 8006818:	f04f 0900 	mov.w	r9, #0
 800681c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006820:	f104 0a1a 	add.w	sl, r4, #26
 8006824:	45c8      	cmp	r8, r9
 8006826:	dc09      	bgt.n	800683c <_printf_float+0x250>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	079b      	lsls	r3, r3, #30
 800682c:	f100 8103 	bmi.w	8006a36 <_printf_float+0x44a>
 8006830:	68e0      	ldr	r0, [r4, #12]
 8006832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006834:	4298      	cmp	r0, r3
 8006836:	bfb8      	it	lt
 8006838:	4618      	movlt	r0, r3
 800683a:	e734      	b.n	80066a6 <_printf_float+0xba>
 800683c:	2301      	movs	r3, #1
 800683e:	4652      	mov	r2, sl
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f af2b 	beq.w	80066a2 <_printf_float+0xb6>
 800684c:	f109 0901 	add.w	r9, r9, #1
 8006850:	e7e8      	b.n	8006824 <_printf_float+0x238>
 8006852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	dc39      	bgt.n	80068cc <_printf_float+0x2e0>
 8006858:	4a1b      	ldr	r2, [pc, #108]	@ (80068c8 <_printf_float+0x2dc>)
 800685a:	2301      	movs	r3, #1
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f af1d 	beq.w	80066a2 <_printf_float+0xb6>
 8006868:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800686c:	ea59 0303 	orrs.w	r3, r9, r3
 8006870:	d102      	bne.n	8006878 <_printf_float+0x28c>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	07d9      	lsls	r1, r3, #31
 8006876:	d5d7      	bpl.n	8006828 <_printf_float+0x23c>
 8006878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	f43f af0d 	beq.w	80066a2 <_printf_float+0xb6>
 8006888:	f04f 0a00 	mov.w	sl, #0
 800688c:	f104 0b1a 	add.w	fp, r4, #26
 8006890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006892:	425b      	negs	r3, r3
 8006894:	4553      	cmp	r3, sl
 8006896:	dc01      	bgt.n	800689c <_printf_float+0x2b0>
 8006898:	464b      	mov	r3, r9
 800689a:	e793      	b.n	80067c4 <_printf_float+0x1d8>
 800689c:	2301      	movs	r3, #1
 800689e:	465a      	mov	r2, fp
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f aefb 	beq.w	80066a2 <_printf_float+0xb6>
 80068ac:	f10a 0a01 	add.w	sl, sl, #1
 80068b0:	e7ee      	b.n	8006890 <_printf_float+0x2a4>
 80068b2:	bf00      	nop
 80068b4:	7fefffff 	.word	0x7fefffff
 80068b8:	08008e90 	.word	0x08008e90
 80068bc:	08008e8c 	.word	0x08008e8c
 80068c0:	08008e98 	.word	0x08008e98
 80068c4:	08008e94 	.word	0x08008e94
 80068c8:	08008e9c 	.word	0x08008e9c
 80068cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068d2:	4553      	cmp	r3, sl
 80068d4:	bfa8      	it	ge
 80068d6:	4653      	movge	r3, sl
 80068d8:	2b00      	cmp	r3, #0
 80068da:	4699      	mov	r9, r3
 80068dc:	dc36      	bgt.n	800694c <_printf_float+0x360>
 80068de:	f04f 0b00 	mov.w	fp, #0
 80068e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068e6:	f104 021a 	add.w	r2, r4, #26
 80068ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068ec:	9306      	str	r3, [sp, #24]
 80068ee:	eba3 0309 	sub.w	r3, r3, r9
 80068f2:	455b      	cmp	r3, fp
 80068f4:	dc31      	bgt.n	800695a <_printf_float+0x36e>
 80068f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f8:	459a      	cmp	sl, r3
 80068fa:	dc3a      	bgt.n	8006972 <_printf_float+0x386>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07da      	lsls	r2, r3, #31
 8006900:	d437      	bmi.n	8006972 <_printf_float+0x386>
 8006902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006904:	ebaa 0903 	sub.w	r9, sl, r3
 8006908:	9b06      	ldr	r3, [sp, #24]
 800690a:	ebaa 0303 	sub.w	r3, sl, r3
 800690e:	4599      	cmp	r9, r3
 8006910:	bfa8      	it	ge
 8006912:	4699      	movge	r9, r3
 8006914:	f1b9 0f00 	cmp.w	r9, #0
 8006918:	dc33      	bgt.n	8006982 <_printf_float+0x396>
 800691a:	f04f 0800 	mov.w	r8, #0
 800691e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006922:	f104 0b1a 	add.w	fp, r4, #26
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	ebaa 0303 	sub.w	r3, sl, r3
 800692c:	eba3 0309 	sub.w	r3, r3, r9
 8006930:	4543      	cmp	r3, r8
 8006932:	f77f af79 	ble.w	8006828 <_printf_float+0x23c>
 8006936:	2301      	movs	r3, #1
 8006938:	465a      	mov	r2, fp
 800693a:	4631      	mov	r1, r6
 800693c:	4628      	mov	r0, r5
 800693e:	47b8      	blx	r7
 8006940:	3001      	adds	r0, #1
 8006942:	f43f aeae 	beq.w	80066a2 <_printf_float+0xb6>
 8006946:	f108 0801 	add.w	r8, r8, #1
 800694a:	e7ec      	b.n	8006926 <_printf_float+0x33a>
 800694c:	4642      	mov	r2, r8
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	d1c2      	bne.n	80068de <_printf_float+0x2f2>
 8006958:	e6a3      	b.n	80066a2 <_printf_float+0xb6>
 800695a:	2301      	movs	r3, #1
 800695c:	4631      	mov	r1, r6
 800695e:	4628      	mov	r0, r5
 8006960:	9206      	str	r2, [sp, #24]
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f ae9c 	beq.w	80066a2 <_printf_float+0xb6>
 800696a:	9a06      	ldr	r2, [sp, #24]
 800696c:	f10b 0b01 	add.w	fp, fp, #1
 8006970:	e7bb      	b.n	80068ea <_printf_float+0x2fe>
 8006972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	d1c0      	bne.n	8006902 <_printf_float+0x316>
 8006980:	e68f      	b.n	80066a2 <_printf_float+0xb6>
 8006982:	9a06      	ldr	r2, [sp, #24]
 8006984:	464b      	mov	r3, r9
 8006986:	4442      	add	r2, r8
 8006988:	4631      	mov	r1, r6
 800698a:	4628      	mov	r0, r5
 800698c:	47b8      	blx	r7
 800698e:	3001      	adds	r0, #1
 8006990:	d1c3      	bne.n	800691a <_printf_float+0x32e>
 8006992:	e686      	b.n	80066a2 <_printf_float+0xb6>
 8006994:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006998:	f1ba 0f01 	cmp.w	sl, #1
 800699c:	dc01      	bgt.n	80069a2 <_printf_float+0x3b6>
 800699e:	07db      	lsls	r3, r3, #31
 80069a0:	d536      	bpl.n	8006a10 <_printf_float+0x424>
 80069a2:	2301      	movs	r3, #1
 80069a4:	4642      	mov	r2, r8
 80069a6:	4631      	mov	r1, r6
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b8      	blx	r7
 80069ac:	3001      	adds	r0, #1
 80069ae:	f43f ae78 	beq.w	80066a2 <_printf_float+0xb6>
 80069b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f ae70 	beq.w	80066a2 <_printf_float+0xb6>
 80069c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069c6:	2200      	movs	r2, #0
 80069c8:	2300      	movs	r3, #0
 80069ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ce:	f7fa f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 80069d2:	b9c0      	cbnz	r0, 8006a06 <_printf_float+0x41a>
 80069d4:	4653      	mov	r3, sl
 80069d6:	f108 0201 	add.w	r2, r8, #1
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	d10c      	bne.n	80069fe <_printf_float+0x412>
 80069e4:	e65d      	b.n	80066a2 <_printf_float+0xb6>
 80069e6:	2301      	movs	r3, #1
 80069e8:	465a      	mov	r2, fp
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae56 	beq.w	80066a2 <_printf_float+0xb6>
 80069f6:	f108 0801 	add.w	r8, r8, #1
 80069fa:	45d0      	cmp	r8, sl
 80069fc:	dbf3      	blt.n	80069e6 <_printf_float+0x3fa>
 80069fe:	464b      	mov	r3, r9
 8006a00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a04:	e6df      	b.n	80067c6 <_printf_float+0x1da>
 8006a06:	f04f 0800 	mov.w	r8, #0
 8006a0a:	f104 0b1a 	add.w	fp, r4, #26
 8006a0e:	e7f4      	b.n	80069fa <_printf_float+0x40e>
 8006a10:	2301      	movs	r3, #1
 8006a12:	4642      	mov	r2, r8
 8006a14:	e7e1      	b.n	80069da <_printf_float+0x3ee>
 8006a16:	2301      	movs	r3, #1
 8006a18:	464a      	mov	r2, r9
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	f43f ae3e 	beq.w	80066a2 <_printf_float+0xb6>
 8006a26:	f108 0801 	add.w	r8, r8, #1
 8006a2a:	68e3      	ldr	r3, [r4, #12]
 8006a2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a2e:	1a5b      	subs	r3, r3, r1
 8006a30:	4543      	cmp	r3, r8
 8006a32:	dcf0      	bgt.n	8006a16 <_printf_float+0x42a>
 8006a34:	e6fc      	b.n	8006830 <_printf_float+0x244>
 8006a36:	f04f 0800 	mov.w	r8, #0
 8006a3a:	f104 0919 	add.w	r9, r4, #25
 8006a3e:	e7f4      	b.n	8006a2a <_printf_float+0x43e>

08006a40 <_printf_common>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	4616      	mov	r6, r2
 8006a46:	4698      	mov	r8, r3
 8006a48:	688a      	ldr	r2, [r1, #8]
 8006a4a:	690b      	ldr	r3, [r1, #16]
 8006a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bfb8      	it	lt
 8006a54:	4613      	movlt	r3, r2
 8006a56:	6033      	str	r3, [r6, #0]
 8006a58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b10a      	cbz	r2, 8006a66 <_printf_common+0x26>
 8006a62:	3301      	adds	r3, #1
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	0699      	lsls	r1, r3, #26
 8006a6a:	bf42      	ittt	mi
 8006a6c:	6833      	ldrmi	r3, [r6, #0]
 8006a6e:	3302      	addmi	r3, #2
 8006a70:	6033      	strmi	r3, [r6, #0]
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	f015 0506 	ands.w	r5, r5, #6
 8006a78:	d106      	bne.n	8006a88 <_printf_common+0x48>
 8006a7a:	f104 0a19 	add.w	sl, r4, #25
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	6832      	ldr	r2, [r6, #0]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dc26      	bgt.n	8006ad6 <_printf_common+0x96>
 8006a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a8c:	6822      	ldr	r2, [r4, #0]
 8006a8e:	3b00      	subs	r3, #0
 8006a90:	bf18      	it	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	0692      	lsls	r2, r2, #26
 8006a96:	d42b      	bmi.n	8006af0 <_printf_common+0xb0>
 8006a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c8      	blx	r9
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d01e      	beq.n	8006ae4 <_printf_common+0xa4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	6922      	ldr	r2, [r4, #16]
 8006aaa:	f003 0306 	and.w	r3, r3, #6
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	bf02      	ittt	eq
 8006ab2:	68e5      	ldreq	r5, [r4, #12]
 8006ab4:	6833      	ldreq	r3, [r6, #0]
 8006ab6:	1aed      	subeq	r5, r5, r3
 8006ab8:	68a3      	ldr	r3, [r4, #8]
 8006aba:	bf0c      	ite	eq
 8006abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac0:	2500      	movne	r5, #0
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	bfc4      	itt	gt
 8006ac6:	1a9b      	subgt	r3, r3, r2
 8006ac8:	18ed      	addgt	r5, r5, r3
 8006aca:	2600      	movs	r6, #0
 8006acc:	341a      	adds	r4, #26
 8006ace:	42b5      	cmp	r5, r6
 8006ad0:	d11a      	bne.n	8006b08 <_printf_common+0xc8>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e008      	b.n	8006ae8 <_printf_common+0xa8>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4652      	mov	r2, sl
 8006ada:	4641      	mov	r1, r8
 8006adc:	4638      	mov	r0, r7
 8006ade:	47c8      	blx	r9
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d103      	bne.n	8006aec <_printf_common+0xac>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aec:	3501      	adds	r5, #1
 8006aee:	e7c6      	b.n	8006a7e <_printf_common+0x3e>
 8006af0:	18e1      	adds	r1, r4, r3
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	2030      	movs	r0, #48	@ 0x30
 8006af6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006afa:	4422      	add	r2, r4
 8006afc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b04:	3302      	adds	r3, #2
 8006b06:	e7c7      	b.n	8006a98 <_printf_common+0x58>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	4641      	mov	r1, r8
 8006b0e:	4638      	mov	r0, r7
 8006b10:	47c8      	blx	r9
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa4>
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7d9      	b.n	8006ace <_printf_common+0x8e>
	...

08006b1c <_printf_i>:
 8006b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	7e0f      	ldrb	r7, [r1, #24]
 8006b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b24:	2f78      	cmp	r7, #120	@ 0x78
 8006b26:	4691      	mov	r9, r2
 8006b28:	4680      	mov	r8, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b32:	d807      	bhi.n	8006b44 <_printf_i+0x28>
 8006b34:	2f62      	cmp	r7, #98	@ 0x62
 8006b36:	d80a      	bhi.n	8006b4e <_printf_i+0x32>
 8006b38:	2f00      	cmp	r7, #0
 8006b3a:	f000 80d1 	beq.w	8006ce0 <_printf_i+0x1c4>
 8006b3e:	2f58      	cmp	r7, #88	@ 0x58
 8006b40:	f000 80b8 	beq.w	8006cb4 <_printf_i+0x198>
 8006b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b4c:	e03a      	b.n	8006bc4 <_printf_i+0xa8>
 8006b4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b52:	2b15      	cmp	r3, #21
 8006b54:	d8f6      	bhi.n	8006b44 <_printf_i+0x28>
 8006b56:	a101      	add	r1, pc, #4	@ (adr r1, 8006b5c <_printf_i+0x40>)
 8006b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b5c:	08006bb5 	.word	0x08006bb5
 8006b60:	08006bc9 	.word	0x08006bc9
 8006b64:	08006b45 	.word	0x08006b45
 8006b68:	08006b45 	.word	0x08006b45
 8006b6c:	08006b45 	.word	0x08006b45
 8006b70:	08006b45 	.word	0x08006b45
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006b45 	.word	0x08006b45
 8006b7c:	08006b45 	.word	0x08006b45
 8006b80:	08006b45 	.word	0x08006b45
 8006b84:	08006b45 	.word	0x08006b45
 8006b88:	08006cc7 	.word	0x08006cc7
 8006b8c:	08006bf3 	.word	0x08006bf3
 8006b90:	08006c81 	.word	0x08006c81
 8006b94:	08006b45 	.word	0x08006b45
 8006b98:	08006b45 	.word	0x08006b45
 8006b9c:	08006ce9 	.word	0x08006ce9
 8006ba0:	08006b45 	.word	0x08006b45
 8006ba4:	08006bf3 	.word	0x08006bf3
 8006ba8:	08006b45 	.word	0x08006b45
 8006bac:	08006b45 	.word	0x08006b45
 8006bb0:	08006c89 	.word	0x08006c89
 8006bb4:	6833      	ldr	r3, [r6, #0]
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6032      	str	r2, [r6, #0]
 8006bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e09c      	b.n	8006d02 <_printf_i+0x1e6>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	1d19      	adds	r1, r3, #4
 8006bce:	6031      	str	r1, [r6, #0]
 8006bd0:	0606      	lsls	r6, r0, #24
 8006bd2:	d501      	bpl.n	8006bd8 <_printf_i+0xbc>
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	e003      	b.n	8006be0 <_printf_i+0xc4>
 8006bd8:	0645      	lsls	r5, r0, #25
 8006bda:	d5fb      	bpl.n	8006bd4 <_printf_i+0xb8>
 8006bdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	da03      	bge.n	8006bec <_printf_i+0xd0>
 8006be4:	232d      	movs	r3, #45	@ 0x2d
 8006be6:	426d      	negs	r5, r5
 8006be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bec:	4858      	ldr	r0, [pc, #352]	@ (8006d50 <_printf_i+0x234>)
 8006bee:	230a      	movs	r3, #10
 8006bf0:	e011      	b.n	8006c16 <_printf_i+0xfa>
 8006bf2:	6821      	ldr	r1, [r4, #0]
 8006bf4:	6833      	ldr	r3, [r6, #0]
 8006bf6:	0608      	lsls	r0, r1, #24
 8006bf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bfc:	d402      	bmi.n	8006c04 <_printf_i+0xe8>
 8006bfe:	0649      	lsls	r1, r1, #25
 8006c00:	bf48      	it	mi
 8006c02:	b2ad      	uxthmi	r5, r5
 8006c04:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c06:	4852      	ldr	r0, [pc, #328]	@ (8006d50 <_printf_i+0x234>)
 8006c08:	6033      	str	r3, [r6, #0]
 8006c0a:	bf14      	ite	ne
 8006c0c:	230a      	movne	r3, #10
 8006c0e:	2308      	moveq	r3, #8
 8006c10:	2100      	movs	r1, #0
 8006c12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c16:	6866      	ldr	r6, [r4, #4]
 8006c18:	60a6      	str	r6, [r4, #8]
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	db05      	blt.n	8006c2a <_printf_i+0x10e>
 8006c1e:	6821      	ldr	r1, [r4, #0]
 8006c20:	432e      	orrs	r6, r5
 8006c22:	f021 0104 	bic.w	r1, r1, #4
 8006c26:	6021      	str	r1, [r4, #0]
 8006c28:	d04b      	beq.n	8006cc2 <_printf_i+0x1a6>
 8006c2a:	4616      	mov	r6, r2
 8006c2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c30:	fb03 5711 	mls	r7, r3, r1, r5
 8006c34:	5dc7      	ldrb	r7, [r0, r7]
 8006c36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c3a:	462f      	mov	r7, r5
 8006c3c:	42bb      	cmp	r3, r7
 8006c3e:	460d      	mov	r5, r1
 8006c40:	d9f4      	bls.n	8006c2c <_printf_i+0x110>
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d10b      	bne.n	8006c5e <_printf_i+0x142>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	07df      	lsls	r7, r3, #31
 8006c4a:	d508      	bpl.n	8006c5e <_printf_i+0x142>
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	6861      	ldr	r1, [r4, #4]
 8006c50:	4299      	cmp	r1, r3
 8006c52:	bfde      	ittt	le
 8006c54:	2330      	movle	r3, #48	@ 0x30
 8006c56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c5e:	1b92      	subs	r2, r2, r6
 8006c60:	6122      	str	r2, [r4, #16]
 8006c62:	f8cd a000 	str.w	sl, [sp]
 8006c66:	464b      	mov	r3, r9
 8006c68:	aa03      	add	r2, sp, #12
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	f7ff fee7 	bl	8006a40 <_printf_common>
 8006c72:	3001      	adds	r0, #1
 8006c74:	d14a      	bne.n	8006d0c <_printf_i+0x1f0>
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7a:	b004      	add	sp, #16
 8006c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	f043 0320 	orr.w	r3, r3, #32
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	4832      	ldr	r0, [pc, #200]	@ (8006d54 <_printf_i+0x238>)
 8006c8a:	2778      	movs	r7, #120	@ 0x78
 8006c8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	6831      	ldr	r1, [r6, #0]
 8006c94:	061f      	lsls	r7, r3, #24
 8006c96:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c9a:	d402      	bmi.n	8006ca2 <_printf_i+0x186>
 8006c9c:	065f      	lsls	r7, r3, #25
 8006c9e:	bf48      	it	mi
 8006ca0:	b2ad      	uxthmi	r5, r5
 8006ca2:	6031      	str	r1, [r6, #0]
 8006ca4:	07d9      	lsls	r1, r3, #31
 8006ca6:	bf44      	itt	mi
 8006ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cac:	6023      	strmi	r3, [r4, #0]
 8006cae:	b11d      	cbz	r5, 8006cb8 <_printf_i+0x19c>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	e7ad      	b.n	8006c10 <_printf_i+0xf4>
 8006cb4:	4826      	ldr	r0, [pc, #152]	@ (8006d50 <_printf_i+0x234>)
 8006cb6:	e7e9      	b.n	8006c8c <_printf_i+0x170>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	f023 0320 	bic.w	r3, r3, #32
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	e7f6      	b.n	8006cb0 <_printf_i+0x194>
 8006cc2:	4616      	mov	r6, r2
 8006cc4:	e7bd      	b.n	8006c42 <_printf_i+0x126>
 8006cc6:	6833      	ldr	r3, [r6, #0]
 8006cc8:	6825      	ldr	r5, [r4, #0]
 8006cca:	6961      	ldr	r1, [r4, #20]
 8006ccc:	1d18      	adds	r0, r3, #4
 8006cce:	6030      	str	r0, [r6, #0]
 8006cd0:	062e      	lsls	r6, r5, #24
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	d501      	bpl.n	8006cda <_printf_i+0x1be>
 8006cd6:	6019      	str	r1, [r3, #0]
 8006cd8:	e002      	b.n	8006ce0 <_printf_i+0x1c4>
 8006cda:	0668      	lsls	r0, r5, #25
 8006cdc:	d5fb      	bpl.n	8006cd6 <_printf_i+0x1ba>
 8006cde:	8019      	strh	r1, [r3, #0]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6123      	str	r3, [r4, #16]
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	e7bc      	b.n	8006c62 <_printf_i+0x146>
 8006ce8:	6833      	ldr	r3, [r6, #0]
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	6032      	str	r2, [r6, #0]
 8006cee:	681e      	ldr	r6, [r3, #0]
 8006cf0:	6862      	ldr	r2, [r4, #4]
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7f9 fa6b 	bl	80001d0 <memchr>
 8006cfa:	b108      	cbz	r0, 8006d00 <_printf_i+0x1e4>
 8006cfc:	1b80      	subs	r0, r0, r6
 8006cfe:	6060      	str	r0, [r4, #4]
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2300      	movs	r3, #0
 8006d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d0a:	e7aa      	b.n	8006c62 <_printf_i+0x146>
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	4632      	mov	r2, r6
 8006d10:	4649      	mov	r1, r9
 8006d12:	4640      	mov	r0, r8
 8006d14:	47d0      	blx	sl
 8006d16:	3001      	adds	r0, #1
 8006d18:	d0ad      	beq.n	8006c76 <_printf_i+0x15a>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	079b      	lsls	r3, r3, #30
 8006d1e:	d413      	bmi.n	8006d48 <_printf_i+0x22c>
 8006d20:	68e0      	ldr	r0, [r4, #12]
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	4298      	cmp	r0, r3
 8006d26:	bfb8      	it	lt
 8006d28:	4618      	movlt	r0, r3
 8006d2a:	e7a6      	b.n	8006c7a <_printf_i+0x15e>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	4632      	mov	r2, r6
 8006d30:	4649      	mov	r1, r9
 8006d32:	4640      	mov	r0, r8
 8006d34:	47d0      	blx	sl
 8006d36:	3001      	adds	r0, #1
 8006d38:	d09d      	beq.n	8006c76 <_printf_i+0x15a>
 8006d3a:	3501      	adds	r5, #1
 8006d3c:	68e3      	ldr	r3, [r4, #12]
 8006d3e:	9903      	ldr	r1, [sp, #12]
 8006d40:	1a5b      	subs	r3, r3, r1
 8006d42:	42ab      	cmp	r3, r5
 8006d44:	dcf2      	bgt.n	8006d2c <_printf_i+0x210>
 8006d46:	e7eb      	b.n	8006d20 <_printf_i+0x204>
 8006d48:	2500      	movs	r5, #0
 8006d4a:	f104 0619 	add.w	r6, r4, #25
 8006d4e:	e7f5      	b.n	8006d3c <_printf_i+0x220>
 8006d50:	08008e9e 	.word	0x08008e9e
 8006d54:	08008eaf 	.word	0x08008eaf

08006d58 <std>:
 8006d58:	2300      	movs	r3, #0
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d66:	6083      	str	r3, [r0, #8]
 8006d68:	8181      	strh	r1, [r0, #12]
 8006d6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d6c:	81c2      	strh	r2, [r0, #14]
 8006d6e:	6183      	str	r3, [r0, #24]
 8006d70:	4619      	mov	r1, r3
 8006d72:	2208      	movs	r2, #8
 8006d74:	305c      	adds	r0, #92	@ 0x5c
 8006d76:	f000 f8f4 	bl	8006f62 <memset>
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006db0 <std+0x58>)
 8006d7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006db4 <std+0x5c>)
 8006d80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d82:	4b0d      	ldr	r3, [pc, #52]	@ (8006db8 <std+0x60>)
 8006d84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d86:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <std+0x64>)
 8006d88:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc0 <std+0x68>)
 8006d8c:	6224      	str	r4, [r4, #32]
 8006d8e:	429c      	cmp	r4, r3
 8006d90:	d006      	beq.n	8006da0 <std+0x48>
 8006d92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d96:	4294      	cmp	r4, r2
 8006d98:	d002      	beq.n	8006da0 <std+0x48>
 8006d9a:	33d0      	adds	r3, #208	@ 0xd0
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d105      	bne.n	8006dac <std+0x54>
 8006da0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da8:	f000 b958 	b.w	800705c <__retarget_lock_init_recursive>
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	bf00      	nop
 8006db0:	08006edd 	.word	0x08006edd
 8006db4:	08006eff 	.word	0x08006eff
 8006db8:	08006f37 	.word	0x08006f37
 8006dbc:	08006f5b 	.word	0x08006f5b
 8006dc0:	20000544 	.word	0x20000544

08006dc4 <stdio_exit_handler>:
 8006dc4:	4a02      	ldr	r2, [pc, #8]	@ (8006dd0 <stdio_exit_handler+0xc>)
 8006dc6:	4903      	ldr	r1, [pc, #12]	@ (8006dd4 <stdio_exit_handler+0x10>)
 8006dc8:	4803      	ldr	r0, [pc, #12]	@ (8006dd8 <stdio_exit_handler+0x14>)
 8006dca:	f000 b869 	b.w	8006ea0 <_fwalk_sglue>
 8006dce:	bf00      	nop
 8006dd0:	20000010 	.word	0x20000010
 8006dd4:	0800872d 	.word	0x0800872d
 8006dd8:	20000020 	.word	0x20000020

08006ddc <cleanup_stdio>:
 8006ddc:	6841      	ldr	r1, [r0, #4]
 8006dde:	4b0c      	ldr	r3, [pc, #48]	@ (8006e10 <cleanup_stdio+0x34>)
 8006de0:	4299      	cmp	r1, r3
 8006de2:	b510      	push	{r4, lr}
 8006de4:	4604      	mov	r4, r0
 8006de6:	d001      	beq.n	8006dec <cleanup_stdio+0x10>
 8006de8:	f001 fca0 	bl	800872c <_fflush_r>
 8006dec:	68a1      	ldr	r1, [r4, #8]
 8006dee:	4b09      	ldr	r3, [pc, #36]	@ (8006e14 <cleanup_stdio+0x38>)
 8006df0:	4299      	cmp	r1, r3
 8006df2:	d002      	beq.n	8006dfa <cleanup_stdio+0x1e>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f001 fc99 	bl	800872c <_fflush_r>
 8006dfa:	68e1      	ldr	r1, [r4, #12]
 8006dfc:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <cleanup_stdio+0x3c>)
 8006dfe:	4299      	cmp	r1, r3
 8006e00:	d004      	beq.n	8006e0c <cleanup_stdio+0x30>
 8006e02:	4620      	mov	r0, r4
 8006e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e08:	f001 bc90 	b.w	800872c <_fflush_r>
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000544 	.word	0x20000544
 8006e14:	200005ac 	.word	0x200005ac
 8006e18:	20000614 	.word	0x20000614

08006e1c <global_stdio_init.part.0>:
 8006e1c:	b510      	push	{r4, lr}
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <global_stdio_init.part.0+0x30>)
 8006e20:	4c0b      	ldr	r4, [pc, #44]	@ (8006e50 <global_stdio_init.part.0+0x34>)
 8006e22:	4a0c      	ldr	r2, [pc, #48]	@ (8006e54 <global_stdio_init.part.0+0x38>)
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	4620      	mov	r0, r4
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2104      	movs	r1, #4
 8006e2c:	f7ff ff94 	bl	8006d58 <std>
 8006e30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e34:	2201      	movs	r2, #1
 8006e36:	2109      	movs	r1, #9
 8006e38:	f7ff ff8e 	bl	8006d58 <std>
 8006e3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e40:	2202      	movs	r2, #2
 8006e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e46:	2112      	movs	r1, #18
 8006e48:	f7ff bf86 	b.w	8006d58 <std>
 8006e4c:	2000067c 	.word	0x2000067c
 8006e50:	20000544 	.word	0x20000544
 8006e54:	08006dc5 	.word	0x08006dc5

08006e58 <__sfp_lock_acquire>:
 8006e58:	4801      	ldr	r0, [pc, #4]	@ (8006e60 <__sfp_lock_acquire+0x8>)
 8006e5a:	f000 b900 	b.w	800705e <__retarget_lock_acquire_recursive>
 8006e5e:	bf00      	nop
 8006e60:	20000685 	.word	0x20000685

08006e64 <__sfp_lock_release>:
 8006e64:	4801      	ldr	r0, [pc, #4]	@ (8006e6c <__sfp_lock_release+0x8>)
 8006e66:	f000 b8fb 	b.w	8007060 <__retarget_lock_release_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	20000685 	.word	0x20000685

08006e70 <__sinit>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	4604      	mov	r4, r0
 8006e74:	f7ff fff0 	bl	8006e58 <__sfp_lock_acquire>
 8006e78:	6a23      	ldr	r3, [r4, #32]
 8006e7a:	b11b      	cbz	r3, 8006e84 <__sinit+0x14>
 8006e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e80:	f7ff bff0 	b.w	8006e64 <__sfp_lock_release>
 8006e84:	4b04      	ldr	r3, [pc, #16]	@ (8006e98 <__sinit+0x28>)
 8006e86:	6223      	str	r3, [r4, #32]
 8006e88:	4b04      	ldr	r3, [pc, #16]	@ (8006e9c <__sinit+0x2c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1f5      	bne.n	8006e7c <__sinit+0xc>
 8006e90:	f7ff ffc4 	bl	8006e1c <global_stdio_init.part.0>
 8006e94:	e7f2      	b.n	8006e7c <__sinit+0xc>
 8006e96:	bf00      	nop
 8006e98:	08006ddd 	.word	0x08006ddd
 8006e9c:	2000067c 	.word	0x2000067c

08006ea0 <_fwalk_sglue>:
 8006ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	4688      	mov	r8, r1
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	2600      	movs	r6, #0
 8006eac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8006eb4:	d505      	bpl.n	8006ec2 <_fwalk_sglue+0x22>
 8006eb6:	6824      	ldr	r4, [r4, #0]
 8006eb8:	2c00      	cmp	r4, #0
 8006eba:	d1f7      	bne.n	8006eac <_fwalk_sglue+0xc>
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d907      	bls.n	8006ed8 <_fwalk_sglue+0x38>
 8006ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	d003      	beq.n	8006ed8 <_fwalk_sglue+0x38>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	47c0      	blx	r8
 8006ed6:	4306      	orrs	r6, r0
 8006ed8:	3568      	adds	r5, #104	@ 0x68
 8006eda:	e7e9      	b.n	8006eb0 <_fwalk_sglue+0x10>

08006edc <__sread>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	460c      	mov	r4, r1
 8006ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee4:	f000 f86c 	bl	8006fc0 <_read_r>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	bfab      	itete	ge
 8006eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006eee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef0:	181b      	addge	r3, r3, r0
 8006ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ef6:	bfac      	ite	ge
 8006ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006efa:	81a3      	strhlt	r3, [r4, #12]
 8006efc:	bd10      	pop	{r4, pc}

08006efe <__swrite>:
 8006efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	461f      	mov	r7, r3
 8006f04:	898b      	ldrh	r3, [r1, #12]
 8006f06:	05db      	lsls	r3, r3, #23
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	d505      	bpl.n	8006f1c <__swrite+0x1e>
 8006f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f14:	2302      	movs	r3, #2
 8006f16:	2200      	movs	r2, #0
 8006f18:	f000 f840 	bl	8006f9c <_lseek_r>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	4632      	mov	r2, r6
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f32:	f000 b857 	b.w	8006fe4 <_write_r>

08006f36 <__sseek>:
 8006f36:	b510      	push	{r4, lr}
 8006f38:	460c      	mov	r4, r1
 8006f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3e:	f000 f82d 	bl	8006f9c <_lseek_r>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	bf15      	itete	ne
 8006f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f52:	81a3      	strheq	r3, [r4, #12]
 8006f54:	bf18      	it	ne
 8006f56:	81a3      	strhne	r3, [r4, #12]
 8006f58:	bd10      	pop	{r4, pc}

08006f5a <__sclose>:
 8006f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5e:	f000 b80d 	b.w	8006f7c <_close_r>

08006f62 <memset>:
 8006f62:	4402      	add	r2, r0
 8006f64:	4603      	mov	r3, r0
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d100      	bne.n	8006f6c <memset+0xa>
 8006f6a:	4770      	bx	lr
 8006f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f70:	e7f9      	b.n	8006f66 <memset+0x4>
	...

08006f74 <_localeconv_r>:
 8006f74:	4800      	ldr	r0, [pc, #0]	@ (8006f78 <_localeconv_r+0x4>)
 8006f76:	4770      	bx	lr
 8006f78:	2000015c 	.word	0x2000015c

08006f7c <_close_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4d06      	ldr	r5, [pc, #24]	@ (8006f98 <_close_r+0x1c>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	f7fb fbc2 	bl	8002710 <_close>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_close_r+0x1a>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_close_r+0x1a>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	20000680 	.word	0x20000680

08006f9c <_lseek_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d07      	ldr	r5, [pc, #28]	@ (8006fbc <_lseek_r+0x20>)
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	4608      	mov	r0, r1
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	602a      	str	r2, [r5, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f7fb fbd7 	bl	800275e <_lseek>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_lseek_r+0x1e>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_lseek_r+0x1e>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	20000680 	.word	0x20000680

08006fc0 <_read_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d07      	ldr	r5, [pc, #28]	@ (8006fe0 <_read_r+0x20>)
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	4608      	mov	r0, r1
 8006fc8:	4611      	mov	r1, r2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	602a      	str	r2, [r5, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f7fb fb65 	bl	800269e <_read>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_read_r+0x1e>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_read_r+0x1e>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	20000680 	.word	0x20000680

08006fe4 <_write_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	@ (8007004 <_write_r+0x20>)
 8006fe8:	4604      	mov	r4, r0
 8006fea:	4608      	mov	r0, r1
 8006fec:	4611      	mov	r1, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	602a      	str	r2, [r5, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f7fb fb70 	bl	80026d8 <_write>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_write_r+0x1e>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_write_r+0x1e>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	20000680 	.word	0x20000680

08007008 <__errno>:
 8007008:	4b01      	ldr	r3, [pc, #4]	@ (8007010 <__errno+0x8>)
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	2000001c 	.word	0x2000001c

08007014 <__libc_init_array>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	4d0d      	ldr	r5, [pc, #52]	@ (800704c <__libc_init_array+0x38>)
 8007018:	4c0d      	ldr	r4, [pc, #52]	@ (8007050 <__libc_init_array+0x3c>)
 800701a:	1b64      	subs	r4, r4, r5
 800701c:	10a4      	asrs	r4, r4, #2
 800701e:	2600      	movs	r6, #0
 8007020:	42a6      	cmp	r6, r4
 8007022:	d109      	bne.n	8007038 <__libc_init_array+0x24>
 8007024:	4d0b      	ldr	r5, [pc, #44]	@ (8007054 <__libc_init_array+0x40>)
 8007026:	4c0c      	ldr	r4, [pc, #48]	@ (8007058 <__libc_init_array+0x44>)
 8007028:	f001 fec0 	bl	8008dac <_init>
 800702c:	1b64      	subs	r4, r4, r5
 800702e:	10a4      	asrs	r4, r4, #2
 8007030:	2600      	movs	r6, #0
 8007032:	42a6      	cmp	r6, r4
 8007034:	d105      	bne.n	8007042 <__libc_init_array+0x2e>
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	f855 3b04 	ldr.w	r3, [r5], #4
 800703c:	4798      	blx	r3
 800703e:	3601      	adds	r6, #1
 8007040:	e7ee      	b.n	8007020 <__libc_init_array+0xc>
 8007042:	f855 3b04 	ldr.w	r3, [r5], #4
 8007046:	4798      	blx	r3
 8007048:	3601      	adds	r6, #1
 800704a:	e7f2      	b.n	8007032 <__libc_init_array+0x1e>
 800704c:	0800920c 	.word	0x0800920c
 8007050:	0800920c 	.word	0x0800920c
 8007054:	0800920c 	.word	0x0800920c
 8007058:	08009210 	.word	0x08009210

0800705c <__retarget_lock_init_recursive>:
 800705c:	4770      	bx	lr

0800705e <__retarget_lock_acquire_recursive>:
 800705e:	4770      	bx	lr

08007060 <__retarget_lock_release_recursive>:
 8007060:	4770      	bx	lr

08007062 <memcpy>:
 8007062:	440a      	add	r2, r1
 8007064:	4291      	cmp	r1, r2
 8007066:	f100 33ff 	add.w	r3, r0, #4294967295
 800706a:	d100      	bne.n	800706e <memcpy+0xc>
 800706c:	4770      	bx	lr
 800706e:	b510      	push	{r4, lr}
 8007070:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007074:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007078:	4291      	cmp	r1, r2
 800707a:	d1f9      	bne.n	8007070 <memcpy+0xe>
 800707c:	bd10      	pop	{r4, pc}

0800707e <quorem>:
 800707e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007082:	6903      	ldr	r3, [r0, #16]
 8007084:	690c      	ldr	r4, [r1, #16]
 8007086:	42a3      	cmp	r3, r4
 8007088:	4607      	mov	r7, r0
 800708a:	db7e      	blt.n	800718a <quorem+0x10c>
 800708c:	3c01      	subs	r4, #1
 800708e:	f101 0814 	add.w	r8, r1, #20
 8007092:	00a3      	lsls	r3, r4, #2
 8007094:	f100 0514 	add.w	r5, r0, #20
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070a8:	3301      	adds	r3, #1
 80070aa:	429a      	cmp	r2, r3
 80070ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80070b4:	d32e      	bcc.n	8007114 <quorem+0x96>
 80070b6:	f04f 0a00 	mov.w	sl, #0
 80070ba:	46c4      	mov	ip, r8
 80070bc:	46ae      	mov	lr, r5
 80070be:	46d3      	mov	fp, sl
 80070c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070c4:	b298      	uxth	r0, r3
 80070c6:	fb06 a000 	mla	r0, r6, r0, sl
 80070ca:	0c02      	lsrs	r2, r0, #16
 80070cc:	0c1b      	lsrs	r3, r3, #16
 80070ce:	fb06 2303 	mla	r3, r6, r3, r2
 80070d2:	f8de 2000 	ldr.w	r2, [lr]
 80070d6:	b280      	uxth	r0, r0
 80070d8:	b292      	uxth	r2, r2
 80070da:	1a12      	subs	r2, r2, r0
 80070dc:	445a      	add	r2, fp
 80070de:	f8de 0000 	ldr.w	r0, [lr]
 80070e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80070ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80070f0:	b292      	uxth	r2, r2
 80070f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070f6:	45e1      	cmp	r9, ip
 80070f8:	f84e 2b04 	str.w	r2, [lr], #4
 80070fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007100:	d2de      	bcs.n	80070c0 <quorem+0x42>
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	58eb      	ldr	r3, [r5, r3]
 8007106:	b92b      	cbnz	r3, 8007114 <quorem+0x96>
 8007108:	9b01      	ldr	r3, [sp, #4]
 800710a:	3b04      	subs	r3, #4
 800710c:	429d      	cmp	r5, r3
 800710e:	461a      	mov	r2, r3
 8007110:	d32f      	bcc.n	8007172 <quorem+0xf4>
 8007112:	613c      	str	r4, [r7, #16]
 8007114:	4638      	mov	r0, r7
 8007116:	f001 f97d 	bl	8008414 <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	db25      	blt.n	800716a <quorem+0xec>
 800711e:	4629      	mov	r1, r5
 8007120:	2000      	movs	r0, #0
 8007122:	f858 2b04 	ldr.w	r2, [r8], #4
 8007126:	f8d1 c000 	ldr.w	ip, [r1]
 800712a:	fa1f fe82 	uxth.w	lr, r2
 800712e:	fa1f f38c 	uxth.w	r3, ip
 8007132:	eba3 030e 	sub.w	r3, r3, lr
 8007136:	4403      	add	r3, r0
 8007138:	0c12      	lsrs	r2, r2, #16
 800713a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800713e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007142:	b29b      	uxth	r3, r3
 8007144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007148:	45c1      	cmp	r9, r8
 800714a:	f841 3b04 	str.w	r3, [r1], #4
 800714e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007152:	d2e6      	bcs.n	8007122 <quorem+0xa4>
 8007154:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800715c:	b922      	cbnz	r2, 8007168 <quorem+0xea>
 800715e:	3b04      	subs	r3, #4
 8007160:	429d      	cmp	r5, r3
 8007162:	461a      	mov	r2, r3
 8007164:	d30b      	bcc.n	800717e <quorem+0x100>
 8007166:	613c      	str	r4, [r7, #16]
 8007168:	3601      	adds	r6, #1
 800716a:	4630      	mov	r0, r6
 800716c:	b003      	add	sp, #12
 800716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	3b04      	subs	r3, #4
 8007176:	2a00      	cmp	r2, #0
 8007178:	d1cb      	bne.n	8007112 <quorem+0x94>
 800717a:	3c01      	subs	r4, #1
 800717c:	e7c6      	b.n	800710c <quorem+0x8e>
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	3b04      	subs	r3, #4
 8007182:	2a00      	cmp	r2, #0
 8007184:	d1ef      	bne.n	8007166 <quorem+0xe8>
 8007186:	3c01      	subs	r4, #1
 8007188:	e7ea      	b.n	8007160 <quorem+0xe2>
 800718a:	2000      	movs	r0, #0
 800718c:	e7ee      	b.n	800716c <quorem+0xee>
	...

08007190 <_dtoa_r>:
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	69c7      	ldr	r7, [r0, #28]
 8007196:	b097      	sub	sp, #92	@ 0x5c
 8007198:	ed8d 0b04 	vstr	d0, [sp, #16]
 800719c:	ec55 4b10 	vmov	r4, r5, d0
 80071a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80071a2:	9107      	str	r1, [sp, #28]
 80071a4:	4681      	mov	r9, r0
 80071a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80071a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80071aa:	b97f      	cbnz	r7, 80071cc <_dtoa_r+0x3c>
 80071ac:	2010      	movs	r0, #16
 80071ae:	f000 fe09 	bl	8007dc4 <malloc>
 80071b2:	4602      	mov	r2, r0
 80071b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80071b8:	b920      	cbnz	r0, 80071c4 <_dtoa_r+0x34>
 80071ba:	4ba9      	ldr	r3, [pc, #676]	@ (8007460 <_dtoa_r+0x2d0>)
 80071bc:	21ef      	movs	r1, #239	@ 0xef
 80071be:	48a9      	ldr	r0, [pc, #676]	@ (8007464 <_dtoa_r+0x2d4>)
 80071c0:	f001 faec 	bl	800879c <__assert_func>
 80071c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071c8:	6007      	str	r7, [r0, #0]
 80071ca:	60c7      	str	r7, [r0, #12]
 80071cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071d0:	6819      	ldr	r1, [r3, #0]
 80071d2:	b159      	cbz	r1, 80071ec <_dtoa_r+0x5c>
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	604a      	str	r2, [r1, #4]
 80071d8:	2301      	movs	r3, #1
 80071da:	4093      	lsls	r3, r2
 80071dc:	608b      	str	r3, [r1, #8]
 80071de:	4648      	mov	r0, r9
 80071e0:	f000 fee6 	bl	8007fb0 <_Bfree>
 80071e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	1e2b      	subs	r3, r5, #0
 80071ee:	bfb9      	ittee	lt
 80071f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80071f4:	9305      	strlt	r3, [sp, #20]
 80071f6:	2300      	movge	r3, #0
 80071f8:	6033      	strge	r3, [r6, #0]
 80071fa:	9f05      	ldr	r7, [sp, #20]
 80071fc:	4b9a      	ldr	r3, [pc, #616]	@ (8007468 <_dtoa_r+0x2d8>)
 80071fe:	bfbc      	itt	lt
 8007200:	2201      	movlt	r2, #1
 8007202:	6032      	strlt	r2, [r6, #0]
 8007204:	43bb      	bics	r3, r7
 8007206:	d112      	bne.n	800722e <_dtoa_r+0x9e>
 8007208:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800720a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007214:	4323      	orrs	r3, r4
 8007216:	f000 855a 	beq.w	8007cce <_dtoa_r+0xb3e>
 800721a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800721c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800747c <_dtoa_r+0x2ec>
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 855c 	beq.w	8007cde <_dtoa_r+0xb4e>
 8007226:	f10a 0303 	add.w	r3, sl, #3
 800722a:	f000 bd56 	b.w	8007cda <_dtoa_r+0xb4a>
 800722e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007232:	2200      	movs	r2, #0
 8007234:	ec51 0b17 	vmov	r0, r1, d7
 8007238:	2300      	movs	r3, #0
 800723a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800723e:	f7f9 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 8007242:	4680      	mov	r8, r0
 8007244:	b158      	cbz	r0, 800725e <_dtoa_r+0xce>
 8007246:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007248:	2301      	movs	r3, #1
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800724e:	b113      	cbz	r3, 8007256 <_dtoa_r+0xc6>
 8007250:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007252:	4b86      	ldr	r3, [pc, #536]	@ (800746c <_dtoa_r+0x2dc>)
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007480 <_dtoa_r+0x2f0>
 800725a:	f000 bd40 	b.w	8007cde <_dtoa_r+0xb4e>
 800725e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007262:	aa14      	add	r2, sp, #80	@ 0x50
 8007264:	a915      	add	r1, sp, #84	@ 0x54
 8007266:	4648      	mov	r0, r9
 8007268:	f001 f984 	bl	8008574 <__d2b>
 800726c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007270:	9002      	str	r0, [sp, #8]
 8007272:	2e00      	cmp	r6, #0
 8007274:	d078      	beq.n	8007368 <_dtoa_r+0x1d8>
 8007276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007278:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800727c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007284:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007288:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800728c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007290:	4619      	mov	r1, r3
 8007292:	2200      	movs	r2, #0
 8007294:	4b76      	ldr	r3, [pc, #472]	@ (8007470 <_dtoa_r+0x2e0>)
 8007296:	f7f8 fff7 	bl	8000288 <__aeabi_dsub>
 800729a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007448 <_dtoa_r+0x2b8>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f7f9 f9aa 	bl	80005f8 <__aeabi_dmul>
 80072a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007450 <_dtoa_r+0x2c0>)
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	f7f8 ffef 	bl	800028c <__adddf3>
 80072ae:	4604      	mov	r4, r0
 80072b0:	4630      	mov	r0, r6
 80072b2:	460d      	mov	r5, r1
 80072b4:	f7f9 f936 	bl	8000524 <__aeabi_i2d>
 80072b8:	a367      	add	r3, pc, #412	@ (adr r3, 8007458 <_dtoa_r+0x2c8>)
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f7f9 f99b 	bl	80005f8 <__aeabi_dmul>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f8 ffdf 	bl	800028c <__adddf3>
 80072ce:	4604      	mov	r4, r0
 80072d0:	460d      	mov	r5, r1
 80072d2:	f7f9 fc41 	bl	8000b58 <__aeabi_d2iz>
 80072d6:	2200      	movs	r2, #0
 80072d8:	4607      	mov	r7, r0
 80072da:	2300      	movs	r3, #0
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f9 fbfc 	bl	8000adc <__aeabi_dcmplt>
 80072e4:	b140      	cbz	r0, 80072f8 <_dtoa_r+0x168>
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7f9 f91c 	bl	8000524 <__aeabi_i2d>
 80072ec:	4622      	mov	r2, r4
 80072ee:	462b      	mov	r3, r5
 80072f0:	f7f9 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80072f4:	b900      	cbnz	r0, 80072f8 <_dtoa_r+0x168>
 80072f6:	3f01      	subs	r7, #1
 80072f8:	2f16      	cmp	r7, #22
 80072fa:	d852      	bhi.n	80073a2 <_dtoa_r+0x212>
 80072fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007474 <_dtoa_r+0x2e4>)
 80072fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800730a:	f7f9 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800730e:	2800      	cmp	r0, #0
 8007310:	d049      	beq.n	80073a6 <_dtoa_r+0x216>
 8007312:	3f01      	subs	r7, #1
 8007314:	2300      	movs	r3, #0
 8007316:	9310      	str	r3, [sp, #64]	@ 0x40
 8007318:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800731a:	1b9b      	subs	r3, r3, r6
 800731c:	1e5a      	subs	r2, r3, #1
 800731e:	bf45      	ittet	mi
 8007320:	f1c3 0301 	rsbmi	r3, r3, #1
 8007324:	9300      	strmi	r3, [sp, #0]
 8007326:	2300      	movpl	r3, #0
 8007328:	2300      	movmi	r3, #0
 800732a:	9206      	str	r2, [sp, #24]
 800732c:	bf54      	ite	pl
 800732e:	9300      	strpl	r3, [sp, #0]
 8007330:	9306      	strmi	r3, [sp, #24]
 8007332:	2f00      	cmp	r7, #0
 8007334:	db39      	blt.n	80073aa <_dtoa_r+0x21a>
 8007336:	9b06      	ldr	r3, [sp, #24]
 8007338:	970d      	str	r7, [sp, #52]	@ 0x34
 800733a:	443b      	add	r3, r7
 800733c:	9306      	str	r3, [sp, #24]
 800733e:	2300      	movs	r3, #0
 8007340:	9308      	str	r3, [sp, #32]
 8007342:	9b07      	ldr	r3, [sp, #28]
 8007344:	2b09      	cmp	r3, #9
 8007346:	d863      	bhi.n	8007410 <_dtoa_r+0x280>
 8007348:	2b05      	cmp	r3, #5
 800734a:	bfc4      	itt	gt
 800734c:	3b04      	subgt	r3, #4
 800734e:	9307      	strgt	r3, [sp, #28]
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	f1a3 0302 	sub.w	r3, r3, #2
 8007356:	bfcc      	ite	gt
 8007358:	2400      	movgt	r4, #0
 800735a:	2401      	movle	r4, #1
 800735c:	2b03      	cmp	r3, #3
 800735e:	d863      	bhi.n	8007428 <_dtoa_r+0x298>
 8007360:	e8df f003 	tbb	[pc, r3]
 8007364:	2b375452 	.word	0x2b375452
 8007368:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800736c:	441e      	add	r6, r3
 800736e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007372:	2b20      	cmp	r3, #32
 8007374:	bfc1      	itttt	gt
 8007376:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800737a:	409f      	lslgt	r7, r3
 800737c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007380:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007384:	bfd6      	itet	le
 8007386:	f1c3 0320 	rsble	r3, r3, #32
 800738a:	ea47 0003 	orrgt.w	r0, r7, r3
 800738e:	fa04 f003 	lslle.w	r0, r4, r3
 8007392:	f7f9 f8b7 	bl	8000504 <__aeabi_ui2d>
 8007396:	2201      	movs	r2, #1
 8007398:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800739c:	3e01      	subs	r6, #1
 800739e:	9212      	str	r2, [sp, #72]	@ 0x48
 80073a0:	e776      	b.n	8007290 <_dtoa_r+0x100>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7b7      	b.n	8007316 <_dtoa_r+0x186>
 80073a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80073a8:	e7b6      	b.n	8007318 <_dtoa_r+0x188>
 80073aa:	9b00      	ldr	r3, [sp, #0]
 80073ac:	1bdb      	subs	r3, r3, r7
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	427b      	negs	r3, r7
 80073b2:	9308      	str	r3, [sp, #32]
 80073b4:	2300      	movs	r3, #0
 80073b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80073b8:	e7c3      	b.n	8007342 <_dtoa_r+0x1b2>
 80073ba:	2301      	movs	r3, #1
 80073bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073c0:	eb07 0b03 	add.w	fp, r7, r3
 80073c4:	f10b 0301 	add.w	r3, fp, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	9303      	str	r3, [sp, #12]
 80073cc:	bfb8      	it	lt
 80073ce:	2301      	movlt	r3, #1
 80073d0:	e006      	b.n	80073e0 <_dtoa_r+0x250>
 80073d2:	2301      	movs	r3, #1
 80073d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073d8:	2b00      	cmp	r3, #0
 80073da:	dd28      	ble.n	800742e <_dtoa_r+0x29e>
 80073dc:	469b      	mov	fp, r3
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80073e4:	2100      	movs	r1, #0
 80073e6:	2204      	movs	r2, #4
 80073e8:	f102 0514 	add.w	r5, r2, #20
 80073ec:	429d      	cmp	r5, r3
 80073ee:	d926      	bls.n	800743e <_dtoa_r+0x2ae>
 80073f0:	6041      	str	r1, [r0, #4]
 80073f2:	4648      	mov	r0, r9
 80073f4:	f000 fd9c 	bl	8007f30 <_Balloc>
 80073f8:	4682      	mov	sl, r0
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d142      	bne.n	8007484 <_dtoa_r+0x2f4>
 80073fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007478 <_dtoa_r+0x2e8>)
 8007400:	4602      	mov	r2, r0
 8007402:	f240 11af 	movw	r1, #431	@ 0x1af
 8007406:	e6da      	b.n	80071be <_dtoa_r+0x2e>
 8007408:	2300      	movs	r3, #0
 800740a:	e7e3      	b.n	80073d4 <_dtoa_r+0x244>
 800740c:	2300      	movs	r3, #0
 800740e:	e7d5      	b.n	80073bc <_dtoa_r+0x22c>
 8007410:	2401      	movs	r4, #1
 8007412:	2300      	movs	r3, #0
 8007414:	9307      	str	r3, [sp, #28]
 8007416:	9409      	str	r4, [sp, #36]	@ 0x24
 8007418:	f04f 3bff 	mov.w	fp, #4294967295
 800741c:	2200      	movs	r2, #0
 800741e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007422:	2312      	movs	r3, #18
 8007424:	920c      	str	r2, [sp, #48]	@ 0x30
 8007426:	e7db      	b.n	80073e0 <_dtoa_r+0x250>
 8007428:	2301      	movs	r3, #1
 800742a:	9309      	str	r3, [sp, #36]	@ 0x24
 800742c:	e7f4      	b.n	8007418 <_dtoa_r+0x288>
 800742e:	f04f 0b01 	mov.w	fp, #1
 8007432:	f8cd b00c 	str.w	fp, [sp, #12]
 8007436:	465b      	mov	r3, fp
 8007438:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800743c:	e7d0      	b.n	80073e0 <_dtoa_r+0x250>
 800743e:	3101      	adds	r1, #1
 8007440:	0052      	lsls	r2, r2, #1
 8007442:	e7d1      	b.n	80073e8 <_dtoa_r+0x258>
 8007444:	f3af 8000 	nop.w
 8007448:	636f4361 	.word	0x636f4361
 800744c:	3fd287a7 	.word	0x3fd287a7
 8007450:	8b60c8b3 	.word	0x8b60c8b3
 8007454:	3fc68a28 	.word	0x3fc68a28
 8007458:	509f79fb 	.word	0x509f79fb
 800745c:	3fd34413 	.word	0x3fd34413
 8007460:	08008ecd 	.word	0x08008ecd
 8007464:	08008ee4 	.word	0x08008ee4
 8007468:	7ff00000 	.word	0x7ff00000
 800746c:	08008e9d 	.word	0x08008e9d
 8007470:	3ff80000 	.word	0x3ff80000
 8007474:	08009038 	.word	0x08009038
 8007478:	08008f3c 	.word	0x08008f3c
 800747c:	08008ec9 	.word	0x08008ec9
 8007480:	08008e9c 	.word	0x08008e9c
 8007484:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007488:	6018      	str	r0, [r3, #0]
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	2b0e      	cmp	r3, #14
 800748e:	f200 80a1 	bhi.w	80075d4 <_dtoa_r+0x444>
 8007492:	2c00      	cmp	r4, #0
 8007494:	f000 809e 	beq.w	80075d4 <_dtoa_r+0x444>
 8007498:	2f00      	cmp	r7, #0
 800749a:	dd33      	ble.n	8007504 <_dtoa_r+0x374>
 800749c:	4b9c      	ldr	r3, [pc, #624]	@ (8007710 <_dtoa_r+0x580>)
 800749e:	f007 020f 	and.w	r2, r7, #15
 80074a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a6:	ed93 7b00 	vldr	d7, [r3]
 80074aa:	05f8      	lsls	r0, r7, #23
 80074ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80074b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074b4:	d516      	bpl.n	80074e4 <_dtoa_r+0x354>
 80074b6:	4b97      	ldr	r3, [pc, #604]	@ (8007714 <_dtoa_r+0x584>)
 80074b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074c0:	f7f9 f9c4 	bl	800084c <__aeabi_ddiv>
 80074c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074c8:	f004 040f 	and.w	r4, r4, #15
 80074cc:	2603      	movs	r6, #3
 80074ce:	4d91      	ldr	r5, [pc, #580]	@ (8007714 <_dtoa_r+0x584>)
 80074d0:	b954      	cbnz	r4, 80074e8 <_dtoa_r+0x358>
 80074d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80074d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074da:	f7f9 f9b7 	bl	800084c <__aeabi_ddiv>
 80074de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074e2:	e028      	b.n	8007536 <_dtoa_r+0x3a6>
 80074e4:	2602      	movs	r6, #2
 80074e6:	e7f2      	b.n	80074ce <_dtoa_r+0x33e>
 80074e8:	07e1      	lsls	r1, r4, #31
 80074ea:	d508      	bpl.n	80074fe <_dtoa_r+0x36e>
 80074ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80074f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074f4:	f7f9 f880 	bl	80005f8 <__aeabi_dmul>
 80074f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074fc:	3601      	adds	r6, #1
 80074fe:	1064      	asrs	r4, r4, #1
 8007500:	3508      	adds	r5, #8
 8007502:	e7e5      	b.n	80074d0 <_dtoa_r+0x340>
 8007504:	f000 80af 	beq.w	8007666 <_dtoa_r+0x4d6>
 8007508:	427c      	negs	r4, r7
 800750a:	4b81      	ldr	r3, [pc, #516]	@ (8007710 <_dtoa_r+0x580>)
 800750c:	4d81      	ldr	r5, [pc, #516]	@ (8007714 <_dtoa_r+0x584>)
 800750e:	f004 020f 	and.w	r2, r4, #15
 8007512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800751e:	f7f9 f86b 	bl	80005f8 <__aeabi_dmul>
 8007522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007526:	1124      	asrs	r4, r4, #4
 8007528:	2300      	movs	r3, #0
 800752a:	2602      	movs	r6, #2
 800752c:	2c00      	cmp	r4, #0
 800752e:	f040 808f 	bne.w	8007650 <_dtoa_r+0x4c0>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1d3      	bne.n	80074de <_dtoa_r+0x34e>
 8007536:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007538:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8094 	beq.w	800766a <_dtoa_r+0x4da>
 8007542:	4b75      	ldr	r3, [pc, #468]	@ (8007718 <_dtoa_r+0x588>)
 8007544:	2200      	movs	r2, #0
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f9 fac7 	bl	8000adc <__aeabi_dcmplt>
 800754e:	2800      	cmp	r0, #0
 8007550:	f000 808b 	beq.w	800766a <_dtoa_r+0x4da>
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 8087 	beq.w	800766a <_dtoa_r+0x4da>
 800755c:	f1bb 0f00 	cmp.w	fp, #0
 8007560:	dd34      	ble.n	80075cc <_dtoa_r+0x43c>
 8007562:	4620      	mov	r0, r4
 8007564:	4b6d      	ldr	r3, [pc, #436]	@ (800771c <_dtoa_r+0x58c>)
 8007566:	2200      	movs	r2, #0
 8007568:	4629      	mov	r1, r5
 800756a:	f7f9 f845 	bl	80005f8 <__aeabi_dmul>
 800756e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007572:	f107 38ff 	add.w	r8, r7, #4294967295
 8007576:	3601      	adds	r6, #1
 8007578:	465c      	mov	r4, fp
 800757a:	4630      	mov	r0, r6
 800757c:	f7f8 ffd2 	bl	8000524 <__aeabi_i2d>
 8007580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007584:	f7f9 f838 	bl	80005f8 <__aeabi_dmul>
 8007588:	4b65      	ldr	r3, [pc, #404]	@ (8007720 <_dtoa_r+0x590>)
 800758a:	2200      	movs	r2, #0
 800758c:	f7f8 fe7e 	bl	800028c <__adddf3>
 8007590:	4605      	mov	r5, r0
 8007592:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007596:	2c00      	cmp	r4, #0
 8007598:	d16a      	bne.n	8007670 <_dtoa_r+0x4e0>
 800759a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800759e:	4b61      	ldr	r3, [pc, #388]	@ (8007724 <_dtoa_r+0x594>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	f7f8 fe71 	bl	8000288 <__aeabi_dsub>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075ae:	462a      	mov	r2, r5
 80075b0:	4633      	mov	r3, r6
 80075b2:	f7f9 fab1 	bl	8000b18 <__aeabi_dcmpgt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f040 8298 	bne.w	8007aec <_dtoa_r+0x95c>
 80075bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075c0:	462a      	mov	r2, r5
 80075c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075c6:	f7f9 fa89 	bl	8000adc <__aeabi_dcmplt>
 80075ca:	bb38      	cbnz	r0, 800761c <_dtoa_r+0x48c>
 80075cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80075d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f2c0 8157 	blt.w	800788a <_dtoa_r+0x6fa>
 80075dc:	2f0e      	cmp	r7, #14
 80075de:	f300 8154 	bgt.w	800788a <_dtoa_r+0x6fa>
 80075e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007710 <_dtoa_r+0x580>)
 80075e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075e8:	ed93 7b00 	vldr	d7, [r3]
 80075ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	ed8d 7b00 	vstr	d7, [sp]
 80075f4:	f280 80e5 	bge.w	80077c2 <_dtoa_r+0x632>
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f300 80e1 	bgt.w	80077c2 <_dtoa_r+0x632>
 8007600:	d10c      	bne.n	800761c <_dtoa_r+0x48c>
 8007602:	4b48      	ldr	r3, [pc, #288]	@ (8007724 <_dtoa_r+0x594>)
 8007604:	2200      	movs	r2, #0
 8007606:	ec51 0b17 	vmov	r0, r1, d7
 800760a:	f7f8 fff5 	bl	80005f8 <__aeabi_dmul>
 800760e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007612:	f7f9 fa77 	bl	8000b04 <__aeabi_dcmpge>
 8007616:	2800      	cmp	r0, #0
 8007618:	f000 8266 	beq.w	8007ae8 <_dtoa_r+0x958>
 800761c:	2400      	movs	r4, #0
 800761e:	4625      	mov	r5, r4
 8007620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007622:	4656      	mov	r6, sl
 8007624:	ea6f 0803 	mvn.w	r8, r3
 8007628:	2700      	movs	r7, #0
 800762a:	4621      	mov	r1, r4
 800762c:	4648      	mov	r0, r9
 800762e:	f000 fcbf 	bl	8007fb0 <_Bfree>
 8007632:	2d00      	cmp	r5, #0
 8007634:	f000 80bd 	beq.w	80077b2 <_dtoa_r+0x622>
 8007638:	b12f      	cbz	r7, 8007646 <_dtoa_r+0x4b6>
 800763a:	42af      	cmp	r7, r5
 800763c:	d003      	beq.n	8007646 <_dtoa_r+0x4b6>
 800763e:	4639      	mov	r1, r7
 8007640:	4648      	mov	r0, r9
 8007642:	f000 fcb5 	bl	8007fb0 <_Bfree>
 8007646:	4629      	mov	r1, r5
 8007648:	4648      	mov	r0, r9
 800764a:	f000 fcb1 	bl	8007fb0 <_Bfree>
 800764e:	e0b0      	b.n	80077b2 <_dtoa_r+0x622>
 8007650:	07e2      	lsls	r2, r4, #31
 8007652:	d505      	bpl.n	8007660 <_dtoa_r+0x4d0>
 8007654:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007658:	f7f8 ffce 	bl	80005f8 <__aeabi_dmul>
 800765c:	3601      	adds	r6, #1
 800765e:	2301      	movs	r3, #1
 8007660:	1064      	asrs	r4, r4, #1
 8007662:	3508      	adds	r5, #8
 8007664:	e762      	b.n	800752c <_dtoa_r+0x39c>
 8007666:	2602      	movs	r6, #2
 8007668:	e765      	b.n	8007536 <_dtoa_r+0x3a6>
 800766a:	9c03      	ldr	r4, [sp, #12]
 800766c:	46b8      	mov	r8, r7
 800766e:	e784      	b.n	800757a <_dtoa_r+0x3ea>
 8007670:	4b27      	ldr	r3, [pc, #156]	@ (8007710 <_dtoa_r+0x580>)
 8007672:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007674:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007678:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800767c:	4454      	add	r4, sl
 800767e:	2900      	cmp	r1, #0
 8007680:	d054      	beq.n	800772c <_dtoa_r+0x59c>
 8007682:	4929      	ldr	r1, [pc, #164]	@ (8007728 <_dtoa_r+0x598>)
 8007684:	2000      	movs	r0, #0
 8007686:	f7f9 f8e1 	bl	800084c <__aeabi_ddiv>
 800768a:	4633      	mov	r3, r6
 800768c:	462a      	mov	r2, r5
 800768e:	f7f8 fdfb 	bl	8000288 <__aeabi_dsub>
 8007692:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007696:	4656      	mov	r6, sl
 8007698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800769c:	f7f9 fa5c 	bl	8000b58 <__aeabi_d2iz>
 80076a0:	4605      	mov	r5, r0
 80076a2:	f7f8 ff3f 	bl	8000524 <__aeabi_i2d>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ae:	f7f8 fdeb 	bl	8000288 <__aeabi_dsub>
 80076b2:	3530      	adds	r5, #48	@ 0x30
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076bc:	f806 5b01 	strb.w	r5, [r6], #1
 80076c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076c4:	f7f9 fa0a 	bl	8000adc <__aeabi_dcmplt>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d172      	bne.n	80077b2 <_dtoa_r+0x622>
 80076cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d0:	4911      	ldr	r1, [pc, #68]	@ (8007718 <_dtoa_r+0x588>)
 80076d2:	2000      	movs	r0, #0
 80076d4:	f7f8 fdd8 	bl	8000288 <__aeabi_dsub>
 80076d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076dc:	f7f9 f9fe 	bl	8000adc <__aeabi_dcmplt>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f040 80b4 	bne.w	800784e <_dtoa_r+0x6be>
 80076e6:	42a6      	cmp	r6, r4
 80076e8:	f43f af70 	beq.w	80075cc <_dtoa_r+0x43c>
 80076ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80076f0:	4b0a      	ldr	r3, [pc, #40]	@ (800771c <_dtoa_r+0x58c>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	f7f8 ff80 	bl	80005f8 <__aeabi_dmul>
 80076f8:	4b08      	ldr	r3, [pc, #32]	@ (800771c <_dtoa_r+0x58c>)
 80076fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076fe:	2200      	movs	r2, #0
 8007700:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007704:	f7f8 ff78 	bl	80005f8 <__aeabi_dmul>
 8007708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800770c:	e7c4      	b.n	8007698 <_dtoa_r+0x508>
 800770e:	bf00      	nop
 8007710:	08009038 	.word	0x08009038
 8007714:	08009010 	.word	0x08009010
 8007718:	3ff00000 	.word	0x3ff00000
 800771c:	40240000 	.word	0x40240000
 8007720:	401c0000 	.word	0x401c0000
 8007724:	40140000 	.word	0x40140000
 8007728:	3fe00000 	.word	0x3fe00000
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	f7f8 ff62 	bl	80005f8 <__aeabi_dmul>
 8007734:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007738:	9413      	str	r4, [sp, #76]	@ 0x4c
 800773a:	4656      	mov	r6, sl
 800773c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007740:	f7f9 fa0a 	bl	8000b58 <__aeabi_d2iz>
 8007744:	4605      	mov	r5, r0
 8007746:	f7f8 feed 	bl	8000524 <__aeabi_i2d>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007752:	f7f8 fd99 	bl	8000288 <__aeabi_dsub>
 8007756:	3530      	adds	r5, #48	@ 0x30
 8007758:	f806 5b01 	strb.w	r5, [r6], #1
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	42a6      	cmp	r6, r4
 8007762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	d124      	bne.n	80077b6 <_dtoa_r+0x626>
 800776c:	4baf      	ldr	r3, [pc, #700]	@ (8007a2c <_dtoa_r+0x89c>)
 800776e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007772:	f7f8 fd8b 	bl	800028c <__adddf3>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800777e:	f7f9 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 8007782:	2800      	cmp	r0, #0
 8007784:	d163      	bne.n	800784e <_dtoa_r+0x6be>
 8007786:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800778a:	49a8      	ldr	r1, [pc, #672]	@ (8007a2c <_dtoa_r+0x89c>)
 800778c:	2000      	movs	r0, #0
 800778e:	f7f8 fd7b 	bl	8000288 <__aeabi_dsub>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800779a:	f7f9 f99f 	bl	8000adc <__aeabi_dcmplt>
 800779e:	2800      	cmp	r0, #0
 80077a0:	f43f af14 	beq.w	80075cc <_dtoa_r+0x43c>
 80077a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80077a6:	1e73      	subs	r3, r6, #1
 80077a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077ae:	2b30      	cmp	r3, #48	@ 0x30
 80077b0:	d0f8      	beq.n	80077a4 <_dtoa_r+0x614>
 80077b2:	4647      	mov	r7, r8
 80077b4:	e03b      	b.n	800782e <_dtoa_r+0x69e>
 80077b6:	4b9e      	ldr	r3, [pc, #632]	@ (8007a30 <_dtoa_r+0x8a0>)
 80077b8:	f7f8 ff1e 	bl	80005f8 <__aeabi_dmul>
 80077bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077c0:	e7bc      	b.n	800773c <_dtoa_r+0x5ac>
 80077c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80077c6:	4656      	mov	r6, sl
 80077c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f9 f83c 	bl	800084c <__aeabi_ddiv>
 80077d4:	f7f9 f9c0 	bl	8000b58 <__aeabi_d2iz>
 80077d8:	4680      	mov	r8, r0
 80077da:	f7f8 fea3 	bl	8000524 <__aeabi_i2d>
 80077de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077e2:	f7f8 ff09 	bl	80005f8 <__aeabi_dmul>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4620      	mov	r0, r4
 80077ec:	4629      	mov	r1, r5
 80077ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077f2:	f7f8 fd49 	bl	8000288 <__aeabi_dsub>
 80077f6:	f806 4b01 	strb.w	r4, [r6], #1
 80077fa:	9d03      	ldr	r5, [sp, #12]
 80077fc:	eba6 040a 	sub.w	r4, r6, sl
 8007800:	42a5      	cmp	r5, r4
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	d133      	bne.n	8007870 <_dtoa_r+0x6e0>
 8007808:	f7f8 fd40 	bl	800028c <__adddf3>
 800780c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	f7f9 f980 	bl	8000b18 <__aeabi_dcmpgt>
 8007818:	b9c0      	cbnz	r0, 800784c <_dtoa_r+0x6bc>
 800781a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f9 f951 	bl	8000ac8 <__aeabi_dcmpeq>
 8007826:	b110      	cbz	r0, 800782e <_dtoa_r+0x69e>
 8007828:	f018 0f01 	tst.w	r8, #1
 800782c:	d10e      	bne.n	800784c <_dtoa_r+0x6bc>
 800782e:	9902      	ldr	r1, [sp, #8]
 8007830:	4648      	mov	r0, r9
 8007832:	f000 fbbd 	bl	8007fb0 <_Bfree>
 8007836:	2300      	movs	r3, #0
 8007838:	7033      	strb	r3, [r6, #0]
 800783a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800783c:	3701      	adds	r7, #1
 800783e:	601f      	str	r7, [r3, #0]
 8007840:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 824b 	beq.w	8007cde <_dtoa_r+0xb4e>
 8007848:	601e      	str	r6, [r3, #0]
 800784a:	e248      	b.n	8007cde <_dtoa_r+0xb4e>
 800784c:	46b8      	mov	r8, r7
 800784e:	4633      	mov	r3, r6
 8007850:	461e      	mov	r6, r3
 8007852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007856:	2a39      	cmp	r2, #57	@ 0x39
 8007858:	d106      	bne.n	8007868 <_dtoa_r+0x6d8>
 800785a:	459a      	cmp	sl, r3
 800785c:	d1f8      	bne.n	8007850 <_dtoa_r+0x6c0>
 800785e:	2230      	movs	r2, #48	@ 0x30
 8007860:	f108 0801 	add.w	r8, r8, #1
 8007864:	f88a 2000 	strb.w	r2, [sl]
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	3201      	adds	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e7a0      	b.n	80077b2 <_dtoa_r+0x622>
 8007870:	4b6f      	ldr	r3, [pc, #444]	@ (8007a30 <_dtoa_r+0x8a0>)
 8007872:	2200      	movs	r2, #0
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	2200      	movs	r2, #0
 800787a:	2300      	movs	r3, #0
 800787c:	4604      	mov	r4, r0
 800787e:	460d      	mov	r5, r1
 8007880:	f7f9 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8007884:	2800      	cmp	r0, #0
 8007886:	d09f      	beq.n	80077c8 <_dtoa_r+0x638>
 8007888:	e7d1      	b.n	800782e <_dtoa_r+0x69e>
 800788a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800788c:	2a00      	cmp	r2, #0
 800788e:	f000 80ea 	beq.w	8007a66 <_dtoa_r+0x8d6>
 8007892:	9a07      	ldr	r2, [sp, #28]
 8007894:	2a01      	cmp	r2, #1
 8007896:	f300 80cd 	bgt.w	8007a34 <_dtoa_r+0x8a4>
 800789a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800789c:	2a00      	cmp	r2, #0
 800789e:	f000 80c1 	beq.w	8007a24 <_dtoa_r+0x894>
 80078a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078a6:	9c08      	ldr	r4, [sp, #32]
 80078a8:	9e00      	ldr	r6, [sp, #0]
 80078aa:	9a00      	ldr	r2, [sp, #0]
 80078ac:	441a      	add	r2, r3
 80078ae:	9200      	str	r2, [sp, #0]
 80078b0:	9a06      	ldr	r2, [sp, #24]
 80078b2:	2101      	movs	r1, #1
 80078b4:	441a      	add	r2, r3
 80078b6:	4648      	mov	r0, r9
 80078b8:	9206      	str	r2, [sp, #24]
 80078ba:	f000 fc2d 	bl	8008118 <__i2b>
 80078be:	4605      	mov	r5, r0
 80078c0:	b166      	cbz	r6, 80078dc <_dtoa_r+0x74c>
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	dd09      	ble.n	80078dc <_dtoa_r+0x74c>
 80078c8:	42b3      	cmp	r3, r6
 80078ca:	9a00      	ldr	r2, [sp, #0]
 80078cc:	bfa8      	it	ge
 80078ce:	4633      	movge	r3, r6
 80078d0:	1ad2      	subs	r2, r2, r3
 80078d2:	9200      	str	r2, [sp, #0]
 80078d4:	9a06      	ldr	r2, [sp, #24]
 80078d6:	1af6      	subs	r6, r6, r3
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	9306      	str	r3, [sp, #24]
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	b30b      	cbz	r3, 8007924 <_dtoa_r+0x794>
 80078e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80c6 	beq.w	8007a74 <_dtoa_r+0x8e4>
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	f000 80c0 	beq.w	8007a6e <_dtoa_r+0x8de>
 80078ee:	4629      	mov	r1, r5
 80078f0:	4622      	mov	r2, r4
 80078f2:	4648      	mov	r0, r9
 80078f4:	f000 fcc8 	bl	8008288 <__pow5mult>
 80078f8:	9a02      	ldr	r2, [sp, #8]
 80078fa:	4601      	mov	r1, r0
 80078fc:	4605      	mov	r5, r0
 80078fe:	4648      	mov	r0, r9
 8007900:	f000 fc20 	bl	8008144 <__multiply>
 8007904:	9902      	ldr	r1, [sp, #8]
 8007906:	4680      	mov	r8, r0
 8007908:	4648      	mov	r0, r9
 800790a:	f000 fb51 	bl	8007fb0 <_Bfree>
 800790e:	9b08      	ldr	r3, [sp, #32]
 8007910:	1b1b      	subs	r3, r3, r4
 8007912:	9308      	str	r3, [sp, #32]
 8007914:	f000 80b1 	beq.w	8007a7a <_dtoa_r+0x8ea>
 8007918:	9a08      	ldr	r2, [sp, #32]
 800791a:	4641      	mov	r1, r8
 800791c:	4648      	mov	r0, r9
 800791e:	f000 fcb3 	bl	8008288 <__pow5mult>
 8007922:	9002      	str	r0, [sp, #8]
 8007924:	2101      	movs	r1, #1
 8007926:	4648      	mov	r0, r9
 8007928:	f000 fbf6 	bl	8008118 <__i2b>
 800792c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800792e:	4604      	mov	r4, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 81d8 	beq.w	8007ce6 <_dtoa_r+0xb56>
 8007936:	461a      	mov	r2, r3
 8007938:	4601      	mov	r1, r0
 800793a:	4648      	mov	r0, r9
 800793c:	f000 fca4 	bl	8008288 <__pow5mult>
 8007940:	9b07      	ldr	r3, [sp, #28]
 8007942:	2b01      	cmp	r3, #1
 8007944:	4604      	mov	r4, r0
 8007946:	f300 809f 	bgt.w	8007a88 <_dtoa_r+0x8f8>
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8097 	bne.w	8007a80 <_dtoa_r+0x8f0>
 8007952:	9b05      	ldr	r3, [sp, #20]
 8007954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007958:	2b00      	cmp	r3, #0
 800795a:	f040 8093 	bne.w	8007a84 <_dtoa_r+0x8f4>
 800795e:	9b05      	ldr	r3, [sp, #20]
 8007960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007964:	0d1b      	lsrs	r3, r3, #20
 8007966:	051b      	lsls	r3, r3, #20
 8007968:	b133      	cbz	r3, 8007978 <_dtoa_r+0x7e8>
 800796a:	9b00      	ldr	r3, [sp, #0]
 800796c:	3301      	adds	r3, #1
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	9b06      	ldr	r3, [sp, #24]
 8007972:	3301      	adds	r3, #1
 8007974:	9306      	str	r3, [sp, #24]
 8007976:	2301      	movs	r3, #1
 8007978:	9308      	str	r3, [sp, #32]
 800797a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 81b8 	beq.w	8007cf2 <_dtoa_r+0xb62>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007988:	6918      	ldr	r0, [r3, #16]
 800798a:	f000 fb79 	bl	8008080 <__hi0bits>
 800798e:	f1c0 0020 	rsb	r0, r0, #32
 8007992:	9b06      	ldr	r3, [sp, #24]
 8007994:	4418      	add	r0, r3
 8007996:	f010 001f 	ands.w	r0, r0, #31
 800799a:	f000 8082 	beq.w	8007aa2 <_dtoa_r+0x912>
 800799e:	f1c0 0320 	rsb	r3, r0, #32
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	dd73      	ble.n	8007a8e <_dtoa_r+0x8fe>
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	f1c0 001c 	rsb	r0, r0, #28
 80079ac:	4403      	add	r3, r0
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	9b06      	ldr	r3, [sp, #24]
 80079b2:	4403      	add	r3, r0
 80079b4:	4406      	add	r6, r0
 80079b6:	9306      	str	r3, [sp, #24]
 80079b8:	9b00      	ldr	r3, [sp, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dd05      	ble.n	80079ca <_dtoa_r+0x83a>
 80079be:	9902      	ldr	r1, [sp, #8]
 80079c0:	461a      	mov	r2, r3
 80079c2:	4648      	mov	r0, r9
 80079c4:	f000 fcba 	bl	800833c <__lshift>
 80079c8:	9002      	str	r0, [sp, #8]
 80079ca:	9b06      	ldr	r3, [sp, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dd05      	ble.n	80079dc <_dtoa_r+0x84c>
 80079d0:	4621      	mov	r1, r4
 80079d2:	461a      	mov	r2, r3
 80079d4:	4648      	mov	r0, r9
 80079d6:	f000 fcb1 	bl	800833c <__lshift>
 80079da:	4604      	mov	r4, r0
 80079dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d061      	beq.n	8007aa6 <_dtoa_r+0x916>
 80079e2:	9802      	ldr	r0, [sp, #8]
 80079e4:	4621      	mov	r1, r4
 80079e6:	f000 fd15 	bl	8008414 <__mcmp>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	da5b      	bge.n	8007aa6 <_dtoa_r+0x916>
 80079ee:	2300      	movs	r3, #0
 80079f0:	9902      	ldr	r1, [sp, #8]
 80079f2:	220a      	movs	r2, #10
 80079f4:	4648      	mov	r0, r9
 80079f6:	f000 fafd 	bl	8007ff4 <__multadd>
 80079fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079fc:	9002      	str	r0, [sp, #8]
 80079fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8177 	beq.w	8007cf6 <_dtoa_r+0xb66>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	220a      	movs	r2, #10
 8007a0e:	4648      	mov	r0, r9
 8007a10:	f000 faf0 	bl	8007ff4 <__multadd>
 8007a14:	f1bb 0f00 	cmp.w	fp, #0
 8007a18:	4605      	mov	r5, r0
 8007a1a:	dc6f      	bgt.n	8007afc <_dtoa_r+0x96c>
 8007a1c:	9b07      	ldr	r3, [sp, #28]
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	dc49      	bgt.n	8007ab6 <_dtoa_r+0x926>
 8007a22:	e06b      	b.n	8007afc <_dtoa_r+0x96c>
 8007a24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a2a:	e73c      	b.n	80078a6 <_dtoa_r+0x716>
 8007a2c:	3fe00000 	.word	0x3fe00000
 8007a30:	40240000 	.word	0x40240000
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	1e5c      	subs	r4, r3, #1
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	db09      	blt.n	8007a52 <_dtoa_r+0x8c2>
 8007a3e:	1b1c      	subs	r4, r3, r4
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f6bf af30 	bge.w	80078a8 <_dtoa_r+0x718>
 8007a48:	9b00      	ldr	r3, [sp, #0]
 8007a4a:	9a03      	ldr	r2, [sp, #12]
 8007a4c:	1a9e      	subs	r6, r3, r2
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e72b      	b.n	80078aa <_dtoa_r+0x71a>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a56:	9408      	str	r4, [sp, #32]
 8007a58:	1ae3      	subs	r3, r4, r3
 8007a5a:	441a      	add	r2, r3
 8007a5c:	9e00      	ldr	r6, [sp, #0]
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	920d      	str	r2, [sp, #52]	@ 0x34
 8007a62:	2400      	movs	r4, #0
 8007a64:	e721      	b.n	80078aa <_dtoa_r+0x71a>
 8007a66:	9c08      	ldr	r4, [sp, #32]
 8007a68:	9e00      	ldr	r6, [sp, #0]
 8007a6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007a6c:	e728      	b.n	80078c0 <_dtoa_r+0x730>
 8007a6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007a72:	e751      	b.n	8007918 <_dtoa_r+0x788>
 8007a74:	9a08      	ldr	r2, [sp, #32]
 8007a76:	9902      	ldr	r1, [sp, #8]
 8007a78:	e750      	b.n	800791c <_dtoa_r+0x78c>
 8007a7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8007a7e:	e751      	b.n	8007924 <_dtoa_r+0x794>
 8007a80:	2300      	movs	r3, #0
 8007a82:	e779      	b.n	8007978 <_dtoa_r+0x7e8>
 8007a84:	9b04      	ldr	r3, [sp, #16]
 8007a86:	e777      	b.n	8007978 <_dtoa_r+0x7e8>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	9308      	str	r3, [sp, #32]
 8007a8c:	e779      	b.n	8007982 <_dtoa_r+0x7f2>
 8007a8e:	d093      	beq.n	80079b8 <_dtoa_r+0x828>
 8007a90:	9a00      	ldr	r2, [sp, #0]
 8007a92:	331c      	adds	r3, #28
 8007a94:	441a      	add	r2, r3
 8007a96:	9200      	str	r2, [sp, #0]
 8007a98:	9a06      	ldr	r2, [sp, #24]
 8007a9a:	441a      	add	r2, r3
 8007a9c:	441e      	add	r6, r3
 8007a9e:	9206      	str	r2, [sp, #24]
 8007aa0:	e78a      	b.n	80079b8 <_dtoa_r+0x828>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	e7f4      	b.n	8007a90 <_dtoa_r+0x900>
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	46b8      	mov	r8, r7
 8007aac:	dc20      	bgt.n	8007af0 <_dtoa_r+0x960>
 8007aae:	469b      	mov	fp, r3
 8007ab0:	9b07      	ldr	r3, [sp, #28]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	dd1e      	ble.n	8007af4 <_dtoa_r+0x964>
 8007ab6:	f1bb 0f00 	cmp.w	fp, #0
 8007aba:	f47f adb1 	bne.w	8007620 <_dtoa_r+0x490>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	465b      	mov	r3, fp
 8007ac2:	2205      	movs	r2, #5
 8007ac4:	4648      	mov	r0, r9
 8007ac6:	f000 fa95 	bl	8007ff4 <__multadd>
 8007aca:	4601      	mov	r1, r0
 8007acc:	4604      	mov	r4, r0
 8007ace:	9802      	ldr	r0, [sp, #8]
 8007ad0:	f000 fca0 	bl	8008414 <__mcmp>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f77f ada3 	ble.w	8007620 <_dtoa_r+0x490>
 8007ada:	4656      	mov	r6, sl
 8007adc:	2331      	movs	r3, #49	@ 0x31
 8007ade:	f806 3b01 	strb.w	r3, [r6], #1
 8007ae2:	f108 0801 	add.w	r8, r8, #1
 8007ae6:	e59f      	b.n	8007628 <_dtoa_r+0x498>
 8007ae8:	9c03      	ldr	r4, [sp, #12]
 8007aea:	46b8      	mov	r8, r7
 8007aec:	4625      	mov	r5, r4
 8007aee:	e7f4      	b.n	8007ada <_dtoa_r+0x94a>
 8007af0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 8101 	beq.w	8007cfe <_dtoa_r+0xb6e>
 8007afc:	2e00      	cmp	r6, #0
 8007afe:	dd05      	ble.n	8007b0c <_dtoa_r+0x97c>
 8007b00:	4629      	mov	r1, r5
 8007b02:	4632      	mov	r2, r6
 8007b04:	4648      	mov	r0, r9
 8007b06:	f000 fc19 	bl	800833c <__lshift>
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	9b08      	ldr	r3, [sp, #32]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d05c      	beq.n	8007bcc <_dtoa_r+0xa3c>
 8007b12:	6869      	ldr	r1, [r5, #4]
 8007b14:	4648      	mov	r0, r9
 8007b16:	f000 fa0b 	bl	8007f30 <_Balloc>
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	b928      	cbnz	r0, 8007b2a <_dtoa_r+0x99a>
 8007b1e:	4b82      	ldr	r3, [pc, #520]	@ (8007d28 <_dtoa_r+0xb98>)
 8007b20:	4602      	mov	r2, r0
 8007b22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b26:	f7ff bb4a 	b.w	80071be <_dtoa_r+0x2e>
 8007b2a:	692a      	ldr	r2, [r5, #16]
 8007b2c:	3202      	adds	r2, #2
 8007b2e:	0092      	lsls	r2, r2, #2
 8007b30:	f105 010c 	add.w	r1, r5, #12
 8007b34:	300c      	adds	r0, #12
 8007b36:	f7ff fa94 	bl	8007062 <memcpy>
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4648      	mov	r0, r9
 8007b40:	f000 fbfc 	bl	800833c <__lshift>
 8007b44:	f10a 0301 	add.w	r3, sl, #1
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	eb0a 030b 	add.w	r3, sl, fp
 8007b4e:	9308      	str	r3, [sp, #32]
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	462f      	mov	r7, r5
 8007b58:	9306      	str	r3, [sp, #24]
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	9b00      	ldr	r3, [sp, #0]
 8007b5e:	9802      	ldr	r0, [sp, #8]
 8007b60:	4621      	mov	r1, r4
 8007b62:	f103 3bff 	add.w	fp, r3, #4294967295
 8007b66:	f7ff fa8a 	bl	800707e <quorem>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	3330      	adds	r3, #48	@ 0x30
 8007b6e:	9003      	str	r0, [sp, #12]
 8007b70:	4639      	mov	r1, r7
 8007b72:	9802      	ldr	r0, [sp, #8]
 8007b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b76:	f000 fc4d 	bl	8008414 <__mcmp>
 8007b7a:	462a      	mov	r2, r5
 8007b7c:	9004      	str	r0, [sp, #16]
 8007b7e:	4621      	mov	r1, r4
 8007b80:	4648      	mov	r0, r9
 8007b82:	f000 fc63 	bl	800844c <__mdiff>
 8007b86:	68c2      	ldr	r2, [r0, #12]
 8007b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	bb02      	cbnz	r2, 8007bd0 <_dtoa_r+0xa40>
 8007b8e:	4601      	mov	r1, r0
 8007b90:	9802      	ldr	r0, [sp, #8]
 8007b92:	f000 fc3f 	bl	8008414 <__mcmp>
 8007b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b98:	4602      	mov	r2, r0
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4648      	mov	r0, r9
 8007b9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ba2:	f000 fa05 	bl	8007fb0 <_Bfree>
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007baa:	9e00      	ldr	r6, [sp, #0]
 8007bac:	ea42 0103 	orr.w	r1, r2, r3
 8007bb0:	9b06      	ldr	r3, [sp, #24]
 8007bb2:	4319      	orrs	r1, r3
 8007bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb6:	d10d      	bne.n	8007bd4 <_dtoa_r+0xa44>
 8007bb8:	2b39      	cmp	r3, #57	@ 0x39
 8007bba:	d027      	beq.n	8007c0c <_dtoa_r+0xa7c>
 8007bbc:	9a04      	ldr	r2, [sp, #16]
 8007bbe:	2a00      	cmp	r2, #0
 8007bc0:	dd01      	ble.n	8007bc6 <_dtoa_r+0xa36>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	3331      	adds	r3, #49	@ 0x31
 8007bc6:	f88b 3000 	strb.w	r3, [fp]
 8007bca:	e52e      	b.n	800762a <_dtoa_r+0x49a>
 8007bcc:	4628      	mov	r0, r5
 8007bce:	e7b9      	b.n	8007b44 <_dtoa_r+0x9b4>
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	e7e2      	b.n	8007b9a <_dtoa_r+0xa0a>
 8007bd4:	9904      	ldr	r1, [sp, #16]
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	db04      	blt.n	8007be4 <_dtoa_r+0xa54>
 8007bda:	9807      	ldr	r0, [sp, #28]
 8007bdc:	4301      	orrs	r1, r0
 8007bde:	9806      	ldr	r0, [sp, #24]
 8007be0:	4301      	orrs	r1, r0
 8007be2:	d120      	bne.n	8007c26 <_dtoa_r+0xa96>
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	ddee      	ble.n	8007bc6 <_dtoa_r+0xa36>
 8007be8:	9902      	ldr	r1, [sp, #8]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	2201      	movs	r2, #1
 8007bee:	4648      	mov	r0, r9
 8007bf0:	f000 fba4 	bl	800833c <__lshift>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	9002      	str	r0, [sp, #8]
 8007bf8:	f000 fc0c 	bl	8008414 <__mcmp>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	dc02      	bgt.n	8007c08 <_dtoa_r+0xa78>
 8007c02:	d1e0      	bne.n	8007bc6 <_dtoa_r+0xa36>
 8007c04:	07da      	lsls	r2, r3, #31
 8007c06:	d5de      	bpl.n	8007bc6 <_dtoa_r+0xa36>
 8007c08:	2b39      	cmp	r3, #57	@ 0x39
 8007c0a:	d1da      	bne.n	8007bc2 <_dtoa_r+0xa32>
 8007c0c:	2339      	movs	r3, #57	@ 0x39
 8007c0e:	f88b 3000 	strb.w	r3, [fp]
 8007c12:	4633      	mov	r3, r6
 8007c14:	461e      	mov	r6, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c1c:	2a39      	cmp	r2, #57	@ 0x39
 8007c1e:	d04e      	beq.n	8007cbe <_dtoa_r+0xb2e>
 8007c20:	3201      	adds	r2, #1
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e501      	b.n	800762a <_dtoa_r+0x49a>
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	dd03      	ble.n	8007c32 <_dtoa_r+0xaa2>
 8007c2a:	2b39      	cmp	r3, #57	@ 0x39
 8007c2c:	d0ee      	beq.n	8007c0c <_dtoa_r+0xa7c>
 8007c2e:	3301      	adds	r3, #1
 8007c30:	e7c9      	b.n	8007bc6 <_dtoa_r+0xa36>
 8007c32:	9a00      	ldr	r2, [sp, #0]
 8007c34:	9908      	ldr	r1, [sp, #32]
 8007c36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c3a:	428a      	cmp	r2, r1
 8007c3c:	d028      	beq.n	8007c90 <_dtoa_r+0xb00>
 8007c3e:	9902      	ldr	r1, [sp, #8]
 8007c40:	2300      	movs	r3, #0
 8007c42:	220a      	movs	r2, #10
 8007c44:	4648      	mov	r0, r9
 8007c46:	f000 f9d5 	bl	8007ff4 <__multadd>
 8007c4a:	42af      	cmp	r7, r5
 8007c4c:	9002      	str	r0, [sp, #8]
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	f04f 020a 	mov.w	r2, #10
 8007c56:	4639      	mov	r1, r7
 8007c58:	4648      	mov	r0, r9
 8007c5a:	d107      	bne.n	8007c6c <_dtoa_r+0xadc>
 8007c5c:	f000 f9ca 	bl	8007ff4 <__multadd>
 8007c60:	4607      	mov	r7, r0
 8007c62:	4605      	mov	r5, r0
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	e777      	b.n	8007b5c <_dtoa_r+0x9cc>
 8007c6c:	f000 f9c2 	bl	8007ff4 <__multadd>
 8007c70:	4629      	mov	r1, r5
 8007c72:	4607      	mov	r7, r0
 8007c74:	2300      	movs	r3, #0
 8007c76:	220a      	movs	r2, #10
 8007c78:	4648      	mov	r0, r9
 8007c7a:	f000 f9bb 	bl	8007ff4 <__multadd>
 8007c7e:	4605      	mov	r5, r0
 8007c80:	e7f0      	b.n	8007c64 <_dtoa_r+0xad4>
 8007c82:	f1bb 0f00 	cmp.w	fp, #0
 8007c86:	bfcc      	ite	gt
 8007c88:	465e      	movgt	r6, fp
 8007c8a:	2601      	movle	r6, #1
 8007c8c:	4456      	add	r6, sl
 8007c8e:	2700      	movs	r7, #0
 8007c90:	9902      	ldr	r1, [sp, #8]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	2201      	movs	r2, #1
 8007c96:	4648      	mov	r0, r9
 8007c98:	f000 fb50 	bl	800833c <__lshift>
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	9002      	str	r0, [sp, #8]
 8007ca0:	f000 fbb8 	bl	8008414 <__mcmp>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	dcb4      	bgt.n	8007c12 <_dtoa_r+0xa82>
 8007ca8:	d102      	bne.n	8007cb0 <_dtoa_r+0xb20>
 8007caa:	9b00      	ldr	r3, [sp, #0]
 8007cac:	07db      	lsls	r3, r3, #31
 8007cae:	d4b0      	bmi.n	8007c12 <_dtoa_r+0xa82>
 8007cb0:	4633      	mov	r3, r6
 8007cb2:	461e      	mov	r6, r3
 8007cb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cb8:	2a30      	cmp	r2, #48	@ 0x30
 8007cba:	d0fa      	beq.n	8007cb2 <_dtoa_r+0xb22>
 8007cbc:	e4b5      	b.n	800762a <_dtoa_r+0x49a>
 8007cbe:	459a      	cmp	sl, r3
 8007cc0:	d1a8      	bne.n	8007c14 <_dtoa_r+0xa84>
 8007cc2:	2331      	movs	r3, #49	@ 0x31
 8007cc4:	f108 0801 	add.w	r8, r8, #1
 8007cc8:	f88a 3000 	strb.w	r3, [sl]
 8007ccc:	e4ad      	b.n	800762a <_dtoa_r+0x49a>
 8007cce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cd0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007d2c <_dtoa_r+0xb9c>
 8007cd4:	b11b      	cbz	r3, 8007cde <_dtoa_r+0xb4e>
 8007cd6:	f10a 0308 	add.w	r3, sl, #8
 8007cda:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	4650      	mov	r0, sl
 8007ce0:	b017      	add	sp, #92	@ 0x5c
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	9b07      	ldr	r3, [sp, #28]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	f77f ae2e 	ble.w	800794a <_dtoa_r+0x7ba>
 8007cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cf0:	9308      	str	r3, [sp, #32]
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	e64d      	b.n	8007992 <_dtoa_r+0x802>
 8007cf6:	f1bb 0f00 	cmp.w	fp, #0
 8007cfa:	f77f aed9 	ble.w	8007ab0 <_dtoa_r+0x920>
 8007cfe:	4656      	mov	r6, sl
 8007d00:	9802      	ldr	r0, [sp, #8]
 8007d02:	4621      	mov	r1, r4
 8007d04:	f7ff f9bb 	bl	800707e <quorem>
 8007d08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007d0c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d10:	eba6 020a 	sub.w	r2, r6, sl
 8007d14:	4593      	cmp	fp, r2
 8007d16:	ddb4      	ble.n	8007c82 <_dtoa_r+0xaf2>
 8007d18:	9902      	ldr	r1, [sp, #8]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	220a      	movs	r2, #10
 8007d1e:	4648      	mov	r0, r9
 8007d20:	f000 f968 	bl	8007ff4 <__multadd>
 8007d24:	9002      	str	r0, [sp, #8]
 8007d26:	e7eb      	b.n	8007d00 <_dtoa_r+0xb70>
 8007d28:	08008f3c 	.word	0x08008f3c
 8007d2c:	08008ec0 	.word	0x08008ec0

08007d30 <_free_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4605      	mov	r5, r0
 8007d34:	2900      	cmp	r1, #0
 8007d36:	d041      	beq.n	8007dbc <_free_r+0x8c>
 8007d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3c:	1f0c      	subs	r4, r1, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bfb8      	it	lt
 8007d42:	18e4      	addlt	r4, r4, r3
 8007d44:	f000 f8e8 	bl	8007f18 <__malloc_lock>
 8007d48:	4a1d      	ldr	r2, [pc, #116]	@ (8007dc0 <_free_r+0x90>)
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	b933      	cbnz	r3, 8007d5c <_free_r+0x2c>
 8007d4e:	6063      	str	r3, [r4, #4]
 8007d50:	6014      	str	r4, [r2, #0]
 8007d52:	4628      	mov	r0, r5
 8007d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d58:	f000 b8e4 	b.w	8007f24 <__malloc_unlock>
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d908      	bls.n	8007d72 <_free_r+0x42>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	1821      	adds	r1, r4, r0
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf01      	itttt	eq
 8007d68:	6819      	ldreq	r1, [r3, #0]
 8007d6a:	685b      	ldreq	r3, [r3, #4]
 8007d6c:	1809      	addeq	r1, r1, r0
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	e7ed      	b.n	8007d4e <_free_r+0x1e>
 8007d72:	461a      	mov	r2, r3
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b10b      	cbz	r3, 8007d7c <_free_r+0x4c>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d9fa      	bls.n	8007d72 <_free_r+0x42>
 8007d7c:	6811      	ldr	r1, [r2, #0]
 8007d7e:	1850      	adds	r0, r2, r1
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d10b      	bne.n	8007d9c <_free_r+0x6c>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	4401      	add	r1, r0
 8007d88:	1850      	adds	r0, r2, r1
 8007d8a:	4283      	cmp	r3, r0
 8007d8c:	6011      	str	r1, [r2, #0]
 8007d8e:	d1e0      	bne.n	8007d52 <_free_r+0x22>
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	6053      	str	r3, [r2, #4]
 8007d96:	4408      	add	r0, r1
 8007d98:	6010      	str	r0, [r2, #0]
 8007d9a:	e7da      	b.n	8007d52 <_free_r+0x22>
 8007d9c:	d902      	bls.n	8007da4 <_free_r+0x74>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	e7d6      	b.n	8007d52 <_free_r+0x22>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	1821      	adds	r1, r4, r0
 8007da8:	428b      	cmp	r3, r1
 8007daa:	bf04      	itt	eq
 8007dac:	6819      	ldreq	r1, [r3, #0]
 8007dae:	685b      	ldreq	r3, [r3, #4]
 8007db0:	6063      	str	r3, [r4, #4]
 8007db2:	bf04      	itt	eq
 8007db4:	1809      	addeq	r1, r1, r0
 8007db6:	6021      	streq	r1, [r4, #0]
 8007db8:	6054      	str	r4, [r2, #4]
 8007dba:	e7ca      	b.n	8007d52 <_free_r+0x22>
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
 8007dbe:	bf00      	nop
 8007dc0:	2000068c 	.word	0x2000068c

08007dc4 <malloc>:
 8007dc4:	4b02      	ldr	r3, [pc, #8]	@ (8007dd0 <malloc+0xc>)
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	f000 b825 	b.w	8007e18 <_malloc_r>
 8007dce:	bf00      	nop
 8007dd0:	2000001c 	.word	0x2000001c

08007dd4 <sbrk_aligned>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e14 <sbrk_aligned+0x40>)
 8007dd8:	460c      	mov	r4, r1
 8007dda:	6831      	ldr	r1, [r6, #0]
 8007ddc:	4605      	mov	r5, r0
 8007dde:	b911      	cbnz	r1, 8007de6 <sbrk_aligned+0x12>
 8007de0:	f000 fccc 	bl	800877c <_sbrk_r>
 8007de4:	6030      	str	r0, [r6, #0]
 8007de6:	4621      	mov	r1, r4
 8007de8:	4628      	mov	r0, r5
 8007dea:	f000 fcc7 	bl	800877c <_sbrk_r>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	d103      	bne.n	8007dfa <sbrk_aligned+0x26>
 8007df2:	f04f 34ff 	mov.w	r4, #4294967295
 8007df6:	4620      	mov	r0, r4
 8007df8:	bd70      	pop	{r4, r5, r6, pc}
 8007dfa:	1cc4      	adds	r4, r0, #3
 8007dfc:	f024 0403 	bic.w	r4, r4, #3
 8007e00:	42a0      	cmp	r0, r4
 8007e02:	d0f8      	beq.n	8007df6 <sbrk_aligned+0x22>
 8007e04:	1a21      	subs	r1, r4, r0
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 fcb8 	bl	800877c <_sbrk_r>
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d1f2      	bne.n	8007df6 <sbrk_aligned+0x22>
 8007e10:	e7ef      	b.n	8007df2 <sbrk_aligned+0x1e>
 8007e12:	bf00      	nop
 8007e14:	20000688 	.word	0x20000688

08007e18 <_malloc_r>:
 8007e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	1ccd      	adds	r5, r1, #3
 8007e1e:	f025 0503 	bic.w	r5, r5, #3
 8007e22:	3508      	adds	r5, #8
 8007e24:	2d0c      	cmp	r5, #12
 8007e26:	bf38      	it	cc
 8007e28:	250c      	movcc	r5, #12
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	db01      	blt.n	8007e34 <_malloc_r+0x1c>
 8007e30:	42a9      	cmp	r1, r5
 8007e32:	d904      	bls.n	8007e3e <_malloc_r+0x26>
 8007e34:	230c      	movs	r3, #12
 8007e36:	6033      	str	r3, [r6, #0]
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f14 <_malloc_r+0xfc>
 8007e42:	f000 f869 	bl	8007f18 <__malloc_lock>
 8007e46:	f8d8 3000 	ldr.w	r3, [r8]
 8007e4a:	461c      	mov	r4, r3
 8007e4c:	bb44      	cbnz	r4, 8007ea0 <_malloc_r+0x88>
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff ffbf 	bl	8007dd4 <sbrk_aligned>
 8007e56:	1c43      	adds	r3, r0, #1
 8007e58:	4604      	mov	r4, r0
 8007e5a:	d158      	bne.n	8007f0e <_malloc_r+0xf6>
 8007e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e60:	4627      	mov	r7, r4
 8007e62:	2f00      	cmp	r7, #0
 8007e64:	d143      	bne.n	8007eee <_malloc_r+0xd6>
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	d04b      	beq.n	8007f02 <_malloc_r+0xea>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	4630      	mov	r0, r6
 8007e70:	eb04 0903 	add.w	r9, r4, r3
 8007e74:	f000 fc82 	bl	800877c <_sbrk_r>
 8007e78:	4581      	cmp	r9, r0
 8007e7a:	d142      	bne.n	8007f02 <_malloc_r+0xea>
 8007e7c:	6821      	ldr	r1, [r4, #0]
 8007e7e:	1a6d      	subs	r5, r5, r1
 8007e80:	4629      	mov	r1, r5
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff ffa6 	bl	8007dd4 <sbrk_aligned>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d03a      	beq.n	8007f02 <_malloc_r+0xea>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	442b      	add	r3, r5
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	f8d8 3000 	ldr.w	r3, [r8]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	bb62      	cbnz	r2, 8007ef4 <_malloc_r+0xdc>
 8007e9a:	f8c8 7000 	str.w	r7, [r8]
 8007e9e:	e00f      	b.n	8007ec0 <_malloc_r+0xa8>
 8007ea0:	6822      	ldr	r2, [r4, #0]
 8007ea2:	1b52      	subs	r2, r2, r5
 8007ea4:	d420      	bmi.n	8007ee8 <_malloc_r+0xd0>
 8007ea6:	2a0b      	cmp	r2, #11
 8007ea8:	d917      	bls.n	8007eda <_malloc_r+0xc2>
 8007eaa:	1961      	adds	r1, r4, r5
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	6025      	str	r5, [r4, #0]
 8007eb0:	bf18      	it	ne
 8007eb2:	6059      	strne	r1, [r3, #4]
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	bf08      	it	eq
 8007eb8:	f8c8 1000 	streq.w	r1, [r8]
 8007ebc:	5162      	str	r2, [r4, r5]
 8007ebe:	604b      	str	r3, [r1, #4]
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f000 f82f 	bl	8007f24 <__malloc_unlock>
 8007ec6:	f104 000b 	add.w	r0, r4, #11
 8007eca:	1d23      	adds	r3, r4, #4
 8007ecc:	f020 0007 	bic.w	r0, r0, #7
 8007ed0:	1ac2      	subs	r2, r0, r3
 8007ed2:	bf1c      	itt	ne
 8007ed4:	1a1b      	subne	r3, r3, r0
 8007ed6:	50a3      	strne	r3, [r4, r2]
 8007ed8:	e7af      	b.n	8007e3a <_malloc_r+0x22>
 8007eda:	6862      	ldr	r2, [r4, #4]
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	bf0c      	ite	eq
 8007ee0:	f8c8 2000 	streq.w	r2, [r8]
 8007ee4:	605a      	strne	r2, [r3, #4]
 8007ee6:	e7eb      	b.n	8007ec0 <_malloc_r+0xa8>
 8007ee8:	4623      	mov	r3, r4
 8007eea:	6864      	ldr	r4, [r4, #4]
 8007eec:	e7ae      	b.n	8007e4c <_malloc_r+0x34>
 8007eee:	463c      	mov	r4, r7
 8007ef0:	687f      	ldr	r7, [r7, #4]
 8007ef2:	e7b6      	b.n	8007e62 <_malloc_r+0x4a>
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d1fb      	bne.n	8007ef4 <_malloc_r+0xdc>
 8007efc:	2300      	movs	r3, #0
 8007efe:	6053      	str	r3, [r2, #4]
 8007f00:	e7de      	b.n	8007ec0 <_malloc_r+0xa8>
 8007f02:	230c      	movs	r3, #12
 8007f04:	6033      	str	r3, [r6, #0]
 8007f06:	4630      	mov	r0, r6
 8007f08:	f000 f80c 	bl	8007f24 <__malloc_unlock>
 8007f0c:	e794      	b.n	8007e38 <_malloc_r+0x20>
 8007f0e:	6005      	str	r5, [r0, #0]
 8007f10:	e7d6      	b.n	8007ec0 <_malloc_r+0xa8>
 8007f12:	bf00      	nop
 8007f14:	2000068c 	.word	0x2000068c

08007f18 <__malloc_lock>:
 8007f18:	4801      	ldr	r0, [pc, #4]	@ (8007f20 <__malloc_lock+0x8>)
 8007f1a:	f7ff b8a0 	b.w	800705e <__retarget_lock_acquire_recursive>
 8007f1e:	bf00      	nop
 8007f20:	20000684 	.word	0x20000684

08007f24 <__malloc_unlock>:
 8007f24:	4801      	ldr	r0, [pc, #4]	@ (8007f2c <__malloc_unlock+0x8>)
 8007f26:	f7ff b89b 	b.w	8007060 <__retarget_lock_release_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20000684 	.word	0x20000684

08007f30 <_Balloc>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	69c6      	ldr	r6, [r0, #28]
 8007f34:	4604      	mov	r4, r0
 8007f36:	460d      	mov	r5, r1
 8007f38:	b976      	cbnz	r6, 8007f58 <_Balloc+0x28>
 8007f3a:	2010      	movs	r0, #16
 8007f3c:	f7ff ff42 	bl	8007dc4 <malloc>
 8007f40:	4602      	mov	r2, r0
 8007f42:	61e0      	str	r0, [r4, #28]
 8007f44:	b920      	cbnz	r0, 8007f50 <_Balloc+0x20>
 8007f46:	4b18      	ldr	r3, [pc, #96]	@ (8007fa8 <_Balloc+0x78>)
 8007f48:	4818      	ldr	r0, [pc, #96]	@ (8007fac <_Balloc+0x7c>)
 8007f4a:	216b      	movs	r1, #107	@ 0x6b
 8007f4c:	f000 fc26 	bl	800879c <__assert_func>
 8007f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f54:	6006      	str	r6, [r0, #0]
 8007f56:	60c6      	str	r6, [r0, #12]
 8007f58:	69e6      	ldr	r6, [r4, #28]
 8007f5a:	68f3      	ldr	r3, [r6, #12]
 8007f5c:	b183      	cbz	r3, 8007f80 <_Balloc+0x50>
 8007f5e:	69e3      	ldr	r3, [r4, #28]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f66:	b9b8      	cbnz	r0, 8007f98 <_Balloc+0x68>
 8007f68:	2101      	movs	r1, #1
 8007f6a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f6e:	1d72      	adds	r2, r6, #5
 8007f70:	0092      	lsls	r2, r2, #2
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 fc30 	bl	80087d8 <_calloc_r>
 8007f78:	b160      	cbz	r0, 8007f94 <_Balloc+0x64>
 8007f7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f7e:	e00e      	b.n	8007f9e <_Balloc+0x6e>
 8007f80:	2221      	movs	r2, #33	@ 0x21
 8007f82:	2104      	movs	r1, #4
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fc27 	bl	80087d8 <_calloc_r>
 8007f8a:	69e3      	ldr	r3, [r4, #28]
 8007f8c:	60f0      	str	r0, [r6, #12]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e4      	bne.n	8007f5e <_Balloc+0x2e>
 8007f94:	2000      	movs	r0, #0
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	6802      	ldr	r2, [r0, #0]
 8007f9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fa4:	e7f7      	b.n	8007f96 <_Balloc+0x66>
 8007fa6:	bf00      	nop
 8007fa8:	08008ecd 	.word	0x08008ecd
 8007fac:	08008f4d 	.word	0x08008f4d

08007fb0 <_Bfree>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	69c6      	ldr	r6, [r0, #28]
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	b976      	cbnz	r6, 8007fd8 <_Bfree+0x28>
 8007fba:	2010      	movs	r0, #16
 8007fbc:	f7ff ff02 	bl	8007dc4 <malloc>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	61e8      	str	r0, [r5, #28]
 8007fc4:	b920      	cbnz	r0, 8007fd0 <_Bfree+0x20>
 8007fc6:	4b09      	ldr	r3, [pc, #36]	@ (8007fec <_Bfree+0x3c>)
 8007fc8:	4809      	ldr	r0, [pc, #36]	@ (8007ff0 <_Bfree+0x40>)
 8007fca:	218f      	movs	r1, #143	@ 0x8f
 8007fcc:	f000 fbe6 	bl	800879c <__assert_func>
 8007fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fd4:	6006      	str	r6, [r0, #0]
 8007fd6:	60c6      	str	r6, [r0, #12]
 8007fd8:	b13c      	cbz	r4, 8007fea <_Bfree+0x3a>
 8007fda:	69eb      	ldr	r3, [r5, #28]
 8007fdc:	6862      	ldr	r2, [r4, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fe4:	6021      	str	r1, [r4, #0]
 8007fe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	08008ecd 	.word	0x08008ecd
 8007ff0:	08008f4d 	.word	0x08008f4d

08007ff4 <__multadd>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	690d      	ldr	r5, [r1, #16]
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	461e      	mov	r6, r3
 8008000:	f101 0c14 	add.w	ip, r1, #20
 8008004:	2000      	movs	r0, #0
 8008006:	f8dc 3000 	ldr.w	r3, [ip]
 800800a:	b299      	uxth	r1, r3
 800800c:	fb02 6101 	mla	r1, r2, r1, r6
 8008010:	0c1e      	lsrs	r6, r3, #16
 8008012:	0c0b      	lsrs	r3, r1, #16
 8008014:	fb02 3306 	mla	r3, r2, r6, r3
 8008018:	b289      	uxth	r1, r1
 800801a:	3001      	adds	r0, #1
 800801c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008020:	4285      	cmp	r5, r0
 8008022:	f84c 1b04 	str.w	r1, [ip], #4
 8008026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800802a:	dcec      	bgt.n	8008006 <__multadd+0x12>
 800802c:	b30e      	cbz	r6, 8008072 <__multadd+0x7e>
 800802e:	68a3      	ldr	r3, [r4, #8]
 8008030:	42ab      	cmp	r3, r5
 8008032:	dc19      	bgt.n	8008068 <__multadd+0x74>
 8008034:	6861      	ldr	r1, [r4, #4]
 8008036:	4638      	mov	r0, r7
 8008038:	3101      	adds	r1, #1
 800803a:	f7ff ff79 	bl	8007f30 <_Balloc>
 800803e:	4680      	mov	r8, r0
 8008040:	b928      	cbnz	r0, 800804e <__multadd+0x5a>
 8008042:	4602      	mov	r2, r0
 8008044:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <__multadd+0x84>)
 8008046:	480d      	ldr	r0, [pc, #52]	@ (800807c <__multadd+0x88>)
 8008048:	21ba      	movs	r1, #186	@ 0xba
 800804a:	f000 fba7 	bl	800879c <__assert_func>
 800804e:	6922      	ldr	r2, [r4, #16]
 8008050:	3202      	adds	r2, #2
 8008052:	f104 010c 	add.w	r1, r4, #12
 8008056:	0092      	lsls	r2, r2, #2
 8008058:	300c      	adds	r0, #12
 800805a:	f7ff f802 	bl	8007062 <memcpy>
 800805e:	4621      	mov	r1, r4
 8008060:	4638      	mov	r0, r7
 8008062:	f7ff ffa5 	bl	8007fb0 <_Bfree>
 8008066:	4644      	mov	r4, r8
 8008068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800806c:	3501      	adds	r5, #1
 800806e:	615e      	str	r6, [r3, #20]
 8008070:	6125      	str	r5, [r4, #16]
 8008072:	4620      	mov	r0, r4
 8008074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008078:	08008f3c 	.word	0x08008f3c
 800807c:	08008f4d 	.word	0x08008f4d

08008080 <__hi0bits>:
 8008080:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008084:	4603      	mov	r3, r0
 8008086:	bf36      	itet	cc
 8008088:	0403      	lslcc	r3, r0, #16
 800808a:	2000      	movcs	r0, #0
 800808c:	2010      	movcc	r0, #16
 800808e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008092:	bf3c      	itt	cc
 8008094:	021b      	lslcc	r3, r3, #8
 8008096:	3008      	addcc	r0, #8
 8008098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800809c:	bf3c      	itt	cc
 800809e:	011b      	lslcc	r3, r3, #4
 80080a0:	3004      	addcc	r0, #4
 80080a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a6:	bf3c      	itt	cc
 80080a8:	009b      	lslcc	r3, r3, #2
 80080aa:	3002      	addcc	r0, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	db05      	blt.n	80080bc <__hi0bits+0x3c>
 80080b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080b4:	f100 0001 	add.w	r0, r0, #1
 80080b8:	bf08      	it	eq
 80080ba:	2020      	moveq	r0, #32
 80080bc:	4770      	bx	lr

080080be <__lo0bits>:
 80080be:	6803      	ldr	r3, [r0, #0]
 80080c0:	4602      	mov	r2, r0
 80080c2:	f013 0007 	ands.w	r0, r3, #7
 80080c6:	d00b      	beq.n	80080e0 <__lo0bits+0x22>
 80080c8:	07d9      	lsls	r1, r3, #31
 80080ca:	d421      	bmi.n	8008110 <__lo0bits+0x52>
 80080cc:	0798      	lsls	r0, r3, #30
 80080ce:	bf49      	itett	mi
 80080d0:	085b      	lsrmi	r3, r3, #1
 80080d2:	089b      	lsrpl	r3, r3, #2
 80080d4:	2001      	movmi	r0, #1
 80080d6:	6013      	strmi	r3, [r2, #0]
 80080d8:	bf5c      	itt	pl
 80080da:	6013      	strpl	r3, [r2, #0]
 80080dc:	2002      	movpl	r0, #2
 80080de:	4770      	bx	lr
 80080e0:	b299      	uxth	r1, r3
 80080e2:	b909      	cbnz	r1, 80080e8 <__lo0bits+0x2a>
 80080e4:	0c1b      	lsrs	r3, r3, #16
 80080e6:	2010      	movs	r0, #16
 80080e8:	b2d9      	uxtb	r1, r3
 80080ea:	b909      	cbnz	r1, 80080f0 <__lo0bits+0x32>
 80080ec:	3008      	adds	r0, #8
 80080ee:	0a1b      	lsrs	r3, r3, #8
 80080f0:	0719      	lsls	r1, r3, #28
 80080f2:	bf04      	itt	eq
 80080f4:	091b      	lsreq	r3, r3, #4
 80080f6:	3004      	addeq	r0, #4
 80080f8:	0799      	lsls	r1, r3, #30
 80080fa:	bf04      	itt	eq
 80080fc:	089b      	lsreq	r3, r3, #2
 80080fe:	3002      	addeq	r0, #2
 8008100:	07d9      	lsls	r1, r3, #31
 8008102:	d403      	bmi.n	800810c <__lo0bits+0x4e>
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	f100 0001 	add.w	r0, r0, #1
 800810a:	d003      	beq.n	8008114 <__lo0bits+0x56>
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	4770      	bx	lr
 8008110:	2000      	movs	r0, #0
 8008112:	4770      	bx	lr
 8008114:	2020      	movs	r0, #32
 8008116:	4770      	bx	lr

08008118 <__i2b>:
 8008118:	b510      	push	{r4, lr}
 800811a:	460c      	mov	r4, r1
 800811c:	2101      	movs	r1, #1
 800811e:	f7ff ff07 	bl	8007f30 <_Balloc>
 8008122:	4602      	mov	r2, r0
 8008124:	b928      	cbnz	r0, 8008132 <__i2b+0x1a>
 8008126:	4b05      	ldr	r3, [pc, #20]	@ (800813c <__i2b+0x24>)
 8008128:	4805      	ldr	r0, [pc, #20]	@ (8008140 <__i2b+0x28>)
 800812a:	f240 1145 	movw	r1, #325	@ 0x145
 800812e:	f000 fb35 	bl	800879c <__assert_func>
 8008132:	2301      	movs	r3, #1
 8008134:	6144      	str	r4, [r0, #20]
 8008136:	6103      	str	r3, [r0, #16]
 8008138:	bd10      	pop	{r4, pc}
 800813a:	bf00      	nop
 800813c:	08008f3c 	.word	0x08008f3c
 8008140:	08008f4d 	.word	0x08008f4d

08008144 <__multiply>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	4617      	mov	r7, r2
 800814a:	690a      	ldr	r2, [r1, #16]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	429a      	cmp	r2, r3
 8008150:	bfa8      	it	ge
 8008152:	463b      	movge	r3, r7
 8008154:	4689      	mov	r9, r1
 8008156:	bfa4      	itt	ge
 8008158:	460f      	movge	r7, r1
 800815a:	4699      	movge	r9, r3
 800815c:	693d      	ldr	r5, [r7, #16]
 800815e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	eb05 060a 	add.w	r6, r5, sl
 800816a:	42b3      	cmp	r3, r6
 800816c:	b085      	sub	sp, #20
 800816e:	bfb8      	it	lt
 8008170:	3101      	addlt	r1, #1
 8008172:	f7ff fedd 	bl	8007f30 <_Balloc>
 8008176:	b930      	cbnz	r0, 8008186 <__multiply+0x42>
 8008178:	4602      	mov	r2, r0
 800817a:	4b41      	ldr	r3, [pc, #260]	@ (8008280 <__multiply+0x13c>)
 800817c:	4841      	ldr	r0, [pc, #260]	@ (8008284 <__multiply+0x140>)
 800817e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008182:	f000 fb0b 	bl	800879c <__assert_func>
 8008186:	f100 0414 	add.w	r4, r0, #20
 800818a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800818e:	4623      	mov	r3, r4
 8008190:	2200      	movs	r2, #0
 8008192:	4573      	cmp	r3, lr
 8008194:	d320      	bcc.n	80081d8 <__multiply+0x94>
 8008196:	f107 0814 	add.w	r8, r7, #20
 800819a:	f109 0114 	add.w	r1, r9, #20
 800819e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80081a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80081a6:	9302      	str	r3, [sp, #8]
 80081a8:	1beb      	subs	r3, r5, r7
 80081aa:	3b15      	subs	r3, #21
 80081ac:	f023 0303 	bic.w	r3, r3, #3
 80081b0:	3304      	adds	r3, #4
 80081b2:	3715      	adds	r7, #21
 80081b4:	42bd      	cmp	r5, r7
 80081b6:	bf38      	it	cc
 80081b8:	2304      	movcc	r3, #4
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	9b02      	ldr	r3, [sp, #8]
 80081be:	9103      	str	r1, [sp, #12]
 80081c0:	428b      	cmp	r3, r1
 80081c2:	d80c      	bhi.n	80081de <__multiply+0x9a>
 80081c4:	2e00      	cmp	r6, #0
 80081c6:	dd03      	ble.n	80081d0 <__multiply+0x8c>
 80081c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d055      	beq.n	800827c <__multiply+0x138>
 80081d0:	6106      	str	r6, [r0, #16]
 80081d2:	b005      	add	sp, #20
 80081d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d8:	f843 2b04 	str.w	r2, [r3], #4
 80081dc:	e7d9      	b.n	8008192 <__multiply+0x4e>
 80081de:	f8b1 a000 	ldrh.w	sl, [r1]
 80081e2:	f1ba 0f00 	cmp.w	sl, #0
 80081e6:	d01f      	beq.n	8008228 <__multiply+0xe4>
 80081e8:	46c4      	mov	ip, r8
 80081ea:	46a1      	mov	r9, r4
 80081ec:	2700      	movs	r7, #0
 80081ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 80081f2:	f8d9 3000 	ldr.w	r3, [r9]
 80081f6:	fa1f fb82 	uxth.w	fp, r2
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008200:	443b      	add	r3, r7
 8008202:	f8d9 7000 	ldr.w	r7, [r9]
 8008206:	0c12      	lsrs	r2, r2, #16
 8008208:	0c3f      	lsrs	r7, r7, #16
 800820a:	fb0a 7202 	mla	r2, sl, r2, r7
 800820e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008212:	b29b      	uxth	r3, r3
 8008214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008218:	4565      	cmp	r5, ip
 800821a:	f849 3b04 	str.w	r3, [r9], #4
 800821e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008222:	d8e4      	bhi.n	80081ee <__multiply+0xaa>
 8008224:	9b01      	ldr	r3, [sp, #4]
 8008226:	50e7      	str	r7, [r4, r3]
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800822e:	3104      	adds	r1, #4
 8008230:	f1b9 0f00 	cmp.w	r9, #0
 8008234:	d020      	beq.n	8008278 <__multiply+0x134>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	4647      	mov	r7, r8
 800823a:	46a4      	mov	ip, r4
 800823c:	f04f 0a00 	mov.w	sl, #0
 8008240:	f8b7 b000 	ldrh.w	fp, [r7]
 8008244:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008248:	fb09 220b 	mla	r2, r9, fp, r2
 800824c:	4452      	add	r2, sl
 800824e:	b29b      	uxth	r3, r3
 8008250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008254:	f84c 3b04 	str.w	r3, [ip], #4
 8008258:	f857 3b04 	ldr.w	r3, [r7], #4
 800825c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008260:	f8bc 3000 	ldrh.w	r3, [ip]
 8008264:	fb09 330a 	mla	r3, r9, sl, r3
 8008268:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800826c:	42bd      	cmp	r5, r7
 800826e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008272:	d8e5      	bhi.n	8008240 <__multiply+0xfc>
 8008274:	9a01      	ldr	r2, [sp, #4]
 8008276:	50a3      	str	r3, [r4, r2]
 8008278:	3404      	adds	r4, #4
 800827a:	e79f      	b.n	80081bc <__multiply+0x78>
 800827c:	3e01      	subs	r6, #1
 800827e:	e7a1      	b.n	80081c4 <__multiply+0x80>
 8008280:	08008f3c 	.word	0x08008f3c
 8008284:	08008f4d 	.word	0x08008f4d

08008288 <__pow5mult>:
 8008288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800828c:	4615      	mov	r5, r2
 800828e:	f012 0203 	ands.w	r2, r2, #3
 8008292:	4607      	mov	r7, r0
 8008294:	460e      	mov	r6, r1
 8008296:	d007      	beq.n	80082a8 <__pow5mult+0x20>
 8008298:	4c25      	ldr	r4, [pc, #148]	@ (8008330 <__pow5mult+0xa8>)
 800829a:	3a01      	subs	r2, #1
 800829c:	2300      	movs	r3, #0
 800829e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082a2:	f7ff fea7 	bl	8007ff4 <__multadd>
 80082a6:	4606      	mov	r6, r0
 80082a8:	10ad      	asrs	r5, r5, #2
 80082aa:	d03d      	beq.n	8008328 <__pow5mult+0xa0>
 80082ac:	69fc      	ldr	r4, [r7, #28]
 80082ae:	b97c      	cbnz	r4, 80082d0 <__pow5mult+0x48>
 80082b0:	2010      	movs	r0, #16
 80082b2:	f7ff fd87 	bl	8007dc4 <malloc>
 80082b6:	4602      	mov	r2, r0
 80082b8:	61f8      	str	r0, [r7, #28]
 80082ba:	b928      	cbnz	r0, 80082c8 <__pow5mult+0x40>
 80082bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008334 <__pow5mult+0xac>)
 80082be:	481e      	ldr	r0, [pc, #120]	@ (8008338 <__pow5mult+0xb0>)
 80082c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082c4:	f000 fa6a 	bl	800879c <__assert_func>
 80082c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082cc:	6004      	str	r4, [r0, #0]
 80082ce:	60c4      	str	r4, [r0, #12]
 80082d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082d8:	b94c      	cbnz	r4, 80082ee <__pow5mult+0x66>
 80082da:	f240 2171 	movw	r1, #625	@ 0x271
 80082de:	4638      	mov	r0, r7
 80082e0:	f7ff ff1a 	bl	8008118 <__i2b>
 80082e4:	2300      	movs	r3, #0
 80082e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80082ea:	4604      	mov	r4, r0
 80082ec:	6003      	str	r3, [r0, #0]
 80082ee:	f04f 0900 	mov.w	r9, #0
 80082f2:	07eb      	lsls	r3, r5, #31
 80082f4:	d50a      	bpl.n	800830c <__pow5mult+0x84>
 80082f6:	4631      	mov	r1, r6
 80082f8:	4622      	mov	r2, r4
 80082fa:	4638      	mov	r0, r7
 80082fc:	f7ff ff22 	bl	8008144 <__multiply>
 8008300:	4631      	mov	r1, r6
 8008302:	4680      	mov	r8, r0
 8008304:	4638      	mov	r0, r7
 8008306:	f7ff fe53 	bl	8007fb0 <_Bfree>
 800830a:	4646      	mov	r6, r8
 800830c:	106d      	asrs	r5, r5, #1
 800830e:	d00b      	beq.n	8008328 <__pow5mult+0xa0>
 8008310:	6820      	ldr	r0, [r4, #0]
 8008312:	b938      	cbnz	r0, 8008324 <__pow5mult+0x9c>
 8008314:	4622      	mov	r2, r4
 8008316:	4621      	mov	r1, r4
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff ff13 	bl	8008144 <__multiply>
 800831e:	6020      	str	r0, [r4, #0]
 8008320:	f8c0 9000 	str.w	r9, [r0]
 8008324:	4604      	mov	r4, r0
 8008326:	e7e4      	b.n	80082f2 <__pow5mult+0x6a>
 8008328:	4630      	mov	r0, r6
 800832a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800832e:	bf00      	nop
 8008330:	08009000 	.word	0x08009000
 8008334:	08008ecd 	.word	0x08008ecd
 8008338:	08008f4d 	.word	0x08008f4d

0800833c <__lshift>:
 800833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	460c      	mov	r4, r1
 8008342:	6849      	ldr	r1, [r1, #4]
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800834a:	68a3      	ldr	r3, [r4, #8]
 800834c:	4607      	mov	r7, r0
 800834e:	4691      	mov	r9, r2
 8008350:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008354:	f108 0601 	add.w	r6, r8, #1
 8008358:	42b3      	cmp	r3, r6
 800835a:	db0b      	blt.n	8008374 <__lshift+0x38>
 800835c:	4638      	mov	r0, r7
 800835e:	f7ff fde7 	bl	8007f30 <_Balloc>
 8008362:	4605      	mov	r5, r0
 8008364:	b948      	cbnz	r0, 800837a <__lshift+0x3e>
 8008366:	4602      	mov	r2, r0
 8008368:	4b28      	ldr	r3, [pc, #160]	@ (800840c <__lshift+0xd0>)
 800836a:	4829      	ldr	r0, [pc, #164]	@ (8008410 <__lshift+0xd4>)
 800836c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008370:	f000 fa14 	bl	800879c <__assert_func>
 8008374:	3101      	adds	r1, #1
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	e7ee      	b.n	8008358 <__lshift+0x1c>
 800837a:	2300      	movs	r3, #0
 800837c:	f100 0114 	add.w	r1, r0, #20
 8008380:	f100 0210 	add.w	r2, r0, #16
 8008384:	4618      	mov	r0, r3
 8008386:	4553      	cmp	r3, sl
 8008388:	db33      	blt.n	80083f2 <__lshift+0xb6>
 800838a:	6920      	ldr	r0, [r4, #16]
 800838c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008390:	f104 0314 	add.w	r3, r4, #20
 8008394:	f019 091f 	ands.w	r9, r9, #31
 8008398:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800839c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083a0:	d02b      	beq.n	80083fa <__lshift+0xbe>
 80083a2:	f1c9 0e20 	rsb	lr, r9, #32
 80083a6:	468a      	mov	sl, r1
 80083a8:	2200      	movs	r2, #0
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	fa00 f009 	lsl.w	r0, r0, r9
 80083b0:	4310      	orrs	r0, r2
 80083b2:	f84a 0b04 	str.w	r0, [sl], #4
 80083b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ba:	459c      	cmp	ip, r3
 80083bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80083c0:	d8f3      	bhi.n	80083aa <__lshift+0x6e>
 80083c2:	ebac 0304 	sub.w	r3, ip, r4
 80083c6:	3b15      	subs	r3, #21
 80083c8:	f023 0303 	bic.w	r3, r3, #3
 80083cc:	3304      	adds	r3, #4
 80083ce:	f104 0015 	add.w	r0, r4, #21
 80083d2:	4560      	cmp	r0, ip
 80083d4:	bf88      	it	hi
 80083d6:	2304      	movhi	r3, #4
 80083d8:	50ca      	str	r2, [r1, r3]
 80083da:	b10a      	cbz	r2, 80083e0 <__lshift+0xa4>
 80083dc:	f108 0602 	add.w	r6, r8, #2
 80083e0:	3e01      	subs	r6, #1
 80083e2:	4638      	mov	r0, r7
 80083e4:	612e      	str	r6, [r5, #16]
 80083e6:	4621      	mov	r1, r4
 80083e8:	f7ff fde2 	bl	8007fb0 <_Bfree>
 80083ec:	4628      	mov	r0, r5
 80083ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80083f6:	3301      	adds	r3, #1
 80083f8:	e7c5      	b.n	8008386 <__lshift+0x4a>
 80083fa:	3904      	subs	r1, #4
 80083fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008400:	f841 2f04 	str.w	r2, [r1, #4]!
 8008404:	459c      	cmp	ip, r3
 8008406:	d8f9      	bhi.n	80083fc <__lshift+0xc0>
 8008408:	e7ea      	b.n	80083e0 <__lshift+0xa4>
 800840a:	bf00      	nop
 800840c:	08008f3c 	.word	0x08008f3c
 8008410:	08008f4d 	.word	0x08008f4d

08008414 <__mcmp>:
 8008414:	690a      	ldr	r2, [r1, #16]
 8008416:	4603      	mov	r3, r0
 8008418:	6900      	ldr	r0, [r0, #16]
 800841a:	1a80      	subs	r0, r0, r2
 800841c:	b530      	push	{r4, r5, lr}
 800841e:	d10e      	bne.n	800843e <__mcmp+0x2a>
 8008420:	3314      	adds	r3, #20
 8008422:	3114      	adds	r1, #20
 8008424:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008428:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800842c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008430:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008434:	4295      	cmp	r5, r2
 8008436:	d003      	beq.n	8008440 <__mcmp+0x2c>
 8008438:	d205      	bcs.n	8008446 <__mcmp+0x32>
 800843a:	f04f 30ff 	mov.w	r0, #4294967295
 800843e:	bd30      	pop	{r4, r5, pc}
 8008440:	42a3      	cmp	r3, r4
 8008442:	d3f3      	bcc.n	800842c <__mcmp+0x18>
 8008444:	e7fb      	b.n	800843e <__mcmp+0x2a>
 8008446:	2001      	movs	r0, #1
 8008448:	e7f9      	b.n	800843e <__mcmp+0x2a>
	...

0800844c <__mdiff>:
 800844c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	4689      	mov	r9, r1
 8008452:	4606      	mov	r6, r0
 8008454:	4611      	mov	r1, r2
 8008456:	4648      	mov	r0, r9
 8008458:	4614      	mov	r4, r2
 800845a:	f7ff ffdb 	bl	8008414 <__mcmp>
 800845e:	1e05      	subs	r5, r0, #0
 8008460:	d112      	bne.n	8008488 <__mdiff+0x3c>
 8008462:	4629      	mov	r1, r5
 8008464:	4630      	mov	r0, r6
 8008466:	f7ff fd63 	bl	8007f30 <_Balloc>
 800846a:	4602      	mov	r2, r0
 800846c:	b928      	cbnz	r0, 800847a <__mdiff+0x2e>
 800846e:	4b3f      	ldr	r3, [pc, #252]	@ (800856c <__mdiff+0x120>)
 8008470:	f240 2137 	movw	r1, #567	@ 0x237
 8008474:	483e      	ldr	r0, [pc, #248]	@ (8008570 <__mdiff+0x124>)
 8008476:	f000 f991 	bl	800879c <__assert_func>
 800847a:	2301      	movs	r3, #1
 800847c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008480:	4610      	mov	r0, r2
 8008482:	b003      	add	sp, #12
 8008484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008488:	bfbc      	itt	lt
 800848a:	464b      	movlt	r3, r9
 800848c:	46a1      	movlt	r9, r4
 800848e:	4630      	mov	r0, r6
 8008490:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008494:	bfba      	itte	lt
 8008496:	461c      	movlt	r4, r3
 8008498:	2501      	movlt	r5, #1
 800849a:	2500      	movge	r5, #0
 800849c:	f7ff fd48 	bl	8007f30 <_Balloc>
 80084a0:	4602      	mov	r2, r0
 80084a2:	b918      	cbnz	r0, 80084ac <__mdiff+0x60>
 80084a4:	4b31      	ldr	r3, [pc, #196]	@ (800856c <__mdiff+0x120>)
 80084a6:	f240 2145 	movw	r1, #581	@ 0x245
 80084aa:	e7e3      	b.n	8008474 <__mdiff+0x28>
 80084ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084b0:	6926      	ldr	r6, [r4, #16]
 80084b2:	60c5      	str	r5, [r0, #12]
 80084b4:	f109 0310 	add.w	r3, r9, #16
 80084b8:	f109 0514 	add.w	r5, r9, #20
 80084bc:	f104 0e14 	add.w	lr, r4, #20
 80084c0:	f100 0b14 	add.w	fp, r0, #20
 80084c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084cc:	9301      	str	r3, [sp, #4]
 80084ce:	46d9      	mov	r9, fp
 80084d0:	f04f 0c00 	mov.w	ip, #0
 80084d4:	9b01      	ldr	r3, [sp, #4]
 80084d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	fa1f f38a 	uxth.w	r3, sl
 80084e4:	4619      	mov	r1, r3
 80084e6:	b283      	uxth	r3, r0
 80084e8:	1acb      	subs	r3, r1, r3
 80084ea:	0c00      	lsrs	r0, r0, #16
 80084ec:	4463      	add	r3, ip
 80084ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80084f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084fc:	4576      	cmp	r6, lr
 80084fe:	f849 3b04 	str.w	r3, [r9], #4
 8008502:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008506:	d8e5      	bhi.n	80084d4 <__mdiff+0x88>
 8008508:	1b33      	subs	r3, r6, r4
 800850a:	3b15      	subs	r3, #21
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	3415      	adds	r4, #21
 8008512:	3304      	adds	r3, #4
 8008514:	42a6      	cmp	r6, r4
 8008516:	bf38      	it	cc
 8008518:	2304      	movcc	r3, #4
 800851a:	441d      	add	r5, r3
 800851c:	445b      	add	r3, fp
 800851e:	461e      	mov	r6, r3
 8008520:	462c      	mov	r4, r5
 8008522:	4544      	cmp	r4, r8
 8008524:	d30e      	bcc.n	8008544 <__mdiff+0xf8>
 8008526:	f108 0103 	add.w	r1, r8, #3
 800852a:	1b49      	subs	r1, r1, r5
 800852c:	f021 0103 	bic.w	r1, r1, #3
 8008530:	3d03      	subs	r5, #3
 8008532:	45a8      	cmp	r8, r5
 8008534:	bf38      	it	cc
 8008536:	2100      	movcc	r1, #0
 8008538:	440b      	add	r3, r1
 800853a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800853e:	b191      	cbz	r1, 8008566 <__mdiff+0x11a>
 8008540:	6117      	str	r7, [r2, #16]
 8008542:	e79d      	b.n	8008480 <__mdiff+0x34>
 8008544:	f854 1b04 	ldr.w	r1, [r4], #4
 8008548:	46e6      	mov	lr, ip
 800854a:	0c08      	lsrs	r0, r1, #16
 800854c:	fa1c fc81 	uxtah	ip, ip, r1
 8008550:	4471      	add	r1, lr
 8008552:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008556:	b289      	uxth	r1, r1
 8008558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800855c:	f846 1b04 	str.w	r1, [r6], #4
 8008560:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008564:	e7dd      	b.n	8008522 <__mdiff+0xd6>
 8008566:	3f01      	subs	r7, #1
 8008568:	e7e7      	b.n	800853a <__mdiff+0xee>
 800856a:	bf00      	nop
 800856c:	08008f3c 	.word	0x08008f3c
 8008570:	08008f4d 	.word	0x08008f4d

08008574 <__d2b>:
 8008574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008578:	460f      	mov	r7, r1
 800857a:	2101      	movs	r1, #1
 800857c:	ec59 8b10 	vmov	r8, r9, d0
 8008580:	4616      	mov	r6, r2
 8008582:	f7ff fcd5 	bl	8007f30 <_Balloc>
 8008586:	4604      	mov	r4, r0
 8008588:	b930      	cbnz	r0, 8008598 <__d2b+0x24>
 800858a:	4602      	mov	r2, r0
 800858c:	4b23      	ldr	r3, [pc, #140]	@ (800861c <__d2b+0xa8>)
 800858e:	4824      	ldr	r0, [pc, #144]	@ (8008620 <__d2b+0xac>)
 8008590:	f240 310f 	movw	r1, #783	@ 0x30f
 8008594:	f000 f902 	bl	800879c <__assert_func>
 8008598:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800859c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085a0:	b10d      	cbz	r5, 80085a6 <__d2b+0x32>
 80085a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	f1b8 0300 	subs.w	r3, r8, #0
 80085ac:	d023      	beq.n	80085f6 <__d2b+0x82>
 80085ae:	4668      	mov	r0, sp
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	f7ff fd84 	bl	80080be <__lo0bits>
 80085b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085ba:	b1d0      	cbz	r0, 80085f2 <__d2b+0x7e>
 80085bc:	f1c0 0320 	rsb	r3, r0, #32
 80085c0:	fa02 f303 	lsl.w	r3, r2, r3
 80085c4:	430b      	orrs	r3, r1
 80085c6:	40c2      	lsrs	r2, r0
 80085c8:	6163      	str	r3, [r4, #20]
 80085ca:	9201      	str	r2, [sp, #4]
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	61a3      	str	r3, [r4, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	bf0c      	ite	eq
 80085d4:	2201      	moveq	r2, #1
 80085d6:	2202      	movne	r2, #2
 80085d8:	6122      	str	r2, [r4, #16]
 80085da:	b1a5      	cbz	r5, 8008606 <__d2b+0x92>
 80085dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80085e0:	4405      	add	r5, r0
 80085e2:	603d      	str	r5, [r7, #0]
 80085e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80085e8:	6030      	str	r0, [r6, #0]
 80085ea:	4620      	mov	r0, r4
 80085ec:	b003      	add	sp, #12
 80085ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085f2:	6161      	str	r1, [r4, #20]
 80085f4:	e7ea      	b.n	80085cc <__d2b+0x58>
 80085f6:	a801      	add	r0, sp, #4
 80085f8:	f7ff fd61 	bl	80080be <__lo0bits>
 80085fc:	9b01      	ldr	r3, [sp, #4]
 80085fe:	6163      	str	r3, [r4, #20]
 8008600:	3020      	adds	r0, #32
 8008602:	2201      	movs	r2, #1
 8008604:	e7e8      	b.n	80085d8 <__d2b+0x64>
 8008606:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800860a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800860e:	6038      	str	r0, [r7, #0]
 8008610:	6918      	ldr	r0, [r3, #16]
 8008612:	f7ff fd35 	bl	8008080 <__hi0bits>
 8008616:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800861a:	e7e5      	b.n	80085e8 <__d2b+0x74>
 800861c:	08008f3c 	.word	0x08008f3c
 8008620:	08008f4d 	.word	0x08008f4d

08008624 <__sflush_r>:
 8008624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862c:	0716      	lsls	r6, r2, #28
 800862e:	4605      	mov	r5, r0
 8008630:	460c      	mov	r4, r1
 8008632:	d454      	bmi.n	80086de <__sflush_r+0xba>
 8008634:	684b      	ldr	r3, [r1, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	dc02      	bgt.n	8008640 <__sflush_r+0x1c>
 800863a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800863c:	2b00      	cmp	r3, #0
 800863e:	dd48      	ble.n	80086d2 <__sflush_r+0xae>
 8008640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008642:	2e00      	cmp	r6, #0
 8008644:	d045      	beq.n	80086d2 <__sflush_r+0xae>
 8008646:	2300      	movs	r3, #0
 8008648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800864c:	682f      	ldr	r7, [r5, #0]
 800864e:	6a21      	ldr	r1, [r4, #32]
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	d030      	beq.n	80086b6 <__sflush_r+0x92>
 8008654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	0759      	lsls	r1, r3, #29
 800865a:	d505      	bpl.n	8008668 <__sflush_r+0x44>
 800865c:	6863      	ldr	r3, [r4, #4]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008662:	b10b      	cbz	r3, 8008668 <__sflush_r+0x44>
 8008664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008666:	1ad2      	subs	r2, r2, r3
 8008668:	2300      	movs	r3, #0
 800866a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800866c:	6a21      	ldr	r1, [r4, #32]
 800866e:	4628      	mov	r0, r5
 8008670:	47b0      	blx	r6
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	d106      	bne.n	8008686 <__sflush_r+0x62>
 8008678:	6829      	ldr	r1, [r5, #0]
 800867a:	291d      	cmp	r1, #29
 800867c:	d82b      	bhi.n	80086d6 <__sflush_r+0xb2>
 800867e:	4a2a      	ldr	r2, [pc, #168]	@ (8008728 <__sflush_r+0x104>)
 8008680:	40ca      	lsrs	r2, r1
 8008682:	07d6      	lsls	r6, r2, #31
 8008684:	d527      	bpl.n	80086d6 <__sflush_r+0xb2>
 8008686:	2200      	movs	r2, #0
 8008688:	6062      	str	r2, [r4, #4]
 800868a:	04d9      	lsls	r1, r3, #19
 800868c:	6922      	ldr	r2, [r4, #16]
 800868e:	6022      	str	r2, [r4, #0]
 8008690:	d504      	bpl.n	800869c <__sflush_r+0x78>
 8008692:	1c42      	adds	r2, r0, #1
 8008694:	d101      	bne.n	800869a <__sflush_r+0x76>
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	b903      	cbnz	r3, 800869c <__sflush_r+0x78>
 800869a:	6560      	str	r0, [r4, #84]	@ 0x54
 800869c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800869e:	602f      	str	r7, [r5, #0]
 80086a0:	b1b9      	cbz	r1, 80086d2 <__sflush_r+0xae>
 80086a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086a6:	4299      	cmp	r1, r3
 80086a8:	d002      	beq.n	80086b0 <__sflush_r+0x8c>
 80086aa:	4628      	mov	r0, r5
 80086ac:	f7ff fb40 	bl	8007d30 <_free_r>
 80086b0:	2300      	movs	r3, #0
 80086b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80086b4:	e00d      	b.n	80086d2 <__sflush_r+0xae>
 80086b6:	2301      	movs	r3, #1
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b0      	blx	r6
 80086bc:	4602      	mov	r2, r0
 80086be:	1c50      	adds	r0, r2, #1
 80086c0:	d1c9      	bne.n	8008656 <__sflush_r+0x32>
 80086c2:	682b      	ldr	r3, [r5, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0c6      	beq.n	8008656 <__sflush_r+0x32>
 80086c8:	2b1d      	cmp	r3, #29
 80086ca:	d001      	beq.n	80086d0 <__sflush_r+0xac>
 80086cc:	2b16      	cmp	r3, #22
 80086ce:	d11e      	bne.n	800870e <__sflush_r+0xea>
 80086d0:	602f      	str	r7, [r5, #0]
 80086d2:	2000      	movs	r0, #0
 80086d4:	e022      	b.n	800871c <__sflush_r+0xf8>
 80086d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086da:	b21b      	sxth	r3, r3
 80086dc:	e01b      	b.n	8008716 <__sflush_r+0xf2>
 80086de:	690f      	ldr	r7, [r1, #16]
 80086e0:	2f00      	cmp	r7, #0
 80086e2:	d0f6      	beq.n	80086d2 <__sflush_r+0xae>
 80086e4:	0793      	lsls	r3, r2, #30
 80086e6:	680e      	ldr	r6, [r1, #0]
 80086e8:	bf08      	it	eq
 80086ea:	694b      	ldreq	r3, [r1, #20]
 80086ec:	600f      	str	r7, [r1, #0]
 80086ee:	bf18      	it	ne
 80086f0:	2300      	movne	r3, #0
 80086f2:	eba6 0807 	sub.w	r8, r6, r7
 80086f6:	608b      	str	r3, [r1, #8]
 80086f8:	f1b8 0f00 	cmp.w	r8, #0
 80086fc:	dde9      	ble.n	80086d2 <__sflush_r+0xae>
 80086fe:	6a21      	ldr	r1, [r4, #32]
 8008700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008702:	4643      	mov	r3, r8
 8008704:	463a      	mov	r2, r7
 8008706:	4628      	mov	r0, r5
 8008708:	47b0      	blx	r6
 800870a:	2800      	cmp	r0, #0
 800870c:	dc08      	bgt.n	8008720 <__sflush_r+0xfc>
 800870e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008720:	4407      	add	r7, r0
 8008722:	eba8 0800 	sub.w	r8, r8, r0
 8008726:	e7e7      	b.n	80086f8 <__sflush_r+0xd4>
 8008728:	20400001 	.word	0x20400001

0800872c <_fflush_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	690b      	ldr	r3, [r1, #16]
 8008730:	4605      	mov	r5, r0
 8008732:	460c      	mov	r4, r1
 8008734:	b913      	cbnz	r3, 800873c <_fflush_r+0x10>
 8008736:	2500      	movs	r5, #0
 8008738:	4628      	mov	r0, r5
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	b118      	cbz	r0, 8008746 <_fflush_r+0x1a>
 800873e:	6a03      	ldr	r3, [r0, #32]
 8008740:	b90b      	cbnz	r3, 8008746 <_fflush_r+0x1a>
 8008742:	f7fe fb95 	bl	8006e70 <__sinit>
 8008746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0f3      	beq.n	8008736 <_fflush_r+0xa>
 800874e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008750:	07d0      	lsls	r0, r2, #31
 8008752:	d404      	bmi.n	800875e <_fflush_r+0x32>
 8008754:	0599      	lsls	r1, r3, #22
 8008756:	d402      	bmi.n	800875e <_fflush_r+0x32>
 8008758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800875a:	f7fe fc80 	bl	800705e <__retarget_lock_acquire_recursive>
 800875e:	4628      	mov	r0, r5
 8008760:	4621      	mov	r1, r4
 8008762:	f7ff ff5f 	bl	8008624 <__sflush_r>
 8008766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008768:	07da      	lsls	r2, r3, #31
 800876a:	4605      	mov	r5, r0
 800876c:	d4e4      	bmi.n	8008738 <_fflush_r+0xc>
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	059b      	lsls	r3, r3, #22
 8008772:	d4e1      	bmi.n	8008738 <_fflush_r+0xc>
 8008774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008776:	f7fe fc73 	bl	8007060 <__retarget_lock_release_recursive>
 800877a:	e7dd      	b.n	8008738 <_fflush_r+0xc>

0800877c <_sbrk_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	@ (8008798 <_sbrk_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7f9 fff6 	bl	8002778 <_sbrk>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_sbrk_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_sbrk_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000680 	.word	0x20000680

0800879c <__assert_func>:
 800879c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800879e:	4614      	mov	r4, r2
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b09      	ldr	r3, [pc, #36]	@ (80087c8 <__assert_func+0x2c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4605      	mov	r5, r0
 80087a8:	68d8      	ldr	r0, [r3, #12]
 80087aa:	b14c      	cbz	r4, 80087c0 <__assert_func+0x24>
 80087ac:	4b07      	ldr	r3, [pc, #28]	@ (80087cc <__assert_func+0x30>)
 80087ae:	9100      	str	r1, [sp, #0]
 80087b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087b4:	4906      	ldr	r1, [pc, #24]	@ (80087d0 <__assert_func+0x34>)
 80087b6:	462b      	mov	r3, r5
 80087b8:	f000 f842 	bl	8008840 <fiprintf>
 80087bc:	f000 f852 	bl	8008864 <abort>
 80087c0:	4b04      	ldr	r3, [pc, #16]	@ (80087d4 <__assert_func+0x38>)
 80087c2:	461c      	mov	r4, r3
 80087c4:	e7f3      	b.n	80087ae <__assert_func+0x12>
 80087c6:	bf00      	nop
 80087c8:	2000001c 	.word	0x2000001c
 80087cc:	08008fb0 	.word	0x08008fb0
 80087d0:	08008fbd 	.word	0x08008fbd
 80087d4:	08008feb 	.word	0x08008feb

080087d8 <_calloc_r>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	fba1 5402 	umull	r5, r4, r1, r2
 80087de:	b934      	cbnz	r4, 80087ee <_calloc_r+0x16>
 80087e0:	4629      	mov	r1, r5
 80087e2:	f7ff fb19 	bl	8007e18 <_malloc_r>
 80087e6:	4606      	mov	r6, r0
 80087e8:	b928      	cbnz	r0, 80087f6 <_calloc_r+0x1e>
 80087ea:	4630      	mov	r0, r6
 80087ec:	bd70      	pop	{r4, r5, r6, pc}
 80087ee:	220c      	movs	r2, #12
 80087f0:	6002      	str	r2, [r0, #0]
 80087f2:	2600      	movs	r6, #0
 80087f4:	e7f9      	b.n	80087ea <_calloc_r+0x12>
 80087f6:	462a      	mov	r2, r5
 80087f8:	4621      	mov	r1, r4
 80087fa:	f7fe fbb2 	bl	8006f62 <memset>
 80087fe:	e7f4      	b.n	80087ea <_calloc_r+0x12>

08008800 <__ascii_mbtowc>:
 8008800:	b082      	sub	sp, #8
 8008802:	b901      	cbnz	r1, 8008806 <__ascii_mbtowc+0x6>
 8008804:	a901      	add	r1, sp, #4
 8008806:	b142      	cbz	r2, 800881a <__ascii_mbtowc+0x1a>
 8008808:	b14b      	cbz	r3, 800881e <__ascii_mbtowc+0x1e>
 800880a:	7813      	ldrb	r3, [r2, #0]
 800880c:	600b      	str	r3, [r1, #0]
 800880e:	7812      	ldrb	r2, [r2, #0]
 8008810:	1e10      	subs	r0, r2, #0
 8008812:	bf18      	it	ne
 8008814:	2001      	movne	r0, #1
 8008816:	b002      	add	sp, #8
 8008818:	4770      	bx	lr
 800881a:	4610      	mov	r0, r2
 800881c:	e7fb      	b.n	8008816 <__ascii_mbtowc+0x16>
 800881e:	f06f 0001 	mvn.w	r0, #1
 8008822:	e7f8      	b.n	8008816 <__ascii_mbtowc+0x16>

08008824 <__ascii_wctomb>:
 8008824:	4603      	mov	r3, r0
 8008826:	4608      	mov	r0, r1
 8008828:	b141      	cbz	r1, 800883c <__ascii_wctomb+0x18>
 800882a:	2aff      	cmp	r2, #255	@ 0xff
 800882c:	d904      	bls.n	8008838 <__ascii_wctomb+0x14>
 800882e:	228a      	movs	r2, #138	@ 0x8a
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	4770      	bx	lr
 8008838:	700a      	strb	r2, [r1, #0]
 800883a:	2001      	movs	r0, #1
 800883c:	4770      	bx	lr
	...

08008840 <fiprintf>:
 8008840:	b40e      	push	{r1, r2, r3}
 8008842:	b503      	push	{r0, r1, lr}
 8008844:	4601      	mov	r1, r0
 8008846:	ab03      	add	r3, sp, #12
 8008848:	4805      	ldr	r0, [pc, #20]	@ (8008860 <fiprintf+0x20>)
 800884a:	f853 2b04 	ldr.w	r2, [r3], #4
 800884e:	6800      	ldr	r0, [r0, #0]
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	f000 f837 	bl	80088c4 <_vfiprintf_r>
 8008856:	b002      	add	sp, #8
 8008858:	f85d eb04 	ldr.w	lr, [sp], #4
 800885c:	b003      	add	sp, #12
 800885e:	4770      	bx	lr
 8008860:	2000001c 	.word	0x2000001c

08008864 <abort>:
 8008864:	b508      	push	{r3, lr}
 8008866:	2006      	movs	r0, #6
 8008868:	f000 fa00 	bl	8008c6c <raise>
 800886c:	2001      	movs	r0, #1
 800886e:	f7f9 ff0b 	bl	8002688 <_exit>

08008872 <__sfputc_r>:
 8008872:	6893      	ldr	r3, [r2, #8]
 8008874:	3b01      	subs	r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	b410      	push	{r4}
 800887a:	6093      	str	r3, [r2, #8]
 800887c:	da08      	bge.n	8008890 <__sfputc_r+0x1e>
 800887e:	6994      	ldr	r4, [r2, #24]
 8008880:	42a3      	cmp	r3, r4
 8008882:	db01      	blt.n	8008888 <__sfputc_r+0x16>
 8008884:	290a      	cmp	r1, #10
 8008886:	d103      	bne.n	8008890 <__sfputc_r+0x1e>
 8008888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800888c:	f000 b932 	b.w	8008af4 <__swbuf_r>
 8008890:	6813      	ldr	r3, [r2, #0]
 8008892:	1c58      	adds	r0, r3, #1
 8008894:	6010      	str	r0, [r2, #0]
 8008896:	7019      	strb	r1, [r3, #0]
 8008898:	4608      	mov	r0, r1
 800889a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <__sfputs_r>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	4614      	mov	r4, r2
 80088a8:	18d5      	adds	r5, r2, r3
 80088aa:	42ac      	cmp	r4, r5
 80088ac:	d101      	bne.n	80088b2 <__sfputs_r+0x12>
 80088ae:	2000      	movs	r0, #0
 80088b0:	e007      	b.n	80088c2 <__sfputs_r+0x22>
 80088b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b6:	463a      	mov	r2, r7
 80088b8:	4630      	mov	r0, r6
 80088ba:	f7ff ffda 	bl	8008872 <__sfputc_r>
 80088be:	1c43      	adds	r3, r0, #1
 80088c0:	d1f3      	bne.n	80088aa <__sfputs_r+0xa>
 80088c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088c4 <_vfiprintf_r>:
 80088c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c8:	460d      	mov	r5, r1
 80088ca:	b09d      	sub	sp, #116	@ 0x74
 80088cc:	4614      	mov	r4, r2
 80088ce:	4698      	mov	r8, r3
 80088d0:	4606      	mov	r6, r0
 80088d2:	b118      	cbz	r0, 80088dc <_vfiprintf_r+0x18>
 80088d4:	6a03      	ldr	r3, [r0, #32]
 80088d6:	b90b      	cbnz	r3, 80088dc <_vfiprintf_r+0x18>
 80088d8:	f7fe faca 	bl	8006e70 <__sinit>
 80088dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088de:	07d9      	lsls	r1, r3, #31
 80088e0:	d405      	bmi.n	80088ee <_vfiprintf_r+0x2a>
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	059a      	lsls	r2, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_vfiprintf_r+0x2a>
 80088e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ea:	f7fe fbb8 	bl	800705e <__retarget_lock_acquire_recursive>
 80088ee:	89ab      	ldrh	r3, [r5, #12]
 80088f0:	071b      	lsls	r3, r3, #28
 80088f2:	d501      	bpl.n	80088f8 <_vfiprintf_r+0x34>
 80088f4:	692b      	ldr	r3, [r5, #16]
 80088f6:	b99b      	cbnz	r3, 8008920 <_vfiprintf_r+0x5c>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4630      	mov	r0, r6
 80088fc:	f000 f938 	bl	8008b70 <__swsetup_r>
 8008900:	b170      	cbz	r0, 8008920 <_vfiprintf_r+0x5c>
 8008902:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008904:	07dc      	lsls	r4, r3, #31
 8008906:	d504      	bpl.n	8008912 <_vfiprintf_r+0x4e>
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	b01d      	add	sp, #116	@ 0x74
 800890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	0598      	lsls	r0, r3, #22
 8008916:	d4f7      	bmi.n	8008908 <_vfiprintf_r+0x44>
 8008918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800891a:	f7fe fba1 	bl	8007060 <__retarget_lock_release_recursive>
 800891e:	e7f3      	b.n	8008908 <_vfiprintf_r+0x44>
 8008920:	2300      	movs	r3, #0
 8008922:	9309      	str	r3, [sp, #36]	@ 0x24
 8008924:	2320      	movs	r3, #32
 8008926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800892a:	f8cd 800c 	str.w	r8, [sp, #12]
 800892e:	2330      	movs	r3, #48	@ 0x30
 8008930:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ae0 <_vfiprintf_r+0x21c>
 8008934:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008938:	f04f 0901 	mov.w	r9, #1
 800893c:	4623      	mov	r3, r4
 800893e:	469a      	mov	sl, r3
 8008940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008944:	b10a      	cbz	r2, 800894a <_vfiprintf_r+0x86>
 8008946:	2a25      	cmp	r2, #37	@ 0x25
 8008948:	d1f9      	bne.n	800893e <_vfiprintf_r+0x7a>
 800894a:	ebba 0b04 	subs.w	fp, sl, r4
 800894e:	d00b      	beq.n	8008968 <_vfiprintf_r+0xa4>
 8008950:	465b      	mov	r3, fp
 8008952:	4622      	mov	r2, r4
 8008954:	4629      	mov	r1, r5
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ffa2 	bl	80088a0 <__sfputs_r>
 800895c:	3001      	adds	r0, #1
 800895e:	f000 80a7 	beq.w	8008ab0 <_vfiprintf_r+0x1ec>
 8008962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008964:	445a      	add	r2, fp
 8008966:	9209      	str	r2, [sp, #36]	@ 0x24
 8008968:	f89a 3000 	ldrb.w	r3, [sl]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 809f 	beq.w	8008ab0 <_vfiprintf_r+0x1ec>
 8008972:	2300      	movs	r3, #0
 8008974:	f04f 32ff 	mov.w	r2, #4294967295
 8008978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800897c:	f10a 0a01 	add.w	sl, sl, #1
 8008980:	9304      	str	r3, [sp, #16]
 8008982:	9307      	str	r3, [sp, #28]
 8008984:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008988:	931a      	str	r3, [sp, #104]	@ 0x68
 800898a:	4654      	mov	r4, sl
 800898c:	2205      	movs	r2, #5
 800898e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008992:	4853      	ldr	r0, [pc, #332]	@ (8008ae0 <_vfiprintf_r+0x21c>)
 8008994:	f7f7 fc1c 	bl	80001d0 <memchr>
 8008998:	9a04      	ldr	r2, [sp, #16]
 800899a:	b9d8      	cbnz	r0, 80089d4 <_vfiprintf_r+0x110>
 800899c:	06d1      	lsls	r1, r2, #27
 800899e:	bf44      	itt	mi
 80089a0:	2320      	movmi	r3, #32
 80089a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089a6:	0713      	lsls	r3, r2, #28
 80089a8:	bf44      	itt	mi
 80089aa:	232b      	movmi	r3, #43	@ 0x2b
 80089ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b0:	f89a 3000 	ldrb.w	r3, [sl]
 80089b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b6:	d015      	beq.n	80089e4 <_vfiprintf_r+0x120>
 80089b8:	9a07      	ldr	r2, [sp, #28]
 80089ba:	4654      	mov	r4, sl
 80089bc:	2000      	movs	r0, #0
 80089be:	f04f 0c0a 	mov.w	ip, #10
 80089c2:	4621      	mov	r1, r4
 80089c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089c8:	3b30      	subs	r3, #48	@ 0x30
 80089ca:	2b09      	cmp	r3, #9
 80089cc:	d94b      	bls.n	8008a66 <_vfiprintf_r+0x1a2>
 80089ce:	b1b0      	cbz	r0, 80089fe <_vfiprintf_r+0x13a>
 80089d0:	9207      	str	r2, [sp, #28]
 80089d2:	e014      	b.n	80089fe <_vfiprintf_r+0x13a>
 80089d4:	eba0 0308 	sub.w	r3, r0, r8
 80089d8:	fa09 f303 	lsl.w	r3, r9, r3
 80089dc:	4313      	orrs	r3, r2
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	46a2      	mov	sl, r4
 80089e2:	e7d2      	b.n	800898a <_vfiprintf_r+0xc6>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	1d19      	adds	r1, r3, #4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	9103      	str	r1, [sp, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bfbb      	ittet	lt
 80089f0:	425b      	neglt	r3, r3
 80089f2:	f042 0202 	orrlt.w	r2, r2, #2
 80089f6:	9307      	strge	r3, [sp, #28]
 80089f8:	9307      	strlt	r3, [sp, #28]
 80089fa:	bfb8      	it	lt
 80089fc:	9204      	strlt	r2, [sp, #16]
 80089fe:	7823      	ldrb	r3, [r4, #0]
 8008a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a02:	d10a      	bne.n	8008a1a <_vfiprintf_r+0x156>
 8008a04:	7863      	ldrb	r3, [r4, #1]
 8008a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a08:	d132      	bne.n	8008a70 <_vfiprintf_r+0x1ac>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	1d1a      	adds	r2, r3, #4
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	9203      	str	r2, [sp, #12]
 8008a12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a16:	3402      	adds	r4, #2
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008af0 <_vfiprintf_r+0x22c>
 8008a1e:	7821      	ldrb	r1, [r4, #0]
 8008a20:	2203      	movs	r2, #3
 8008a22:	4650      	mov	r0, sl
 8008a24:	f7f7 fbd4 	bl	80001d0 <memchr>
 8008a28:	b138      	cbz	r0, 8008a3a <_vfiprintf_r+0x176>
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	eba0 000a 	sub.w	r0, r0, sl
 8008a30:	2240      	movs	r2, #64	@ 0x40
 8008a32:	4082      	lsls	r2, r0
 8008a34:	4313      	orrs	r3, r2
 8008a36:	3401      	adds	r4, #1
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3e:	4829      	ldr	r0, [pc, #164]	@ (8008ae4 <_vfiprintf_r+0x220>)
 8008a40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a44:	2206      	movs	r2, #6
 8008a46:	f7f7 fbc3 	bl	80001d0 <memchr>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d03f      	beq.n	8008ace <_vfiprintf_r+0x20a>
 8008a4e:	4b26      	ldr	r3, [pc, #152]	@ (8008ae8 <_vfiprintf_r+0x224>)
 8008a50:	bb1b      	cbnz	r3, 8008a9a <_vfiprintf_r+0x1d6>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	3307      	adds	r3, #7
 8008a56:	f023 0307 	bic.w	r3, r3, #7
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a60:	443b      	add	r3, r7
 8008a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a64:	e76a      	b.n	800893c <_vfiprintf_r+0x78>
 8008a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	2001      	movs	r0, #1
 8008a6e:	e7a8      	b.n	80089c2 <_vfiprintf_r+0xfe>
 8008a70:	2300      	movs	r3, #0
 8008a72:	3401      	adds	r4, #1
 8008a74:	9305      	str	r3, [sp, #20]
 8008a76:	4619      	mov	r1, r3
 8008a78:	f04f 0c0a 	mov.w	ip, #10
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a82:	3a30      	subs	r2, #48	@ 0x30
 8008a84:	2a09      	cmp	r2, #9
 8008a86:	d903      	bls.n	8008a90 <_vfiprintf_r+0x1cc>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d0c6      	beq.n	8008a1a <_vfiprintf_r+0x156>
 8008a8c:	9105      	str	r1, [sp, #20]
 8008a8e:	e7c4      	b.n	8008a1a <_vfiprintf_r+0x156>
 8008a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a94:	4604      	mov	r4, r0
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7f0      	b.n	8008a7c <_vfiprintf_r+0x1b8>
 8008a9a:	ab03      	add	r3, sp, #12
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	462a      	mov	r2, r5
 8008aa0:	4b12      	ldr	r3, [pc, #72]	@ (8008aec <_vfiprintf_r+0x228>)
 8008aa2:	a904      	add	r1, sp, #16
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7fd fda1 	bl	80065ec <_printf_float>
 8008aaa:	4607      	mov	r7, r0
 8008aac:	1c78      	adds	r0, r7, #1
 8008aae:	d1d6      	bne.n	8008a5e <_vfiprintf_r+0x19a>
 8008ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ab2:	07d9      	lsls	r1, r3, #31
 8008ab4:	d405      	bmi.n	8008ac2 <_vfiprintf_r+0x1fe>
 8008ab6:	89ab      	ldrh	r3, [r5, #12]
 8008ab8:	059a      	lsls	r2, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_vfiprintf_r+0x1fe>
 8008abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008abe:	f7fe facf 	bl	8007060 <__retarget_lock_release_recursive>
 8008ac2:	89ab      	ldrh	r3, [r5, #12]
 8008ac4:	065b      	lsls	r3, r3, #25
 8008ac6:	f53f af1f 	bmi.w	8008908 <_vfiprintf_r+0x44>
 8008aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008acc:	e71e      	b.n	800890c <_vfiprintf_r+0x48>
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4b05      	ldr	r3, [pc, #20]	@ (8008aec <_vfiprintf_r+0x228>)
 8008ad6:	a904      	add	r1, sp, #16
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7fe f81f 	bl	8006b1c <_printf_i>
 8008ade:	e7e4      	b.n	8008aaa <_vfiprintf_r+0x1e6>
 8008ae0:	08008fec 	.word	0x08008fec
 8008ae4:	08008ff6 	.word	0x08008ff6
 8008ae8:	080065ed 	.word	0x080065ed
 8008aec:	080088a1 	.word	0x080088a1
 8008af0:	08008ff2 	.word	0x08008ff2

08008af4 <__swbuf_r>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	460e      	mov	r6, r1
 8008af8:	4614      	mov	r4, r2
 8008afa:	4605      	mov	r5, r0
 8008afc:	b118      	cbz	r0, 8008b06 <__swbuf_r+0x12>
 8008afe:	6a03      	ldr	r3, [r0, #32]
 8008b00:	b90b      	cbnz	r3, 8008b06 <__swbuf_r+0x12>
 8008b02:	f7fe f9b5 	bl	8006e70 <__sinit>
 8008b06:	69a3      	ldr	r3, [r4, #24]
 8008b08:	60a3      	str	r3, [r4, #8]
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	071a      	lsls	r2, r3, #28
 8008b0e:	d501      	bpl.n	8008b14 <__swbuf_r+0x20>
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	b943      	cbnz	r3, 8008b26 <__swbuf_r+0x32>
 8008b14:	4621      	mov	r1, r4
 8008b16:	4628      	mov	r0, r5
 8008b18:	f000 f82a 	bl	8008b70 <__swsetup_r>
 8008b1c:	b118      	cbz	r0, 8008b26 <__swbuf_r+0x32>
 8008b1e:	f04f 37ff 	mov.w	r7, #4294967295
 8008b22:	4638      	mov	r0, r7
 8008b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	6922      	ldr	r2, [r4, #16]
 8008b2a:	1a98      	subs	r0, r3, r2
 8008b2c:	6963      	ldr	r3, [r4, #20]
 8008b2e:	b2f6      	uxtb	r6, r6
 8008b30:	4283      	cmp	r3, r0
 8008b32:	4637      	mov	r7, r6
 8008b34:	dc05      	bgt.n	8008b42 <__swbuf_r+0x4e>
 8008b36:	4621      	mov	r1, r4
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f7ff fdf7 	bl	800872c <_fflush_r>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d1ed      	bne.n	8008b1e <__swbuf_r+0x2a>
 8008b42:	68a3      	ldr	r3, [r4, #8]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	60a3      	str	r3, [r4, #8]
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	6022      	str	r2, [r4, #0]
 8008b4e:	701e      	strb	r6, [r3, #0]
 8008b50:	6962      	ldr	r2, [r4, #20]
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d004      	beq.n	8008b62 <__swbuf_r+0x6e>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	07db      	lsls	r3, r3, #31
 8008b5c:	d5e1      	bpl.n	8008b22 <__swbuf_r+0x2e>
 8008b5e:	2e0a      	cmp	r6, #10
 8008b60:	d1df      	bne.n	8008b22 <__swbuf_r+0x2e>
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f7ff fde1 	bl	800872c <_fflush_r>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d0d9      	beq.n	8008b22 <__swbuf_r+0x2e>
 8008b6e:	e7d6      	b.n	8008b1e <__swbuf_r+0x2a>

08008b70 <__swsetup_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4b29      	ldr	r3, [pc, #164]	@ (8008c18 <__swsetup_r+0xa8>)
 8008b74:	4605      	mov	r5, r0
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	460c      	mov	r4, r1
 8008b7a:	b118      	cbz	r0, 8008b84 <__swsetup_r+0x14>
 8008b7c:	6a03      	ldr	r3, [r0, #32]
 8008b7e:	b90b      	cbnz	r3, 8008b84 <__swsetup_r+0x14>
 8008b80:	f7fe f976 	bl	8006e70 <__sinit>
 8008b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b88:	0719      	lsls	r1, r3, #28
 8008b8a:	d422      	bmi.n	8008bd2 <__swsetup_r+0x62>
 8008b8c:	06da      	lsls	r2, r3, #27
 8008b8e:	d407      	bmi.n	8008ba0 <__swsetup_r+0x30>
 8008b90:	2209      	movs	r2, #9
 8008b92:	602a      	str	r2, [r5, #0]
 8008b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9e:	e033      	b.n	8008c08 <__swsetup_r+0x98>
 8008ba0:	0758      	lsls	r0, r3, #29
 8008ba2:	d512      	bpl.n	8008bca <__swsetup_r+0x5a>
 8008ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ba6:	b141      	cbz	r1, 8008bba <__swsetup_r+0x4a>
 8008ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bac:	4299      	cmp	r1, r3
 8008bae:	d002      	beq.n	8008bb6 <__swsetup_r+0x46>
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f7ff f8bd 	bl	8007d30 <_free_r>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bc0:	81a3      	strh	r3, [r4, #12]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6063      	str	r3, [r4, #4]
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	f043 0308 	orr.w	r3, r3, #8
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	b94b      	cbnz	r3, 8008bea <__swsetup_r+0x7a>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be0:	d003      	beq.n	8008bea <__swsetup_r+0x7a>
 8008be2:	4621      	mov	r1, r4
 8008be4:	4628      	mov	r0, r5
 8008be6:	f000 f883 	bl	8008cf0 <__smakebuf_r>
 8008bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bee:	f013 0201 	ands.w	r2, r3, #1
 8008bf2:	d00a      	beq.n	8008c0a <__swsetup_r+0x9a>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	60a2      	str	r2, [r4, #8]
 8008bf8:	6962      	ldr	r2, [r4, #20]
 8008bfa:	4252      	negs	r2, r2
 8008bfc:	61a2      	str	r2, [r4, #24]
 8008bfe:	6922      	ldr	r2, [r4, #16]
 8008c00:	b942      	cbnz	r2, 8008c14 <__swsetup_r+0xa4>
 8008c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c06:	d1c5      	bne.n	8008b94 <__swsetup_r+0x24>
 8008c08:	bd38      	pop	{r3, r4, r5, pc}
 8008c0a:	0799      	lsls	r1, r3, #30
 8008c0c:	bf58      	it	pl
 8008c0e:	6962      	ldrpl	r2, [r4, #20]
 8008c10:	60a2      	str	r2, [r4, #8]
 8008c12:	e7f4      	b.n	8008bfe <__swsetup_r+0x8e>
 8008c14:	2000      	movs	r0, #0
 8008c16:	e7f7      	b.n	8008c08 <__swsetup_r+0x98>
 8008c18:	2000001c 	.word	0x2000001c

08008c1c <_raise_r>:
 8008c1c:	291f      	cmp	r1, #31
 8008c1e:	b538      	push	{r3, r4, r5, lr}
 8008c20:	4605      	mov	r5, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	d904      	bls.n	8008c30 <_raise_r+0x14>
 8008c26:	2316      	movs	r3, #22
 8008c28:	6003      	str	r3, [r0, #0]
 8008c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c32:	b112      	cbz	r2, 8008c3a <_raise_r+0x1e>
 8008c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c38:	b94b      	cbnz	r3, 8008c4e <_raise_r+0x32>
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f000 f830 	bl	8008ca0 <_getpid_r>
 8008c40:	4622      	mov	r2, r4
 8008c42:	4601      	mov	r1, r0
 8008c44:	4628      	mov	r0, r5
 8008c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c4a:	f000 b817 	b.w	8008c7c <_kill_r>
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d00a      	beq.n	8008c68 <_raise_r+0x4c>
 8008c52:	1c59      	adds	r1, r3, #1
 8008c54:	d103      	bne.n	8008c5e <_raise_r+0x42>
 8008c56:	2316      	movs	r3, #22
 8008c58:	6003      	str	r3, [r0, #0]
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e7e7      	b.n	8008c2e <_raise_r+0x12>
 8008c5e:	2100      	movs	r1, #0
 8008c60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c64:	4620      	mov	r0, r4
 8008c66:	4798      	blx	r3
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e7e0      	b.n	8008c2e <_raise_r+0x12>

08008c6c <raise>:
 8008c6c:	4b02      	ldr	r3, [pc, #8]	@ (8008c78 <raise+0xc>)
 8008c6e:	4601      	mov	r1, r0
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	f7ff bfd3 	b.w	8008c1c <_raise_r>
 8008c76:	bf00      	nop
 8008c78:	2000001c 	.word	0x2000001c

08008c7c <_kill_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4d07      	ldr	r5, [pc, #28]	@ (8008c9c <_kill_r+0x20>)
 8008c80:	2300      	movs	r3, #0
 8008c82:	4604      	mov	r4, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	f7f9 fced 	bl	8002668 <_kill>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d102      	bne.n	8008c98 <_kill_r+0x1c>
 8008c92:	682b      	ldr	r3, [r5, #0]
 8008c94:	b103      	cbz	r3, 8008c98 <_kill_r+0x1c>
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	bd38      	pop	{r3, r4, r5, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000680 	.word	0x20000680

08008ca0 <_getpid_r>:
 8008ca0:	f7f9 bcda 	b.w	8002658 <_getpid>

08008ca4 <__swhatbuf_r>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cac:	2900      	cmp	r1, #0
 8008cae:	b096      	sub	sp, #88	@ 0x58
 8008cb0:	4615      	mov	r5, r2
 8008cb2:	461e      	mov	r6, r3
 8008cb4:	da0d      	bge.n	8008cd2 <__swhatbuf_r+0x2e>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cbc:	f04f 0100 	mov.w	r1, #0
 8008cc0:	bf14      	ite	ne
 8008cc2:	2340      	movne	r3, #64	@ 0x40
 8008cc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cc8:	2000      	movs	r0, #0
 8008cca:	6031      	str	r1, [r6, #0]
 8008ccc:	602b      	str	r3, [r5, #0]
 8008cce:	b016      	add	sp, #88	@ 0x58
 8008cd0:	bd70      	pop	{r4, r5, r6, pc}
 8008cd2:	466a      	mov	r2, sp
 8008cd4:	f000 f848 	bl	8008d68 <_fstat_r>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	dbec      	blt.n	8008cb6 <__swhatbuf_r+0x12>
 8008cdc:	9901      	ldr	r1, [sp, #4]
 8008cde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ce2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ce6:	4259      	negs	r1, r3
 8008ce8:	4159      	adcs	r1, r3
 8008cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cee:	e7eb      	b.n	8008cc8 <__swhatbuf_r+0x24>

08008cf0 <__smakebuf_r>:
 8008cf0:	898b      	ldrh	r3, [r1, #12]
 8008cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cf4:	079d      	lsls	r5, r3, #30
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	d507      	bpl.n	8008d0c <__smakebuf_r+0x1c>
 8008cfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	6123      	str	r3, [r4, #16]
 8008d04:	2301      	movs	r3, #1
 8008d06:	6163      	str	r3, [r4, #20]
 8008d08:	b003      	add	sp, #12
 8008d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0c:	ab01      	add	r3, sp, #4
 8008d0e:	466a      	mov	r2, sp
 8008d10:	f7ff ffc8 	bl	8008ca4 <__swhatbuf_r>
 8008d14:	9f00      	ldr	r7, [sp, #0]
 8008d16:	4605      	mov	r5, r0
 8008d18:	4639      	mov	r1, r7
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7ff f87c 	bl	8007e18 <_malloc_r>
 8008d20:	b948      	cbnz	r0, 8008d36 <__smakebuf_r+0x46>
 8008d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d26:	059a      	lsls	r2, r3, #22
 8008d28:	d4ee      	bmi.n	8008d08 <__smakebuf_r+0x18>
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	f043 0302 	orr.w	r3, r3, #2
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	e7e2      	b.n	8008cfc <__smakebuf_r+0xc>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	6020      	str	r0, [r4, #0]
 8008d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d46:	b15b      	cbz	r3, 8008d60 <__smakebuf_r+0x70>
 8008d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f000 f81d 	bl	8008d8c <_isatty_r>
 8008d52:	b128      	cbz	r0, 8008d60 <__smakebuf_r+0x70>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f023 0303 	bic.w	r3, r3, #3
 8008d5a:	f043 0301 	orr.w	r3, r3, #1
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	431d      	orrs	r5, r3
 8008d64:	81a5      	strh	r5, [r4, #12]
 8008d66:	e7cf      	b.n	8008d08 <__smakebuf_r+0x18>

08008d68 <_fstat_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d07      	ldr	r5, [pc, #28]	@ (8008d88 <_fstat_r+0x20>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	f7f9 fcd7 	bl	8002728 <_fstat>
 8008d7a:	1c43      	adds	r3, r0, #1
 8008d7c:	d102      	bne.n	8008d84 <_fstat_r+0x1c>
 8008d7e:	682b      	ldr	r3, [r5, #0]
 8008d80:	b103      	cbz	r3, 8008d84 <_fstat_r+0x1c>
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	bd38      	pop	{r3, r4, r5, pc}
 8008d86:	bf00      	nop
 8008d88:	20000680 	.word	0x20000680

08008d8c <_isatty_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	4d06      	ldr	r5, [pc, #24]	@ (8008da8 <_isatty_r+0x1c>)
 8008d90:	2300      	movs	r3, #0
 8008d92:	4604      	mov	r4, r0
 8008d94:	4608      	mov	r0, r1
 8008d96:	602b      	str	r3, [r5, #0]
 8008d98:	f7f9 fcd6 	bl	8002748 <_isatty>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_isatty_r+0x1a>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_isatty_r+0x1a>
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	20000680 	.word	0x20000680

08008dac <_init>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	bf00      	nop
 8008db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db2:	bc08      	pop	{r3}
 8008db4:	469e      	mov	lr, r3
 8008db6:	4770      	bx	lr

08008db8 <_fini>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr
