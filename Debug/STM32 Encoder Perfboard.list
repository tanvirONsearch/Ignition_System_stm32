
STM32 Encoder Perfboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08007b58  08007b58  00008b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee0  08007ee0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ee0  08007ee0  00008ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ee8  08007ee8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ee8  08007ee8  00008ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eec  08007eec  00008eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007ef0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000003dc  200001d8  200001d8  000091d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005b4  200005b4  000091d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d50f  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c98  00000000  00000000  00016713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  000183b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a17  00000000  00000000  00019090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ab3  00000000  00000000  00019aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e26f  00000000  00000000  0003b55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccf99  00000000  00000000  000497c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116762  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004630  00000000  00000000  001167a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b40 	.word	0x08007b40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007b40 	.word	0x08007b40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <zylinder1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void zylinder1 (){ //Schaue, ob Bedingungen für ein und Aus Erfüllt sind.
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

	unsigned int current_encoderposition = __HAL_TIM_GET_COUNTER(&htim1); //Aktuellen Encoderwert holen
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <zylinder1+0x78>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea4:	607b      	str	r3, [r7, #4]

	if((current_encoderposition >= (ignition_position_cyl1 - pulses)) && (current_encoderposition < ignition_position_cyl1) && (coil_status_cyl1 == 0) && (encoder_index_detected == 1)){ //Einschaltbedingung. Einmal ein, immer ein.
 8000ea6:	22ed      	movs	r2, #237	@ 0xed
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <zylinder1+0x7c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d317      	bcc.n	8000ee6 <zylinder1+0x4e>
 8000eb6:	23ed      	movs	r3, #237	@ 0xed
 8000eb8:	461a      	mov	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d212      	bcs.n	8000ee6 <zylinder1+0x4e>
 8000ec0:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <zylinder1+0x80>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10e      	bne.n	8000ee6 <zylinder1+0x4e>
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <zylinder1+0x84>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d10a      	bne.n	8000ee6 <zylinder1+0x4e>
		coil_status_cyl1 = 1; //Flag setzen um Spule einzuschalten
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <zylinder1+0x80>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
		charge_begin_postion_cyl1 = current_encoderposition;
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <zylinder1+0x88>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2140      	movs	r1, #64	@ 0x40
 8000ee0:	4810      	ldr	r0, [pc, #64]	@ (8000f24 <zylinder1+0x8c>)
 8000ee2:	f001 fbb1 	bl	8002648 <HAL_GPIO_WritePin>
	}

	if((current_encoderposition >= (ignition_position_cyl1)) && (coil_status_cyl1 == 1)) { //Ausschaltbedingung
 8000ee6:	23ed      	movs	r3, #237	@ 0xed
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d30b      	bcc.n	8000f08 <zylinder1+0x70>
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <zylinder1+0x80>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d107      	bne.n	8000f08 <zylinder1+0x70>
		coil_status_cyl1 = 0;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <zylinder1+0x80>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2140      	movs	r1, #64	@ 0x40
 8000f02:	4808      	ldr	r0, [pc, #32]	@ (8000f24 <zylinder1+0x8c>)
 8000f04:	f001 fba0 	bl	8002648 <HAL_GPIO_WritePin>


	}


}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000020c 	.word	0x2000020c
 8000f14:	20000450 	.word	0x20000450
 8000f18:	20000448 	.word	0x20000448
 8000f1c:	20000444 	.word	0x20000444
 8000f20:	2000044c 	.word	0x2000044c
 8000f24:	40020400 	.word	0x40020400

08000f28 <calculate_rpm>:





void calculate_rpm() { //Diese Funktion erkennt den Encoder Stop und berechnet die Drehzahl
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
    unsigned int current_time;
    unsigned int current_position;
    unsigned int interval = 50000; // Intervall in Mikrosekunden (50ms)
 8000f2e:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8000f32:	60fb      	str	r3, [r7, #12]

    switch(time_flag) {
 8000f34:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <calculate_rpm+0xd8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <calculate_rpm+0x1a>
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d011      	beq.n	8000f64 <calculate_rpm+0x3c>
 8000f40:	e03f      	b.n	8000fc2 <calculate_rpm+0x9a>
        case 0: // Time Flag nicht gesetzt? - Zeitwert und Encoderwert lesen.
            encoder_lastposition = __HAL_TIM_GET_COUNTER(&htim1);
 8000f42:	4b30      	ldr	r3, [pc, #192]	@ (8001004 <calculate_rpm+0xdc>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f48:	4a2f      	ldr	r2, [pc, #188]	@ (8001008 <calculate_rpm+0xe0>)
 8000f4a:	6013      	str	r3, [r2, #0]
            timestamp_lastposition = __HAL_TIM_GET_COUNTER(&htim5);
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800100c <calculate_rpm+0xe4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f52:	4a2f      	ldr	r2, [pc, #188]	@ (8001010 <calculate_rpm+0xe8>)
 8000f54:	6013      	str	r3, [r2, #0]
            time_flag = 1; // Flag gesetzt, da wir Werte haben.
 8000f56:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <calculate_rpm+0xd8>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
            rotation_stop = 0; //Nehmen an, der Encoder dreht sich
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <calculate_rpm+0xec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
            break;
 8000f62:	e033      	b.n	8000fcc <calculate_rpm+0xa4>

        case 1: // Prüfen ob Zeitintervall überschritten wurde
            current_time = __HAL_TIM_GET_COUNTER(&htim5); // Aktuellen Timerwert holen
 8000f64:	4b29      	ldr	r3, [pc, #164]	@ (800100c <calculate_rpm+0xe4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6a:	60bb      	str	r3, [r7, #8]
            current_position = __HAL_TIM_GET_COUNTER(&htim1); // Aktuelle Encoder-Position holen
 8000f6c:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <calculate_rpm+0xdc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f72:	607b      	str	r3, [r7, #4]

            // Überprüfen, ob das Zeitintervall überschritten wurde
            if((current_time - timestamp_lastposition >= interval) ||
 8000f74:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <calculate_rpm+0xe8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d90c      	bls.n	8000f9c <calculate_rpm+0x74>
               (current_time < timestamp_lastposition && (UINT32_MAX - timestamp_lastposition + current_time) >= interval)) {
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <calculate_rpm+0xe8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
            if((current_time - timestamp_lastposition >= interval) ||
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d21e      	bcs.n	8000fca <calculate_rpm+0xa2>
               (current_time < timestamp_lastposition && (UINT32_MAX - timestamp_lastposition + current_time) >= interval)) {
 8000f8c:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <calculate_rpm+0xe8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	3b01      	subs	r3, #1
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d816      	bhi.n	8000fca <calculate_rpm+0xa2>
                // Prüfen, ob sich die Encoder-Position geändert hat
                if(current_position == encoder_lastposition) {
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <calculate_rpm+0xe0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d103      	bne.n	8000fae <calculate_rpm+0x86>
                    // Encoder hat sich nicht bewegt, führe Aktion aus (z.B. Variable auf Null setzen)
                	rotation_stop = 1; //Encoder Stoppt, wer TRUE.
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <calculate_rpm+0xec>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e002      	b.n	8000fb4 <calculate_rpm+0x8c>
                    // Aktion hier einfügen, z.B.: encoderStopped = true;
                }
                else {
                	rotation_stop = 0; //Encoderwert hat sich geändert, er dreht.
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <calculate_rpm+0xec>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
                }

                // Unabhängig vom Ergebnis, aktualisiere die Überwachungsvariablen für den nächsten Durchlauf
                encoder_lastposition = current_position;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <calculate_rpm+0xe0>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
                timestamp_lastposition = current_time;
 8000fba:	4a15      	ldr	r2, [pc, #84]	@ (8001010 <calculate_rpm+0xe8>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	6013      	str	r3, [r2, #0]
            }
            break;
 8000fc0:	e003      	b.n	8000fca <calculate_rpm+0xa2>

        default:
            // Unbekannter Zustand, zurücksetzen
            time_flag = 0;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <calculate_rpm+0xd8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
            break;
 8000fc8:	e000      	b.n	8000fcc <calculate_rpm+0xa4>
            break;
 8000fca:	bf00      	nop
    }


	  if(rotation_stop == 1){ //Messungen sind durch, jetzt können Werte durchgegeben werden.
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <calculate_rpm+0xec>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d106      	bne.n	8000fe2 <calculate_rpm+0xba>
		  frequency = 0;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <calculate_rpm+0xf0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
		  engine_speed = 0;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <calculate_rpm+0xf4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	  else {
		  frequency = tim4_frequency;
		  engine_speed = (tim4_frequency * 2); //60PPR Encoder, Halbe Drehzahl Nockenwelle

	  }
}
 8000fe0:	e008      	b.n	8000ff4 <calculate_rpm+0xcc>
		  frequency = tim4_frequency;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <calculate_rpm+0xf8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8001018 <calculate_rpm+0xf0>)
 8000fe8:	6013      	str	r3, [r2, #0]
		  engine_speed = (tim4_frequency * 2); //60PPR Encoder, Halbe Drehzahl Nockenwelle
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <calculate_rpm+0xf8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <calculate_rpm+0xf4>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	20000414 	.word	0x20000414
 8001004:	2000020c 	.word	0x2000020c
 8001008:	20000418 	.word	0x20000418
 800100c:	2000032c 	.word	0x2000032c
 8001010:	2000041c 	.word	0x2000041c
 8001014:	20000428 	.word	0x20000428
 8001018:	20000420 	.word	0x20000420
 800101c:	20000424 	.word	0x20000424
 8001020:	20000440 	.word	0x20000440

08001024 <calculatePulseAndTime>:





void calculatePulseAndTime(int rpm) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    double timePerRevolutionSeconds = 60.0 / rpm;
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	4924      	ldr	r1, [pc, #144]	@ (80010cc <calculatePulseAndTime+0xa8>)
 800103c:	f7ff fc06 	bl	800084c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double timePerPulseMs = timePerRevolutionSeconds * 1000.0 / PULSE_PER_REVOLUTION;
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <calculatePulseAndTime+0xac>)
 800104e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001052:	f7ff fad1 	bl	80005f8 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <calculatePulseAndTime+0xb0>)
 8001064:	f7ff fbf2 	bl	800084c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double pulsesNeeded = MIN_DURATION_PER_PULSE_AT_200_RPM / timePerPulseMs;
 8001070:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001074:	f04f 0000 	mov.w	r0, #0
 8001078:	4917      	ldr	r1, [pc, #92]	@ (80010d8 <calculatePulseAndTime+0xb4>)
 800107a:	f7ff fbe7 	bl	800084c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pulses = (int)(pulsesNeeded + 0.5); // Rundet zur nächsten ganzen Zahl
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <calculatePulseAndTime+0xb8>)
 800108c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001090:	f7ff f8fc 	bl	800028c <__adddf3>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fd5c 	bl	8000b58 <__aeabi_d2iz>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <calculatePulseAndTime+0xbc>)
 80010a4:	6013      	str	r3, [r2, #0]
    totalTimeMs = pulses * timePerPulseMs;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <calculatePulseAndTime+0xbc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa3a 	bl	8000524 <__aeabi_i2d>
 80010b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010b4:	f7ff faa0 	bl	80005f8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4909      	ldr	r1, [pc, #36]	@ (80010e4 <calculatePulseAndTime+0xc0>)
 80010be:	e9c1 2300 	strd	r2, r3, [r1]
}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	404e0000 	.word	0x404e0000
 80010d0:	408f4000 	.word	0x408f4000
 80010d4:	405e0000 	.word	0x405e0000
 80010d8:	40120000 	.word	0x40120000
 80010dc:	3fe00000 	.word	0x3fe00000
 80010e0:	20000450 	.word	0x20000450
 80010e4:	20000458 	.word	0x20000458

080010e8 <init_timer>:

// Initialisiert einen Timer mit einer bestimmten Periode und Zeitbasis.



void init_timer(Timer* timer, uint32_t period, TimeBase base) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	4613      	mov	r3, r2
 80010f4:	71fb      	strb	r3, [r7, #7]
    if (timer != NULL) {
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d019      	beq.n	8001130 <init_timer+0x48>
        timer->period = period;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	605a      	str	r2, [r3, #4]
        timer->is_active = true;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2201      	movs	r2, #1
 8001106:	721a      	strb	r2, [r3, #8]
        timer->time_base = base;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	79fa      	ldrb	r2, [r7, #7]
 800110c:	725a      	strb	r2, [r3, #9]
        // Initialisiere start_time basierend auf der gewählten Zeitbasis
        if (base == TIME_BASE_MS) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d105      	bne.n	8001120 <init_timer+0x38>
            timer->start_time = HAL_GetTick();
 8001114:	f000 ffde 	bl	80020d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	601a      	str	r2, [r3, #0]
        } else if (base == TIME_BASE_US) {
            timer->start_time = __HAL_TIM_GET_COUNTER(&htim4);
        }
    }
}
 800111e:	e007      	b.n	8001130 <init_timer+0x48>
        } else if (base == TIME_BASE_US) {
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d104      	bne.n	8001130 <init_timer+0x48>
            timer->start_time = __HAL_TIM_GET_COUNTER(&htim4);
 8001126:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <init_timer+0x50>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200002e4 	.word	0x200002e4

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f000 ff62 	bl	8002008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f866 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f000 fb32 	bl	80017b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800114c:	f000 fb06 	bl	800175c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001150:	f000 f920 	bl	8001394 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001154:	f000 f8c8 	bl	80012e8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001158:	f000 f9f2 	bl	8001540 <MX_TIM4_Init>
  MX_TIM3_Init();
 800115c:	f000 f96e 	bl	800143c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001160:	f000 fa5e 	bl	8001620 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001164:	f000 faaa 	bl	80016bc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001168:	213c      	movs	r1, #60	@ 0x3c
 800116a:	481f      	ldr	r0, [pc, #124]	@ (80011e8 <main+0xac>)
 800116c:	f002 fba8 	bl	80038c0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001170:	213c      	movs	r1, #60	@ 0x3c
 8001172:	481e      	ldr	r0, [pc, #120]	@ (80011ec <main+0xb0>)
 8001174:	f002 fba4 	bl	80038c0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8001178:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <main+0xb4>)
 800117a:	f001 ffe7 	bl	800314c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800117e:	2100      	movs	r1, #0
 8001180:	481b      	ldr	r0, [pc, #108]	@ (80011f0 <main+0xb4>)
 8001182:	f002 f9cf 	bl	8003524 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8001186:	481b      	ldr	r0, [pc, #108]	@ (80011f4 <main+0xb8>)
 8001188:	f001 ff78 	bl	800307c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	481a      	ldr	r0, [pc, #104]	@ (80011f8 <main+0xbc>)
 8001190:	f002 f8a6 	bl	80032e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001194:	2104      	movs	r1, #4
 8001196:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <main+0xbc>)
 8001198:	f002 f8a2 	bl	80032e0 <HAL_TIM_PWM_Start>



  init_timer(&timers[0], 40000, TIME_BASE_US); //Software timer
 800119c:	2201      	movs	r2, #1
 800119e:	f649 4140 	movw	r1, #40000	@ 0x9c40
 80011a2:	4816      	ldr	r0, [pc, #88]	@ (80011fc <main+0xc0>)
 80011a4:	f7ff ffa0 	bl	80010e8 <init_timer>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  calculate_rpm();
 80011a8:	f7ff febe 	bl	8000f28 <calculate_rpm>
	  calculatePulseAndTime(engine_speed);
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <main+0xc4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff37 	bl	8001024 <calculatePulseAndTime>
	  zylinder1 ();
 80011b6:	f7ff fe6f 	bl	8000e98 <zylinder1>



	  cnt_t1 = __HAL_TIM_GET_COUNTER(&htim1);
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <main+0xac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	4a10      	ldr	r2, [pc, #64]	@ (8001204 <main+0xc8>)
 80011c2:	6013      	str	r3, [r2, #0]
	  cnt_t2 = __HAL_TIM_GET_COUNTER(&htim2);
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <main+0xb0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001208 <main+0xcc>)
 80011cc:	6013      	str	r3, [r2, #0]
	  cnt_t4 = __HAL_TIM_GET_COUNTER(&htim4);
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <main+0xb4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <main+0xd0>)
 80011d8:	801a      	strh	r2, [r3, #0]
	  cnt_t5 = __HAL_TIM_GET_COUNTER(&htim5);
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <main+0xb8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <main+0xd4>)
 80011e2:	6013      	str	r3, [r2, #0]
	  calculate_rpm();
 80011e4:	bf00      	nop
 80011e6:	e7df      	b.n	80011a8 <main+0x6c>
 80011e8:	2000020c 	.word	0x2000020c
 80011ec:	20000254 	.word	0x20000254
 80011f0:	200002e4 	.word	0x200002e4
 80011f4:	2000032c 	.word	0x2000032c
 80011f8:	2000029c 	.word	0x2000029c
 80011fc:	200001f4 	.word	0x200001f4
 8001200:	20000424 	.word	0x20000424
 8001204:	20000404 	.word	0x20000404
 8001208:	20000408 	.word	0x20000408
 800120c:	2000040c 	.word	0x2000040c
 8001210:	20000410 	.word	0x20000410

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	@ 0x50
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2230      	movs	r2, #48	@ 0x30
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f004 fd69 	bl	8005cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <SystemClock_Config+0xcc>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <SystemClock_Config+0xcc>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	@ 0x40
 8001248:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <SystemClock_Config+0xcc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <SystemClock_Config+0xd0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <SystemClock_Config+0xd0>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <SystemClock_Config+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001270:	2301      	movs	r3, #1
 8001272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001274:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001284:	2304      	movs	r3, #4
 8001286:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001288:	23a8      	movs	r3, #168	@ 0xa8
 800128a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800128c:	2302      	movs	r3, #2
 800128e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001290:	2304      	movs	r3, #4
 8001292:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fa07 	bl	80026ac <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a4:	f000 fba8 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2302      	movs	r3, #2
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2105      	movs	r1, #5
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fc68 	bl	8002b9c <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012d2:	f000 fb91 	bl	80019f8 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3750      	adds	r7, #80	@ 0x50
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2224      	movs	r2, #36	@ 0x24
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fcff 	bl	8005cfa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <MX_TIM1_Init+0xa4>)
 8001306:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <MX_TIM1_Init+0xa8>)
 8001308:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <MX_TIM1_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <MX_TIM1_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 240-1;
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <MX_TIM1_Init+0xa4>)
 8001318:	22ef      	movs	r2, #239	@ 0xef
 800131a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_TIM1_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_TIM1_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_TIM1_Init+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800132e:	2303      	movs	r3, #3
 8001330:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001332:	2302      	movs	r3, #2
 8001334:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001336:	2301      	movs	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001342:	2302      	movs	r3, #2
 8001344:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001346:	2301      	movs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <MX_TIM1_Init+0xa4>)
 800135a:	f002 fa0b 	bl	8003774 <HAL_TIM_Encoder_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001364:	f000 fb48 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_TIM1_Init+0xa4>)
 8001376:	f003 fc0f 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001380:	f000 fb3a 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	@ 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000020c 	.word	0x2000020c
 8001390:	40010000 	.word	0x40010000

08001394 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2224      	movs	r2, #36	@ 0x24
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 fca9 	bl	8005cfa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b0:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <MX_TIM2_Init+0xa4>)
 80013b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <MX_TIM2_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <MX_TIM2_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <MX_TIM2_Init+0xa4>)
 80013c6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <MX_TIM2_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <MX_TIM2_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d8:	2303      	movs	r3, #3
 80013da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013dc:	2302      	movs	r3, #2
 80013de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013e0:	2301      	movs	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013f0:	2301      	movs	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	@ (8001438 <MX_TIM2_Init+0xa4>)
 8001404:	f002 f9b6 	bl	8003774 <HAL_TIM_Encoder_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800140e:	f000 faf3 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	@ (8001438 <MX_TIM2_Init+0xa4>)
 8001420:	f003 fbba 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800142a:	f000 fae5 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	@ 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000254 	.word	0x20000254

0800143c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	@ 0x38
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146c:	4b32      	ldr	r3, [pc, #200]	@ (8001538 <MX_TIM3_Init+0xfc>)
 800146e:	4a33      	ldr	r2, [pc, #204]	@ (800153c <MX_TIM3_Init+0x100>)
 8001470:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <MX_TIM3_Init+0xfc>)
 8001474:	f240 3247 	movw	r2, #839	@ 0x347
 8001478:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b2f      	ldr	r3, [pc, #188]	@ (8001538 <MX_TIM3_Init+0xfc>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001480:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <MX_TIM3_Init+0xfc>)
 8001482:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001486:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <MX_TIM3_Init+0xfc>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <MX_TIM3_Init+0xfc>)
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001494:	4828      	ldr	r0, [pc, #160]	@ (8001538 <MX_TIM3_Init+0xfc>)
 8001496:	f001 fda1 	bl	8002fdc <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80014a0:	f000 faaa 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4821      	ldr	r0, [pc, #132]	@ (8001538 <MX_TIM3_Init+0xfc>)
 80014b2:	f002 fe45 	bl	8004140 <HAL_TIM_ConfigClockSource>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014bc:	f000 fa9c 	bl	80019f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014c0:	481d      	ldr	r0, [pc, #116]	@ (8001538 <MX_TIM3_Init+0xfc>)
 80014c2:	f001 feb3 	bl	800322c <HAL_TIM_PWM_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014cc:	f000 fa94 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d8:	f107 0320 	add.w	r3, r7, #32
 80014dc:	4619      	mov	r1, r3
 80014de:	4816      	ldr	r0, [pc, #88]	@ (8001538 <MX_TIM3_Init+0xfc>)
 80014e0:	f003 fb5a 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014ea:	f000 fa85 	bl	80019f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	@ 0x60
 80014f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <MX_TIM3_Init+0xfc>)
 8001506:	f002 fd59 	bl	8003fbc <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001510:	f000 fa72 	bl	80019f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2204      	movs	r2, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	@ (8001538 <MX_TIM3_Init+0xfc>)
 800151c:	f002 fd4e 	bl	8003fbc <HAL_TIM_PWM_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001526:	f000 fa67 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800152a:	4803      	ldr	r0, [pc, #12]	@ (8001538 <MX_TIM3_Init+0xfc>)
 800152c:	f000 fba0 	bl	8001c70 <HAL_TIM_MspPostInit>

}
 8001530:	bf00      	nop
 8001532:	3738      	adds	r7, #56	@ 0x38
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000029c 	.word	0x2000029c
 800153c:	40000400 	.word	0x40000400

08001540 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800155e:	463b      	mov	r3, r7
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800156a:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <MX_TIM4_Init+0xd8>)
 800156c:	4a2b      	ldr	r2, [pc, #172]	@ (800161c <MX_TIM4_Init+0xdc>)
 800156e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001570:	4b29      	ldr	r3, [pc, #164]	@ (8001618 <MX_TIM4_Init+0xd8>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <MX_TIM4_Init+0xd8>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800157c:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <MX_TIM4_Init+0xd8>)
 800157e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001582:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <MX_TIM4_Init+0xd8>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <MX_TIM4_Init+0xd8>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001590:	4821      	ldr	r0, [pc, #132]	@ (8001618 <MX_TIM4_Init+0xd8>)
 8001592:	f001 fd23 	bl	8002fdc <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800159c:	f000 fa2c 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	4619      	mov	r1, r3
 80015ac:	481a      	ldr	r0, [pc, #104]	@ (8001618 <MX_TIM4_Init+0xd8>)
 80015ae:	f002 fdc7 	bl	8004140 <HAL_TIM_ConfigClockSource>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015b8:	f000 fa1e 	bl	80019f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80015bc:	4816      	ldr	r0, [pc, #88]	@ (8001618 <MX_TIM4_Init+0xd8>)
 80015be:	f001 ff57 	bl	8003470 <HAL_TIM_IC_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80015c8:	f000 fa16 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	480f      	ldr	r0, [pc, #60]	@ (8001618 <MX_TIM4_Init+0xd8>)
 80015dc:	f003 fadc 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80015e6:	f000 fa07 	bl	80019f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015ea:	2302      	movs	r3, #2
 80015ec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015ee:	2301      	movs	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	2200      	movs	r2, #0
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_TIM4_Init+0xd8>)
 8001602:	f002 fc3e 	bl	8003e82 <HAL_TIM_IC_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800160c:	f000 f9f4 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	@ 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200002e4 	.word	0x200002e4
 800161c:	40000800 	.word	0x40000800

08001620 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_TIM5_Init+0x94>)
 800163e:	4a1e      	ldr	r2, [pc, #120]	@ (80016b8 <MX_TIM5_Init+0x98>)
 8001640:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_TIM5_Init+0x94>)
 8001644:	2253      	movs	r2, #83	@ 0x53
 8001646:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_TIM5_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_TIM5_Init+0x94>)
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_TIM5_Init+0x94>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <MX_TIM5_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001662:	4814      	ldr	r0, [pc, #80]	@ (80016b4 <MX_TIM5_Init+0x94>)
 8001664:	f001 fcba 	bl	8002fdc <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800166e:	f000 f9c3 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <MX_TIM5_Init+0x94>)
 8001680:	f002 fd5e 	bl	8004140 <HAL_TIM_ConfigClockSource>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800168a:	f000 f9b5 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001696:	463b      	mov	r3, r7
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_TIM5_Init+0x94>)
 800169c:	f003 fa7c 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80016a6:	f000 f9a7 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000032c 	.word	0x2000032c
 80016b8:	40000c00 	.word	0x40000c00

080016bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <MX_TIM8_Init+0x98>)
 80016da:	4a1f      	ldr	r2, [pc, #124]	@ (8001758 <MX_TIM8_Init+0x9c>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <MX_TIM8_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <MX_TIM8_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_TIM8_Init+0x98>)
 80016ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <MX_TIM8_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <MX_TIM8_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_TIM8_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001704:	4813      	ldr	r0, [pc, #76]	@ (8001754 <MX_TIM8_Init+0x98>)
 8001706:	f001 fc69 	bl	8002fdc <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001710:	f000 f972 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001718:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4619      	mov	r1, r3
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <MX_TIM8_Init+0x98>)
 8001722:	f002 fd0d 	bl	8004140 <HAL_TIM_ConfigClockSource>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800172c:	f000 f964 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_TIM8_Init+0x98>)
 800173e:	f003 fa2b 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001748:	f000 f956 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000374 	.word	0x20000374
 8001758:	40010400 	.word	0x40010400

0800175c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <MX_USART1_UART_Init+0x50>)
 8001764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001768:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800176c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_USART1_UART_Init+0x4c>)
 8001794:	f003 fa90 	bl	8004cb8 <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800179e:	f000 f92b 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200003bc 	.word	0x200003bc
 80017ac:	40011000 	.word	0x40011000

080017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b47      	ldr	r3, [pc, #284]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a46      	ldr	r2, [pc, #280]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b44      	ldr	r3, [pc, #272]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b40      	ldr	r3, [pc, #256]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a3f      	ldr	r2, [pc, #252]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b3d      	ldr	r3, [pc, #244]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b39      	ldr	r3, [pc, #228]	@ (80018e8 <MX_GPIO_Init+0x138>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a38      	ldr	r2, [pc, #224]	@ (80018e8 <MX_GPIO_Init+0x138>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b36      	ldr	r3, [pc, #216]	@ (80018e8 <MX_GPIO_Init+0x138>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b32      	ldr	r3, [pc, #200]	@ (80018e8 <MX_GPIO_Init+0x138>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a31      	ldr	r2, [pc, #196]	@ (80018e8 <MX_GPIO_Init+0x138>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <MX_GPIO_Init+0x138>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <MX_GPIO_Init+0x138>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a2a      	ldr	r2, [pc, #168]	@ (80018e8 <MX_GPIO_Init+0x138>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <MX_GPIO_Init+0x138>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001858:	4824      	ldr	r0, [pc, #144]	@ (80018ec <MX_GPIO_Init+0x13c>)
 800185a:	f000 fef5 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001864:	4822      	ldr	r0, [pc, #136]	@ (80018f0 <MX_GPIO_Init+0x140>)
 8001866:	f000 feef 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800186a:	230c      	movs	r3, #12
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	481d      	ldr	r0, [pc, #116]	@ (80018f4 <MX_GPIO_Init+0x144>)
 8001880:	f000 fd46 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001884:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4813      	ldr	r0, [pc, #76]	@ (80018ec <MX_GPIO_Init+0x13c>)
 800189e:	f000 fd37 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80018a2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	480d      	ldr	r0, [pc, #52]	@ (80018f0 <MX_GPIO_Init+0x140>)
 80018bc:	f000 fd28 	bl	8002310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	2008      	movs	r0, #8
 80018c6:	f000 fcec 	bl	80022a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018ca:	2008      	movs	r0, #8
 80018cc:	f000 fd05 	bl	80022da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	2009      	movs	r0, #9
 80018d6:	f000 fce4 	bl	80022a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018da:	2009      	movs	r0, #9
 80018dc:	f000 fcfd 	bl	80022da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	@ 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_2) { //Index
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	2b04      	cmp	r3, #4
 8001906:	d10f      	bne.n	8001928 <HAL_GPIO_EXTI_Callback+0x30>
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	HAL_TIM_Encoder_Stop_IT(&htim1, TIM_CHANNEL_ALL);
 8001908:	213c      	movs	r1, #60	@ 0x3c
 800190a:	480a      	ldr	r0, [pc, #40]	@ (8001934 <HAL_GPIO_EXTI_Callback+0x3c>)
 800190c:	f002 f914 	bl	8003b38 <HAL_TIM_Encoder_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001918:	213c      	movs	r1, #60	@ 0x3c
 800191a:	4806      	ldr	r0, [pc, #24]	@ (8001934 <HAL_GPIO_EXTI_Callback+0x3c>)
 800191c:	f002 f85e 	bl	80039dc <HAL_TIM_Encoder_Start_IT>
	encoder_index_detected = 1; //Indexerkennung
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_GPIO_EXTI_Callback+0x40>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8001926:	e000      	b.n	800192a <HAL_GPIO_EXTI_Callback+0x32>
      __NOP();
 8001928:	bf00      	nop
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000020c 	.word	0x2000020c
 8001938:	20000444 	.word	0x20000444

0800193c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

    if(frequency_status == 0) //idle
 8001944:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10a      	bne.n	8001964 <HAL_TIM_IC_CaptureCallback+0x28>
    {
    	pulse_time1 = TIM4->CCR1;
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001952:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001954:	6013      	str	r3, [r2, #0]
    	count_overflow = 0;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_TIM_IC_CaptureCallback+0x80>)
 8001958:	2200      	movs	r2, #0
 800195a:	801a      	strh	r2, [r3, #0]
        frequency_status = 1;
 800195c:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_TIM_IC_CaptureCallback+0x74>)
 800195e:	2201      	movs	r2, #1
 8001960:	801a      	strh	r2, [r3, #0]
        ticks = (pulse_time2 + (count_overflow * 65536)) - pulse_time1;
        tim4_frequency = (uint32_t)(84000000UL/ticks);

        frequency_status = 0;
    }
}
 8001962:	e01f      	b.n	80019a4 <HAL_TIM_IC_CaptureCallback+0x68>
    else if(frequency_status == 1) //done
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	2b01      	cmp	r3, #1
 800196c:	d11a      	bne.n	80019a4 <HAL_TIM_IC_CaptureCallback+0x68>
    	pulse_time2 = TIM4->CCR1;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001972:	4a13      	ldr	r2, [pc, #76]	@ (80019c0 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001974:	6013      	str	r3, [r2, #0]
        ticks = (pulse_time2 + (count_overflow * 65536)) - pulse_time1;
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_TIM_IC_CaptureCallback+0x80>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	461a      	mov	r2, r3
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	441a      	add	r2, r3
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_TIM_IC_CaptureCallback+0x88>)
 800198e:	6013      	str	r3, [r2, #0]
        tim4_frequency = (uint32_t)(84000000UL/ticks);
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <HAL_TIM_IC_CaptureCallback+0x90>)
 800199c:	6013      	str	r3, [r2, #0]
        frequency_status = 0;
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <HAL_TIM_IC_CaptureCallback+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	801a      	strh	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	2000042c 	.word	0x2000042c
 80019b4:	40000800 	.word	0x40000800
 80019b8:	20000430 	.word	0x20000430
 80019bc:	2000043c 	.word	0x2000043c
 80019c0:	20000434 	.word	0x20000434
 80019c4:	20000438 	.word	0x20000438
 80019c8:	0501bd00 	.word	0x0501bd00
 80019cc:	20000440 	.word	0x20000440

080019d0 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	count_overflow++; //Overflow Counter
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019e4:	801a      	strh	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000043c 	.word	0x2000043c

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <Error_Handler+0x8>

08001a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a0f      	ldr	r2, [pc, #60]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	@ 0x30
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a32      	ldr	r2, [pc, #200]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12d      	bne.n	8001ad2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	4a30      	ldr	r2, [pc, #192]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a86:	4b2e      	ldr	r3, [pc, #184]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a29      	ldr	r2, [pc, #164]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001a9c:	f043 0310 	orr.w	r3, r3, #16
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001aae:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	481e      	ldr	r0, [pc, #120]	@ (8001b44 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001acc:	f000 fc20 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ad0:	e030      	b.n	8001b34 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ada:	d12b      	bne.n	8001b34 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	4a16      	ldr	r2, [pc, #88]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b00:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b08:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0xec>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b14:	2303      	movs	r3, #3
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b24:	2301      	movs	r3, #1
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	@ (8001b48 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001b30:	f000 fbee 	bl	8002310 <HAL_GPIO_Init>
}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	@ 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40020000 	.word	0x40020000

08001b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	@ 0x30
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a3b      	ldr	r2, [pc, #236]	@ (8001c58 <HAL_TIM_Base_MspInit+0x10c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10e      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a39      	ldr	r2, [pc, #228]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b8a:	e061      	b.n	8001c50 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a33      	ldr	r2, [pc, #204]	@ (8001c60 <HAL_TIM_Base_MspInit+0x114>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d135      	bne.n	8001c02 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a28      	ldr	r2, [pc, #160]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001be0:	2302      	movs	r3, #2
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	481e      	ldr	r0, [pc, #120]	@ (8001c64 <HAL_TIM_Base_MspInit+0x118>)
 8001bec:	f000 fb90 	bl	8002310 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	201e      	movs	r0, #30
 8001bf6:	f000 fb54 	bl	80022a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bfa:	201e      	movs	r0, #30
 8001bfc:	f000 fb6d 	bl	80022da <HAL_NVIC_EnableIRQ>
}
 8001c00:	e026      	b.n	8001c50 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM5)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a18      	ldr	r2, [pc, #96]	@ (8001c68 <HAL_TIM_Base_MspInit+0x11c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d10e      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	4a11      	ldr	r2, [pc, #68]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	e012      	b.n	8001c50 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM8)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <HAL_TIM_Base_MspInit+0x120>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d10d      	bne.n	8001c50 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3c:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_TIM_Base_MspInit+0x110>)
 8001c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
}
 8001c50:	bf00      	nop
 8001c52:	3730      	adds	r7, #48	@ 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40000800 	.word	0x40000800
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40000c00 	.word	0x40000c00
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <HAL_TIM_MspPostInit+0x68>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d11d      	bne.n	8001cce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <HAL_TIM_MspPostInit+0x6c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a10      	ldr	r2, [pc, #64]	@ (8001cdc <HAL_TIM_MspPostInit+0x6c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_TIM_MspPostInit+0x6c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cae:	23c0      	movs	r3, #192	@ 0xc0
 8001cb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <HAL_TIM_MspPostInit+0x70>)
 8001cca:	f000 fb21 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	@ 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	@ (8001d68 <HAL_UART_MspInit+0x84>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12c      	bne.n	8001d60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	4a17      	ldr	r2, [pc, #92]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d10:	f043 0310 	orr.w	r3, r3, #16
 8001d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4a10      	ldr	r2, [pc, #64]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <HAL_UART_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d50:	2307      	movs	r3, #7
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <HAL_UART_MspInit+0x8c>)
 8001d5c:	f000 fad8 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40011000 	.word	0x40011000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020000 	.word	0x40020000

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <NMI_Handler+0x4>

08001d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dca:	f000 f96f 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001dd6:	2004      	movs	r0, #4
 8001dd8:	f000 fc50 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001de4:	2008      	movs	r0, #8
 8001de6:	f000 fc49 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <TIM4_IRQHandler+0x10>)
 8001df6:	f001 ff54 	bl	8003ca2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200002e4 	.word	0x200002e4

08001e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_kill>:

int _kill(int pid, int sig)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e1e:	f003 ffbf 	bl	8005da0 <__errno>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2216      	movs	r2, #22
 8001e26:	601a      	str	r2, [r3, #0]
  return -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_exit>:

void _exit (int status)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ffe7 	bl	8001e14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e46:	bf00      	nop
 8001e48:	e7fd      	b.n	8001e46 <_exit+0x12>

08001e4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e00a      	b.n	8001e72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e5c:	f3af 8000 	nop.w
 8001e60:	4601      	mov	r1, r0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	60ba      	str	r2, [r7, #8]
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbf0      	blt.n	8001e5c <_read+0x12>
  }

  return len;
 8001e7a:	687b      	ldr	r3, [r7, #4]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e009      	b.n	8001eaa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	60ba      	str	r2, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	dbf1      	blt.n	8001e96 <_write+0x12>
  }
  return len;
 8001eb2:	687b      	ldr	r3, [r7, #4]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_close>:

int _close(int file)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ee4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_isatty>:

int _isatty(int file)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	@ (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f003 ff24 	bl	8005da0 <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20020000 	.word	0x20020000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	20000460 	.word	0x20000460
 8001f8c:	200005b8 	.word	0x200005b8

08001f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <SystemInit+0x20>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9a:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <SystemInit+0x20>)
 8001f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fb8:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fba:	490e      	ldr	r1, [pc, #56]	@ (8001ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0b      	ldr	r2, [pc, #44]	@ (8001ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8002000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fde:	f7ff ffd7 	bl	8001f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f003 fee3 	bl	8005dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe6:	f7ff f8a9 	bl	800113c <main>
  bx  lr    
 8001fea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ff8:	08007ef0 	.word	0x08007ef0
  ldr r2, =_sbss
 8001ffc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002000:	200005b4 	.word	0x200005b4

08002004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC_IRQHandler>
	...

08002008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <HAL_Init+0x40>)
 8002012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <HAL_Init+0x40>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <HAL_Init+0x40>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 f92b 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002036:	200f      	movs	r0, #15
 8002038:	f000 f808 	bl	800204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800203c:	f7ff fce2 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002054:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <HAL_InitTick+0x54>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_InitTick+0x58>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f943 	bl	80022f6 <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f000 f90b 	bl	80022a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	@ (80020a8 <HAL_InitTick+0x5c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000008 	.word	0x20000008
 80020a8:	20000004 	.word	0x20000004

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000008 	.word	0x20000008
 80020d0:	20000464 	.word	0x20000464

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000464 	.word	0x20000464

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	@ (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4907      	ldr	r1, [pc, #28]	@ (8002188 <__NVIC_EnableIRQ+0x38>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100

0800218c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	db0a      	blt.n	80021b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	490c      	ldr	r1, [pc, #48]	@ (80021d8 <__NVIC_SetPriority+0x4c>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	0112      	lsls	r2, r2, #4
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	440b      	add	r3, r1
 80021b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b4:	e00a      	b.n	80021cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4908      	ldr	r1, [pc, #32]	@ (80021dc <__NVIC_SetPriority+0x50>)
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	3b04      	subs	r3, #4
 80021c4:	0112      	lsls	r2, r2, #4
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	440b      	add	r3, r1
 80021ca:	761a      	strb	r2, [r3, #24]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000e100 	.word	0xe000e100
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	@ 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f1c3 0307 	rsb	r3, r3, #7
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	bf28      	it	cs
 80021fe:	2304      	movcs	r3, #4
 8002200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3304      	adds	r3, #4
 8002206:	2b06      	cmp	r3, #6
 8002208:	d902      	bls.n	8002210 <NVIC_EncodePriority+0x30>
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3b03      	subs	r3, #3
 800220e:	e000      	b.n	8002212 <NVIC_EncodePriority+0x32>
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	401a      	ands	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002228:	f04f 31ff 	mov.w	r1, #4294967295
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	43d9      	mvns	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	4313      	orrs	r3, r2
         );
}
 800223a:	4618      	mov	r0, r3
 800223c:	3724      	adds	r7, #36	@ 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002258:	d301      	bcc.n	800225e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225e:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <SysTick_Config+0x40>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002266:	210f      	movs	r1, #15
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7ff ff8e 	bl	800218c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <SysTick_Config+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002276:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <SysTick_Config+0x40>)
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff29 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff3e 	bl	8002134 <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff8e 	bl	80021e0 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5d 	bl	800218c <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff31 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffa2 	bl	8002248 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	@ 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e16b      	b.n	8002604 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 815a 	bne.w	80025fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d005      	beq.n	8002362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	2b02      	cmp	r3, #2
 8002360:	d130      	bne.n	80023c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 0201 	and.w	r2, r3, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d017      	beq.n	8002400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	69b9      	ldr	r1, [r7, #24]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80b4 	beq.w	80025fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b60      	ldr	r3, [pc, #384]	@ (800261c <HAL_GPIO_Init+0x30c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	4a5f      	ldr	r2, [pc, #380]	@ (800261c <HAL_GPIO_Init+0x30c>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a6:	4b5d      	ldr	r3, [pc, #372]	@ (800261c <HAL_GPIO_Init+0x30c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002620 <HAL_GPIO_Init+0x310>)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	220f      	movs	r2, #15
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a52      	ldr	r2, [pc, #328]	@ (8002624 <HAL_GPIO_Init+0x314>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d02b      	beq.n	8002536 <HAL_GPIO_Init+0x226>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a51      	ldr	r2, [pc, #324]	@ (8002628 <HAL_GPIO_Init+0x318>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d025      	beq.n	8002532 <HAL_GPIO_Init+0x222>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a50      	ldr	r2, [pc, #320]	@ (800262c <HAL_GPIO_Init+0x31c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01f      	beq.n	800252e <HAL_GPIO_Init+0x21e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002630 <HAL_GPIO_Init+0x320>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d019      	beq.n	800252a <HAL_GPIO_Init+0x21a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002634 <HAL_GPIO_Init+0x324>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_GPIO_Init+0x216>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4d      	ldr	r2, [pc, #308]	@ (8002638 <HAL_GPIO_Init+0x328>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00d      	beq.n	8002522 <HAL_GPIO_Init+0x212>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4c      	ldr	r2, [pc, #304]	@ (800263c <HAL_GPIO_Init+0x32c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <HAL_GPIO_Init+0x20e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4b      	ldr	r2, [pc, #300]	@ (8002640 <HAL_GPIO_Init+0x330>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d101      	bne.n	800251a <HAL_GPIO_Init+0x20a>
 8002516:	2307      	movs	r3, #7
 8002518:	e00e      	b.n	8002538 <HAL_GPIO_Init+0x228>
 800251a:	2308      	movs	r3, #8
 800251c:	e00c      	b.n	8002538 <HAL_GPIO_Init+0x228>
 800251e:	2306      	movs	r3, #6
 8002520:	e00a      	b.n	8002538 <HAL_GPIO_Init+0x228>
 8002522:	2305      	movs	r3, #5
 8002524:	e008      	b.n	8002538 <HAL_GPIO_Init+0x228>
 8002526:	2304      	movs	r3, #4
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x228>
 800252a:	2303      	movs	r3, #3
 800252c:	e004      	b.n	8002538 <HAL_GPIO_Init+0x228>
 800252e:	2302      	movs	r3, #2
 8002530:	e002      	b.n	8002538 <HAL_GPIO_Init+0x228>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x228>
 8002536:	2300      	movs	r3, #0
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f002 0203 	and.w	r2, r2, #3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4093      	lsls	r3, r2
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002548:	4935      	ldr	r1, [pc, #212]	@ (8002620 <HAL_GPIO_Init+0x310>)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002556:	4b3b      	ldr	r3, [pc, #236]	@ (8002644 <HAL_GPIO_Init+0x334>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257a:	4a32      	ldr	r2, [pc, #200]	@ (8002644 <HAL_GPIO_Init+0x334>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002580:	4b30      	ldr	r3, [pc, #192]	@ (8002644 <HAL_GPIO_Init+0x334>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a4:	4a27      	ldr	r2, [pc, #156]	@ (8002644 <HAL_GPIO_Init+0x334>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025aa:	4b26      	ldr	r3, [pc, #152]	@ (8002644 <HAL_GPIO_Init+0x334>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002644 <HAL_GPIO_Init+0x334>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <HAL_GPIO_Init+0x334>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f8:	4a12      	ldr	r2, [pc, #72]	@ (8002644 <HAL_GPIO_Init+0x334>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3301      	adds	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	f67f ae90 	bls.w	800232c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3724      	adds	r7, #36	@ 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40013800 	.word	0x40013800
 8002624:	40020000 	.word	0x40020000
 8002628:	40020400 	.word	0x40020400
 800262c:	40020800 	.word	0x40020800
 8002630:	40020c00 	.word	0x40020c00
 8002634:	40021000 	.word	0x40021000
 8002638:	40021400 	.word	0x40021400
 800263c:	40021800 	.word	0x40021800
 8002640:	40021c00 	.word	0x40021c00
 8002644:	40013c00 	.word	0x40013c00

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002664:	e003      	b.n	800266e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	619a      	str	r2, [r3, #24]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002686:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002692:	4a05      	ldr	r2, [pc, #20]	@ (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff f92c 	bl	80018f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40013c00 	.word	0x40013c00

080026ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e267      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d075      	beq.n	80027b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026ca:	4b88      	ldr	r3, [pc, #544]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d00c      	beq.n	80026f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d6:	4b85      	ldr	r3, [pc, #532]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d112      	bne.n	8002708 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4b82      	ldr	r3, [pc, #520]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ee:	d10b      	bne.n	8002708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	4b7e      	ldr	r3, [pc, #504]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05b      	beq.n	80027b4 <HAL_RCC_OscConfig+0x108>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d157      	bne.n	80027b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e242      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x74>
 8002712:	4b76      	ldr	r3, [pc, #472]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a75      	ldr	r2, [pc, #468]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e01d      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x98>
 800272a:	4b70      	ldr	r3, [pc, #448]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6f      	ldr	r2, [pc, #444]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b6d      	ldr	r3, [pc, #436]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6c      	ldr	r2, [pc, #432]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002744:	4b69      	ldr	r3, [pc, #420]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a68      	ldr	r2, [pc, #416]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b66      	ldr	r3, [pc, #408]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a65      	ldr	r2, [pc, #404]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fcb6 	bl	80020d4 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff fcb2 	bl	80020d4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e207      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b5b      	ldr	r3, [pc, #364]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0xc0>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7ff fca2 	bl	80020d4 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff fc9e 	bl	80020d4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e1f3      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a6:	4b51      	ldr	r3, [pc, #324]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0xe8>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d063      	beq.n	800288a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027c2:	4b4a      	ldr	r3, [pc, #296]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ce:	4b47      	ldr	r3, [pc, #284]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d11c      	bne.n	8002814 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b44      	ldr	r3, [pc, #272]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d116      	bne.n	8002814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	4b41      	ldr	r3, [pc, #260]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_RCC_OscConfig+0x152>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e1c7      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b3b      	ldr	r3, [pc, #236]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4937      	ldr	r1, [pc, #220]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002812:	e03a      	b.n	800288a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281c:	4b34      	ldr	r3, [pc, #208]	@ (80028f0 <HAL_RCC_OscConfig+0x244>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7ff fc57 	bl	80020d4 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282a:	f7ff fc53 	bl	80020d4 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1a8      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	4b2b      	ldr	r3, [pc, #172]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	4b28      	ldr	r3, [pc, #160]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4925      	ldr	r1, [pc, #148]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
 800285c:	e015      	b.n	800288a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <HAL_RCC_OscConfig+0x244>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7ff fc36 	bl	80020d4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286c:	f7ff fc32 	bl	80020d4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e187      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d036      	beq.n	8002904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289e:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <HAL_RCC_OscConfig+0x248>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7ff fc16 	bl	80020d4 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ac:	f7ff fc12 	bl	80020d4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e167      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80028c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x200>
 80028ca:	e01b      	b.n	8002904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCC_OscConfig+0x248>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d2:	f7ff fbff 	bl	80020d4 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	e00e      	b.n	80028f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028da:	f7ff fbfb 	bl	80020d4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d907      	bls.n	80028f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e150      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
 80028ec:	40023800 	.word	0x40023800
 80028f0:	42470000 	.word	0x42470000
 80028f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	4b88      	ldr	r3, [pc, #544]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ea      	bne.n	80028da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8097 	beq.w	8002a40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002916:	4b81      	ldr	r3, [pc, #516]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10f      	bne.n	8002942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	4b7d      	ldr	r3, [pc, #500]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	@ 0x40
 8002932:	4b7a      	ldr	r3, [pc, #488]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	4b77      	ldr	r3, [pc, #476]	@ (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d118      	bne.n	8002980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294e:	4b74      	ldr	r3, [pc, #464]	@ (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a73      	ldr	r2, [pc, #460]	@ (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295a:	f7ff fbbb 	bl	80020d4 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002962:	f7ff fbb7 	bl	80020d4 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e10c      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b6a      	ldr	r3, [pc, #424]	@ (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x2ea>
 8002988:	4b64      	ldr	r3, [pc, #400]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298c:	4a63      	ldr	r2, [pc, #396]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	@ 0x70
 8002994:	e01c      	b.n	80029d0 <HAL_RCC_OscConfig+0x324>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x30c>
 800299e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029aa:	4b5c      	ldr	r3, [pc, #368]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	4a5b      	ldr	r2, [pc, #364]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0x324>
 80029b8:	4b58      	ldr	r3, [pc, #352]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	4a57      	ldr	r2, [pc, #348]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c4:	4b55      	ldr	r3, [pc, #340]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	4a54      	ldr	r2, [pc, #336]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 0304 	bic.w	r3, r3, #4
 80029ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7ff fb7c 	bl	80020d4 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7ff fb78 	bl	80020d4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0cb      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ee      	beq.n	80029e0 <HAL_RCC_OscConfig+0x334>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a04:	f7ff fb66 	bl	80020d4 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7ff fb62 	bl	80020d4 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e0b5      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	4b3e      	ldr	r3, [pc, #248]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ee      	bne.n	8002a0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a34:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	4a38      	ldr	r2, [pc, #224]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80a1 	beq.w	8002b8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d05c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d141      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <HAL_RCC_OscConfig+0x478>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7ff fb36 	bl	80020d4 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7ff fb32 	bl	80020d4 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e087      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	4b27      	ldr	r3, [pc, #156]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	491b      	ldr	r1, [pc, #108]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x478>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7ff fb0b 	bl	80020d4 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7ff fb07 	bl	80020d4 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e05c      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad4:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x416>
 8002ae0:	e054      	b.n	8002b8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_RCC_OscConfig+0x478>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff faf4 	bl	80020d4 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7ff faf0 	bl	80020d4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e045      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x444>
 8002b0e:	e03d      	b.n	8002b8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e038      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x4ec>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d028      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d121      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d11a      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d111      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	3b01      	subs	r3, #1
 8002b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800

08002b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0cc      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b68      	ldr	r3, [pc, #416]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d90c      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b65      	ldr	r3, [pc, #404]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b63      	ldr	r3, [pc, #396]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0b8      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf0:	4b59      	ldr	r3, [pc, #356]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4a58      	ldr	r2, [pc, #352]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c08:	4b53      	ldr	r3, [pc, #332]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a52      	ldr	r2, [pc, #328]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b50      	ldr	r3, [pc, #320]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	494d      	ldr	r1, [pc, #308]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d044      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b47      	ldr	r3, [pc, #284]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d119      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e07f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e067      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b37      	ldr	r3, [pc, #220]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4934      	ldr	r1, [pc, #208]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c8c:	f7ff fa22 	bl	80020d4 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7ff fa1e 	bl	80020d4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e04f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b25      	ldr	r3, [pc, #148]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d20c      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b22      	ldr	r3, [pc, #136]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b20      	ldr	r3, [pc, #128]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e032      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4916      	ldr	r1, [pc, #88]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0e:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	490e      	ldr	r1, [pc, #56]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d22:	f000 f821 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8002d26:	4602      	mov	r2, r0
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	490a      	ldr	r1, [pc, #40]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	5ccb      	ldrb	r3, [r1, r3]
 8002d36:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3a:	4a09      	ldr	r2, [pc, #36]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d3e:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff f982 	bl	800204c <HAL_InitTick>

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023c00 	.word	0x40023c00
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08007b58 	.word	0x08007b58
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000004 	.word	0x20000004

08002d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d6c:	b094      	sub	sp, #80	@ 0x50
 8002d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d80:	4b79      	ldr	r3, [pc, #484]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d00d      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x40>
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	f200 80e1 	bhi.w	8002f54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x34>
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d003      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d9a:	e0db      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b73      	ldr	r3, [pc, #460]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002da0:	e0db      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da2:	4b73      	ldr	r3, [pc, #460]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x208>)
 8002da4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002da6:	e0d8      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002db0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	099b      	lsrs	r3, r3, #6
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dda:	4622      	mov	r2, r4
 8002ddc:	462b      	mov	r3, r5
 8002dde:	f04f 0000 	mov.w	r0, #0
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	0159      	lsls	r1, r3, #5
 8002de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dec:	0150      	lsls	r0, r2, #5
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4621      	mov	r1, r4
 8002df4:	1a51      	subs	r1, r2, r1
 8002df6:	6139      	str	r1, [r7, #16]
 8002df8:	4629      	mov	r1, r5
 8002dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e0c:	4659      	mov	r1, fp
 8002e0e:	018b      	lsls	r3, r1, #6
 8002e10:	4651      	mov	r1, sl
 8002e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e16:	4651      	mov	r1, sl
 8002e18:	018a      	lsls	r2, r1, #6
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e20:	4659      	mov	r1, fp
 8002e22:	eb63 0901 	sbc.w	r9, r3, r1
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e3a:	4690      	mov	r8, r2
 8002e3c:	4699      	mov	r9, r3
 8002e3e:	4623      	mov	r3, r4
 8002e40:	eb18 0303 	adds.w	r3, r8, r3
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	462b      	mov	r3, r5
 8002e48:	eb49 0303 	adc.w	r3, r9, r3
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	024b      	lsls	r3, r1, #9
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e64:	4621      	mov	r1, r4
 8002e66:	024a      	lsls	r2, r1, #9
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e78:	f7fd fe96 	bl	8000ba8 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e84:	e058      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e86:	4b38      	ldr	r3, [pc, #224]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	4611      	mov	r1, r2
 8002e92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e96:	623b      	str	r3, [r7, #32]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	0159      	lsls	r1, r3, #5
 8002eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb2:	0150      	lsls	r0, r2, #5
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ed0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ed4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ed8:	ebb2 040a 	subs.w	r4, r2, sl
 8002edc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	00eb      	lsls	r3, r5, #3
 8002eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eee:	00e2      	lsls	r2, r4, #3
 8002ef0:	4614      	mov	r4, r2
 8002ef2:	461d      	mov	r5, r3
 8002ef4:	4643      	mov	r3, r8
 8002ef6:	18e3      	adds	r3, r4, r3
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	464b      	mov	r3, r9
 8002efc:	eb45 0303 	adc.w	r3, r5, r3
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f0e:	4629      	mov	r1, r5
 8002f10:	028b      	lsls	r3, r1, #10
 8002f12:	4621      	mov	r1, r4
 8002f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f18:	4621      	mov	r1, r4
 8002f1a:	028a      	lsls	r2, r1, #10
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f22:	2200      	movs	r2, #0
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	61fa      	str	r2, [r7, #28]
 8002f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f2c:	f7fd fe3c 	bl	8000ba8 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4613      	mov	r3, r2
 8002f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	3301      	adds	r3, #1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f52:	e002      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3750      	adds	r7, #80	@ 0x50
 8002f60:	46bd      	mov	sp, r7
 8002f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	007a1200 	.word	0x007a1200

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0a9b      	lsrs	r3, r3, #10
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	08007b68 	.word	0x08007b68

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fb8:	f7ff ffdc 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0b5b      	lsrs	r3, r3, #13
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	@ (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	08007b68 	.word	0x08007b68

08002fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e041      	b.n	8003072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe fda2 	bl	8001b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f001 f976 	bl	800430c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d001      	beq.n	8003094 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e046      	b.n	8003122 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a23      	ldr	r2, [pc, #140]	@ (8003130 <HAL_TIM_Base_Start+0xb4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d022      	beq.n	80030ec <HAL_TIM_Base_Start+0x70>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ae:	d01d      	beq.n	80030ec <HAL_TIM_Base_Start+0x70>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003134 <HAL_TIM_Base_Start+0xb8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d018      	beq.n	80030ec <HAL_TIM_Base_Start+0x70>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1e      	ldr	r2, [pc, #120]	@ (8003138 <HAL_TIM_Base_Start+0xbc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d013      	beq.n	80030ec <HAL_TIM_Base_Start+0x70>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <HAL_TIM_Base_Start+0xc0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00e      	beq.n	80030ec <HAL_TIM_Base_Start+0x70>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <HAL_TIM_Base_Start+0xc4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_TIM_Base_Start+0x70>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a19      	ldr	r2, [pc, #100]	@ (8003144 <HAL_TIM_Base_Start+0xc8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIM_Base_Start+0x70>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a18      	ldr	r2, [pc, #96]	@ (8003148 <HAL_TIM_Base_Start+0xcc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d111      	bne.n	8003110 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d010      	beq.n	8003120 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310e:	e007      	b.n	8003120 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40010000 	.word	0x40010000
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800
 800313c:	40000c00 	.word	0x40000c00
 8003140:	40010400 	.word	0x40010400
 8003144:	40014000 	.word	0x40014000
 8003148:	40001800 	.word	0x40001800

0800314c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d001      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e04e      	b.n	8003202 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <HAL_TIM_Base_Start_IT+0xc4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d022      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x80>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800318e:	d01d      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x80>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1f      	ldr	r2, [pc, #124]	@ (8003214 <HAL_TIM_Base_Start_IT+0xc8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d018      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x80>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1e      	ldr	r2, [pc, #120]	@ (8003218 <HAL_TIM_Base_Start_IT+0xcc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x80>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1c      	ldr	r2, [pc, #112]	@ (800321c <HAL_TIM_Base_Start_IT+0xd0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00e      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x80>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003220 <HAL_TIM_Base_Start_IT+0xd4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x80>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a19      	ldr	r2, [pc, #100]	@ (8003224 <HAL_TIM_Base_Start_IT+0xd8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x80>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a18      	ldr	r2, [pc, #96]	@ (8003228 <HAL_TIM_Base_Start_IT+0xdc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d111      	bne.n	80031f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d010      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ee:	e007      	b.n	8003200 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40010000 	.word	0x40010000
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40010400 	.word	0x40010400
 8003224:	40014000 	.word	0x40014000
 8003228:	40001800 	.word	0x40001800

0800322c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e041      	b.n	80032c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f839 	bl	80032ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f001 f84e 	bl	800430c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <HAL_TIM_PWM_Start+0x24>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e022      	b.n	800334a <HAL_TIM_PWM_Start+0x6a>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b04      	cmp	r3, #4
 8003308:	d109      	bne.n	800331e <HAL_TIM_PWM_Start+0x3e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e015      	b.n	800334a <HAL_TIM_PWM_Start+0x6a>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d109      	bne.n	8003338 <HAL_TIM_PWM_Start+0x58>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e008      	b.n	800334a <HAL_TIM_PWM_Start+0x6a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e07c      	b.n	800344c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <HAL_TIM_PWM_Start+0x82>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003360:	e013      	b.n	800338a <HAL_TIM_PWM_Start+0xaa>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d104      	bne.n	8003372 <HAL_TIM_PWM_Start+0x92>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003370:	e00b      	b.n	800338a <HAL_TIM_PWM_Start+0xaa>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d104      	bne.n	8003382 <HAL_TIM_PWM_Start+0xa2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003380:	e003      	b.n	800338a <HAL_TIM_PWM_Start+0xaa>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2201      	movs	r2, #1
 8003390:	6839      	ldr	r1, [r7, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f001 fbda 	bl	8004b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2d      	ldr	r2, [pc, #180]	@ (8003454 <HAL_TIM_PWM_Start+0x174>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIM_PWM_Start+0xcc>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003458 <HAL_TIM_PWM_Start+0x178>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_TIM_PWM_Start+0xd0>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_TIM_PWM_Start+0xd2>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a22      	ldr	r2, [pc, #136]	@ (8003454 <HAL_TIM_PWM_Start+0x174>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_TIM_PWM_Start+0x136>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d8:	d01d      	beq.n	8003416 <HAL_TIM_PWM_Start+0x136>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1f      	ldr	r2, [pc, #124]	@ (800345c <HAL_TIM_PWM_Start+0x17c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d018      	beq.n	8003416 <HAL_TIM_PWM_Start+0x136>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003460 <HAL_TIM_PWM_Start+0x180>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_TIM_PWM_Start+0x136>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003464 <HAL_TIM_PWM_Start+0x184>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_TIM_PWM_Start+0x136>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a16      	ldr	r2, [pc, #88]	@ (8003458 <HAL_TIM_PWM_Start+0x178>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_TIM_PWM_Start+0x136>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <HAL_TIM_PWM_Start+0x188>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_TIM_PWM_Start+0x136>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a16      	ldr	r2, [pc, #88]	@ (800346c <HAL_TIM_PWM_Start+0x18c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d111      	bne.n	800343a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b06      	cmp	r3, #6
 8003426:	d010      	beq.n	800344a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003438:	e007      	b.n	800344a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40010000 	.word	0x40010000
 8003458:	40010400 	.word	0x40010400
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	40000c00 	.word	0x40000c00
 8003468:	40014000 	.word	0x40014000
 800346c:	40001800 	.word	0x40001800

08003470 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e041      	b.n	8003506 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f839 	bl	800350e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f000 ff2c 	bl	800430c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <HAL_TIM_IC_Start_IT+0x1e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800353e:	b2db      	uxtb	r3, r3
 8003540:	e013      	b.n	800356a <HAL_TIM_IC_Start_IT+0x46>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d104      	bne.n	8003552 <HAL_TIM_IC_Start_IT+0x2e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e00b      	b.n	800356a <HAL_TIM_IC_Start_IT+0x46>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d104      	bne.n	8003562 <HAL_TIM_IC_Start_IT+0x3e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	b2db      	uxtb	r3, r3
 8003560:	e003      	b.n	800356a <HAL_TIM_IC_Start_IT+0x46>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <HAL_TIM_IC_Start_IT+0x58>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e013      	b.n	80035a4 <HAL_TIM_IC_Start_IT+0x80>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d104      	bne.n	800358c <HAL_TIM_IC_Start_IT+0x68>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e00b      	b.n	80035a4 <HAL_TIM_IC_Start_IT+0x80>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d104      	bne.n	800359c <HAL_TIM_IC_Start_IT+0x78>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e003      	b.n	80035a4 <HAL_TIM_IC_Start_IT+0x80>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035a6:	7bbb      	ldrb	r3, [r7, #14]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d102      	bne.n	80035b2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035ac:	7b7b      	ldrb	r3, [r7, #13]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d001      	beq.n	80035b6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0cc      	b.n	8003750 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_IC_Start_IT+0xa2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c4:	e013      	b.n	80035ee <HAL_TIM_IC_Start_IT+0xca>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_IC_Start_IT+0xb2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d4:	e00b      	b.n	80035ee <HAL_TIM_IC_Start_IT+0xca>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_IC_Start_IT+0xc2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e4:	e003      	b.n	80035ee <HAL_TIM_IC_Start_IT+0xca>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <HAL_TIM_IC_Start_IT+0xda>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035fc:	e013      	b.n	8003626 <HAL_TIM_IC_Start_IT+0x102>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d104      	bne.n	800360e <HAL_TIM_IC_Start_IT+0xea>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800360c:	e00b      	b.n	8003626 <HAL_TIM_IC_Start_IT+0x102>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d104      	bne.n	800361e <HAL_TIM_IC_Start_IT+0xfa>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800361c:	e003      	b.n	8003626 <HAL_TIM_IC_Start_IT+0x102>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b0c      	cmp	r3, #12
 800362a:	d841      	bhi.n	80036b0 <HAL_TIM_IC_Start_IT+0x18c>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <HAL_TIM_IC_Start_IT+0x110>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003669 	.word	0x08003669
 8003638:	080036b1 	.word	0x080036b1
 800363c:	080036b1 	.word	0x080036b1
 8003640:	080036b1 	.word	0x080036b1
 8003644:	0800367b 	.word	0x0800367b
 8003648:	080036b1 	.word	0x080036b1
 800364c:	080036b1 	.word	0x080036b1
 8003650:	080036b1 	.word	0x080036b1
 8003654:	0800368d 	.word	0x0800368d
 8003658:	080036b1 	.word	0x080036b1
 800365c:	080036b1 	.word	0x080036b1
 8003660:	080036b1 	.word	0x080036b1
 8003664:	0800369f 	.word	0x0800369f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0202 	orr.w	r2, r2, #2
 8003676:	60da      	str	r2, [r3, #12]
      break;
 8003678:	e01d      	b.n	80036b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0204 	orr.w	r2, r2, #4
 8003688:	60da      	str	r2, [r3, #12]
      break;
 800368a:	e014      	b.n	80036b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	60da      	str	r2, [r3, #12]
      break;
 800369c:	e00b      	b.n	80036b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0210 	orr.w	r2, r2, #16
 80036ac:	60da      	str	r2, [r3, #12]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      break;
 80036b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d148      	bne.n	800374e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fa41 	bl	8004b4c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a22      	ldr	r2, [pc, #136]	@ (8003758 <HAL_TIM_IC_Start_IT+0x234>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <HAL_TIM_IC_Start_IT+0x1f6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036dc:	d01d      	beq.n	800371a <HAL_TIM_IC_Start_IT+0x1f6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1e      	ldr	r2, [pc, #120]	@ (800375c <HAL_TIM_IC_Start_IT+0x238>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d018      	beq.n	800371a <HAL_TIM_IC_Start_IT+0x1f6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003760 <HAL_TIM_IC_Start_IT+0x23c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <HAL_TIM_IC_Start_IT+0x1f6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003764 <HAL_TIM_IC_Start_IT+0x240>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00e      	beq.n	800371a <HAL_TIM_IC_Start_IT+0x1f6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a19      	ldr	r2, [pc, #100]	@ (8003768 <HAL_TIM_IC_Start_IT+0x244>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d009      	beq.n	800371a <HAL_TIM_IC_Start_IT+0x1f6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a18      	ldr	r2, [pc, #96]	@ (800376c <HAL_TIM_IC_Start_IT+0x248>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d004      	beq.n	800371a <HAL_TIM_IC_Start_IT+0x1f6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a16      	ldr	r2, [pc, #88]	@ (8003770 <HAL_TIM_IC_Start_IT+0x24c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d111      	bne.n	800373e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b06      	cmp	r3, #6
 800372a:	d010      	beq.n	800374e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	e007      	b.n	800374e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40010400 	.word	0x40010400
 800376c:	40014000 	.word	0x40014000
 8003770:	40001800 	.word	0x40001800

08003774 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e097      	b.n	80038b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fe f959 	bl	8001a54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037b8:	f023 0307 	bic.w	r3, r3, #7
 80037bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f000 fd9f 	bl	800430c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	4313      	orrs	r3, r2
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003814:	f023 030c 	bic.w	r3, r3, #12
 8003818:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003820:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	4313      	orrs	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	011a      	lsls	r2, r3, #4
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	4313      	orrs	r3, r2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003852:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	4313      	orrs	r3, r2
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80038e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d110      	bne.n	8003912 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038f6:	7b7b      	ldrb	r3, [r7, #13]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d001      	beq.n	8003900 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e069      	b.n	80039d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003910:	e031      	b.n	8003976 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d110      	bne.n	800393a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003918:	7bbb      	ldrb	r3, [r7, #14]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d102      	bne.n	8003924 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800391e:	7b3b      	ldrb	r3, [r7, #12]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d001      	beq.n	8003928 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e055      	b.n	80039d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003938:	e01d      	b.n	8003976 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d108      	bne.n	8003952 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003940:	7bbb      	ldrb	r3, [r7, #14]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d105      	bne.n	8003952 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003946:	7b7b      	ldrb	r3, [r7, #13]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d102      	bne.n	8003952 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800394c:	7b3b      	ldrb	r3, [r7, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d001      	beq.n	8003956 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e03e      	b.n	80039d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_TIM_Encoder_Start+0xc4>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b04      	cmp	r3, #4
 8003980:	d008      	beq.n	8003994 <HAL_TIM_Encoder_Start+0xd4>
 8003982:	e00f      	b.n	80039a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2201      	movs	r2, #1
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f001 f8dd 	bl	8004b4c <TIM_CCxChannelCmd>
      break;
 8003992:	e016      	b.n	80039c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2201      	movs	r2, #1
 800399a:	2104      	movs	r1, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f001 f8d5 	bl	8004b4c <TIM_CCxChannelCmd>
      break;
 80039a2:	e00e      	b.n	80039c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	2100      	movs	r1, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 f8cd 	bl	8004b4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2201      	movs	r2, #1
 80039b8:	2104      	movs	r1, #4
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 f8c6 	bl	8004b4c <TIM_CCxChannelCmd>
      break;
 80039c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d110      	bne.n	8003a2e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d102      	bne.n	8003a18 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a12:	7b7b      	ldrb	r3, [r7, #13]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d001      	beq.n	8003a1c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e089      	b.n	8003b30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a2c:	e031      	b.n	8003a92 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d110      	bne.n	8003a56 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a34:	7bbb      	ldrb	r3, [r7, #14]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a3a:	7b3b      	ldrb	r3, [r7, #12]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d001      	beq.n	8003a44 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e075      	b.n	8003b30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a54:	e01d      	b.n	8003a92 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d108      	bne.n	8003a6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a5c:	7bbb      	ldrb	r3, [r7, #14]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a62:	7b7b      	ldrb	r3, [r7, #13]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d102      	bne.n	8003a6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a68:	7b3b      	ldrb	r3, [r7, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e05e      	b.n	8003b30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d010      	beq.n	8003ac0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003a9e:	e01f      	b.n	8003ae0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 f84f 	bl	8004b4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0202 	orr.w	r2, r2, #2
 8003abc:	60da      	str	r2, [r3, #12]
      break;
 8003abe:	e02e      	b.n	8003b1e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	2104      	movs	r1, #4
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 f83f 	bl	8004b4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0204 	orr.w	r2, r2, #4
 8003adc:	60da      	str	r2, [r3, #12]
      break;
 8003ade:	e01e      	b.n	8003b1e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f82f 	bl	8004b4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	2104      	movs	r1, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 f828 	bl	8004b4c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0202 	orr.w	r2, r2, #2
 8003b0a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0204 	orr.w	r2, r2, #4
 8003b1a:	60da      	str	r2, [r3, #12]
      break;
 8003b1c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fffb 	bl	8004b4c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0202 	bic.w	r2, r2, #2
 8003b64:	60da      	str	r2, [r3, #12]
 8003b66:	e030      	b.n	8003bca <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d10f      	bne.n	8003b8e <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2104      	movs	r1, #4
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 ffe8 	bl	8004b4c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0204 	bic.w	r2, r2, #4
 8003b8a:	60da      	str	r2, [r3, #12]
 8003b8c:	e01d      	b.n	8003bca <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 ffd8 	bl	8004b4c <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2104      	movs	r1, #4
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 ffd1 	bl	8004b4c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0202 	bic.w	r2, r2, #2
 8003bb8:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0204 	bic.w	r2, r2, #4
 8003bc8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <HAL_TIM_Encoder_Stop_IT+0xc2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	f240 4344 	movw	r3, #1092	@ 0x444
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <HAL_TIM_Encoder_Stop_IT+0xc2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_TIM_Encoder_Stop_IT+0xce>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d138      	bne.n	8003c78 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <HAL_TIM_Encoder_Stop_IT+0xde>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c14:	e013      	b.n	8003c3e <HAL_TIM_Encoder_Stop_IT+0x106>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d104      	bne.n	8003c26 <HAL_TIM_Encoder_Stop_IT+0xee>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c24:	e00b      	b.n	8003c3e <HAL_TIM_Encoder_Stop_IT+0x106>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c34:	e003      	b.n	8003c3e <HAL_TIM_Encoder_Stop_IT+0x106>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_Encoder_Stop_IT+0x116>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c4c:	e024      	b.n	8003c98 <HAL_TIM_Encoder_Stop_IT+0x160>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_Encoder_Stop_IT+0x126>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c5c:	e01c      	b.n	8003c98 <HAL_TIM_Encoder_Stop_IT+0x160>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d104      	bne.n	8003c6e <HAL_TIM_Encoder_Stop_IT+0x136>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c6c:	e014      	b.n	8003c98 <HAL_TIM_Encoder_Stop_IT+0x160>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c76:	e00f      	b.n	8003c98 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01b      	beq.n	8003d06 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f06f 0202 	mvn.w	r2, #2
 8003cd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fd fe25 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 8003cf2:	e005      	b.n	8003d00 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 faea 	bl	80042ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 faf1 	bl	80042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01b      	beq.n	8003d52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f06f 0204 	mvn.w	r2, #4
 8003d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7fd fdff 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 8003d3e:	e005      	b.n	8003d4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fac4 	bl	80042ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 facb 	bl	80042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01b      	beq.n	8003d9e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0208 	mvn.w	r2, #8
 8003d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2204      	movs	r2, #4
 8003d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fd fdd9 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 8003d8a:	e005      	b.n	8003d98 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fa9e 	bl	80042ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 faa5 	bl	80042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01b      	beq.n	8003dea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f06f 0210 	mvn.w	r2, #16
 8003dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fd fdb3 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 8003dd6:	e005      	b.n	8003de4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fa78 	bl	80042ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fa7f 	bl	80042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00c      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0201 	mvn.w	r2, #1
 8003e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fd fde1 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00c      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 ff39 	bl	8004ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00c      	beq.n	8003e56 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fa50 	bl	80042f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00c      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f06f 0220 	mvn.w	r2, #32
 8003e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 ff0b 	bl	8004c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e088      	b.n	8003fb2 <HAL_TIM_IC_ConfigChannel+0x130>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d11b      	bne.n	8003ee6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ebe:	f000 fc81 	bl	80047c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 020c 	bic.w	r2, r2, #12
 8003ed0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6999      	ldr	r1, [r3, #24]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	619a      	str	r2, [r3, #24]
 8003ee4:	e060      	b.n	8003fa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11c      	bne.n	8003f26 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003efc:	f000 fd05 	bl	800490a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003f0e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6999      	ldr	r1, [r3, #24]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	619a      	str	r2, [r3, #24]
 8003f24:	e040      	b.n	8003fa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d11b      	bne.n	8003f64 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003f3c:	f000 fd52 	bl	80049e4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 020c 	bic.w	r2, r2, #12
 8003f4e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69d9      	ldr	r1, [r3, #28]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	61da      	str	r2, [r3, #28]
 8003f62:	e021      	b.n	8003fa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d11c      	bne.n	8003fa4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003f7a:	f000 fd6f 	bl	8004a5c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003f8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69d9      	ldr	r1, [r3, #28]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	021a      	lsls	r2, r3, #8
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	61da      	str	r2, [r3, #28]
 8003fa2:	e001      	b.n	8003fa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e0ae      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	f200 809f 	bhi.w	8004128 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fea:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004025 	.word	0x08004025
 8003ff4:	08004129 	.word	0x08004129
 8003ff8:	08004129 	.word	0x08004129
 8003ffc:	08004129 	.word	0x08004129
 8004000:	08004065 	.word	0x08004065
 8004004:	08004129 	.word	0x08004129
 8004008:	08004129 	.word	0x08004129
 800400c:	08004129 	.word	0x08004129
 8004010:	080040a7 	.word	0x080040a7
 8004014:	08004129 	.word	0x08004129
 8004018:	08004129 	.word	0x08004129
 800401c:	08004129 	.word	0x08004129
 8004020:	080040e7 	.word	0x080040e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fa1a 	bl	8004464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0208 	orr.w	r2, r2, #8
 800403e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0204 	bic.w	r2, r2, #4
 800404e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6999      	ldr	r1, [r3, #24]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	619a      	str	r2, [r3, #24]
      break;
 8004062:	e064      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fa6a 	bl	8004544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800407e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800408e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6999      	ldr	r1, [r3, #24]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	021a      	lsls	r2, r3, #8
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	619a      	str	r2, [r3, #24]
      break;
 80040a4:	e043      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fabf 	bl	8004630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0208 	orr.w	r2, r2, #8
 80040c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0204 	bic.w	r2, r2, #4
 80040d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69d9      	ldr	r1, [r3, #28]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	61da      	str	r2, [r3, #28]
      break;
 80040e4:	e023      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fb13 	bl	8004718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69d9      	ldr	r1, [r3, #28]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	021a      	lsls	r2, r3, #8
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	61da      	str	r2, [r3, #28]
      break;
 8004126:	e002      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	75fb      	strb	r3, [r7, #23]
      break;
 800412c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_TIM_ConfigClockSource+0x1c>
 8004158:	2302      	movs	r3, #2
 800415a:	e0b4      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x186>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800417a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004194:	d03e      	beq.n	8004214 <HAL_TIM_ConfigClockSource+0xd4>
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800419a:	f200 8087 	bhi.w	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a2:	f000 8086 	beq.w	80042b2 <HAL_TIM_ConfigClockSource+0x172>
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041aa:	d87f      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041ac:	2b70      	cmp	r3, #112	@ 0x70
 80041ae:	d01a      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0xa6>
 80041b0:	2b70      	cmp	r3, #112	@ 0x70
 80041b2:	d87b      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041b4:	2b60      	cmp	r3, #96	@ 0x60
 80041b6:	d050      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x11a>
 80041b8:	2b60      	cmp	r3, #96	@ 0x60
 80041ba:	d877      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041bc:	2b50      	cmp	r3, #80	@ 0x50
 80041be:	d03c      	beq.n	800423a <HAL_TIM_ConfigClockSource+0xfa>
 80041c0:	2b50      	cmp	r3, #80	@ 0x50
 80041c2:	d873      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d058      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x13a>
 80041c8:	2b40      	cmp	r3, #64	@ 0x40
 80041ca:	d86f      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041cc:	2b30      	cmp	r3, #48	@ 0x30
 80041ce:	d064      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15a>
 80041d0:	2b30      	cmp	r3, #48	@ 0x30
 80041d2:	d86b      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d060      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15a>
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d867      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d05c      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15a>
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d05a      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	e062      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f6:	f000 fc89 	bl	8004b0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	609a      	str	r2, [r3, #8]
      break;
 8004212:	e04f      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004224:	f000 fc72 	bl	8004b0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004236:	609a      	str	r2, [r3, #8]
      break;
 8004238:	e03c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	461a      	mov	r2, r3
 8004248:	f000 fb30 	bl	80048ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2150      	movs	r1, #80	@ 0x50
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fc3f 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 8004258:	e02c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004266:	461a      	mov	r2, r3
 8004268:	f000 fb8c 	bl	8004984 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2160      	movs	r1, #96	@ 0x60
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fc2f 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 8004278:	e01c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	461a      	mov	r2, r3
 8004288:	f000 fb10 	bl	80048ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2140      	movs	r1, #64	@ 0x40
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fc1f 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 8004298:	e00c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f000 fc16 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 80042aa:	e003      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      break;
 80042b0:	e000      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a46      	ldr	r2, [pc, #280]	@ (8004438 <TIM_Base_SetConfig+0x12c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d013      	beq.n	800434c <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432a:	d00f      	beq.n	800434c <TIM_Base_SetConfig+0x40>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a43      	ldr	r2, [pc, #268]	@ (800443c <TIM_Base_SetConfig+0x130>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00b      	beq.n	800434c <TIM_Base_SetConfig+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a42      	ldr	r2, [pc, #264]	@ (8004440 <TIM_Base_SetConfig+0x134>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d007      	beq.n	800434c <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a41      	ldr	r2, [pc, #260]	@ (8004444 <TIM_Base_SetConfig+0x138>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a40      	ldr	r2, [pc, #256]	@ (8004448 <TIM_Base_SetConfig+0x13c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d108      	bne.n	800435e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a35      	ldr	r2, [pc, #212]	@ (8004438 <TIM_Base_SetConfig+0x12c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d02b      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436c:	d027      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a32      	ldr	r2, [pc, #200]	@ (800443c <TIM_Base_SetConfig+0x130>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d023      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a31      	ldr	r2, [pc, #196]	@ (8004440 <TIM_Base_SetConfig+0x134>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01f      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a30      	ldr	r2, [pc, #192]	@ (8004444 <TIM_Base_SetConfig+0x138>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01b      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2f      	ldr	r2, [pc, #188]	@ (8004448 <TIM_Base_SetConfig+0x13c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d017      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2e      	ldr	r2, [pc, #184]	@ (800444c <TIM_Base_SetConfig+0x140>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2d      	ldr	r2, [pc, #180]	@ (8004450 <TIM_Base_SetConfig+0x144>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004454 <TIM_Base_SetConfig+0x148>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004458 <TIM_Base_SetConfig+0x14c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2a      	ldr	r2, [pc, #168]	@ (800445c <TIM_Base_SetConfig+0x150>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a29      	ldr	r2, [pc, #164]	@ (8004460 <TIM_Base_SetConfig+0x154>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a10      	ldr	r2, [pc, #64]	@ (8004438 <TIM_Base_SetConfig+0x12c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_Base_SetConfig+0xf8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a12      	ldr	r2, [pc, #72]	@ (8004448 <TIM_Base_SetConfig+0x13c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d103      	bne.n	800440c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d105      	bne.n	800442a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	611a      	str	r2, [r3, #16]
  }
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40000c00 	.word	0x40000c00
 8004448:	40010400 	.word	0x40010400
 800444c:	40014000 	.word	0x40014000
 8004450:	40014400 	.word	0x40014400
 8004454:	40014800 	.word	0x40014800
 8004458:	40001800 	.word	0x40001800
 800445c:	40001c00 	.word	0x40001c00
 8004460:	40002000 	.word	0x40002000

08004464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f023 0201 	bic.w	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0303 	bic.w	r3, r3, #3
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f023 0302 	bic.w	r3, r3, #2
 80044ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a20      	ldr	r2, [pc, #128]	@ (800453c <TIM_OC1_SetConfig+0xd8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_OC1_SetConfig+0x64>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004540 <TIM_OC1_SetConfig+0xdc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10c      	bne.n	80044e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0308 	bic.w	r3, r3, #8
 80044ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f023 0304 	bic.w	r3, r3, #4
 80044e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a15      	ldr	r2, [pc, #84]	@ (800453c <TIM_OC1_SetConfig+0xd8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_OC1_SetConfig+0x8e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a14      	ldr	r2, [pc, #80]	@ (8004540 <TIM_OC1_SetConfig+0xdc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d111      	bne.n	8004516 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	621a      	str	r2, [r3, #32]
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40010000 	.word	0x40010000
 8004540:	40010400 	.word	0x40010400

08004544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 0210 	bic.w	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0320 	bic.w	r3, r3, #32
 800458e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a22      	ldr	r2, [pc, #136]	@ (8004628 <TIM_OC2_SetConfig+0xe4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC2_SetConfig+0x68>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a21      	ldr	r2, [pc, #132]	@ (800462c <TIM_OC2_SetConfig+0xe8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10d      	bne.n	80045c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a17      	ldr	r2, [pc, #92]	@ (8004628 <TIM_OC2_SetConfig+0xe4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_OC2_SetConfig+0x94>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a16      	ldr	r2, [pc, #88]	@ (800462c <TIM_OC2_SetConfig+0xe8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d113      	bne.n	8004600 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000
 800462c:	40010400 	.word	0x40010400

08004630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a21      	ldr	r2, [pc, #132]	@ (8004710 <TIM_OC3_SetConfig+0xe0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d003      	beq.n	8004696 <TIM_OC3_SetConfig+0x66>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a20      	ldr	r2, [pc, #128]	@ (8004714 <TIM_OC3_SetConfig+0xe4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d10d      	bne.n	80046b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800469c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a16      	ldr	r2, [pc, #88]	@ (8004710 <TIM_OC3_SetConfig+0xe0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <TIM_OC3_SetConfig+0x92>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <TIM_OC3_SetConfig+0xe4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d113      	bne.n	80046ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	621a      	str	r2, [r3, #32]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40010000 	.word	0x40010000
 8004714:	40010400 	.word	0x40010400

08004718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800474e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	031b      	lsls	r3, r3, #12
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a12      	ldr	r2, [pc, #72]	@ (80047bc <TIM_OC4_SetConfig+0xa4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_OC4_SetConfig+0x68>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a11      	ldr	r2, [pc, #68]	@ (80047c0 <TIM_OC4_SetConfig+0xa8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d109      	bne.n	8004794 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	019b      	lsls	r3, r3, #6
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40010400 	.word	0x40010400

080047c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f023 0201 	bic.w	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a28      	ldr	r2, [pc, #160]	@ (8004890 <TIM_TI1_SetConfig+0xcc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01b      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f8:	d017      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a25      	ldr	r2, [pc, #148]	@ (8004894 <TIM_TI1_SetConfig+0xd0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a24      	ldr	r2, [pc, #144]	@ (8004898 <TIM_TI1_SetConfig+0xd4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00f      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a23      	ldr	r2, [pc, #140]	@ (800489c <TIM_TI1_SetConfig+0xd8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00b      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a22      	ldr	r2, [pc, #136]	@ (80048a0 <TIM_TI1_SetConfig+0xdc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a21      	ldr	r2, [pc, #132]	@ (80048a4 <TIM_TI1_SetConfig+0xe0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_TI1_SetConfig+0x66>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a20      	ldr	r2, [pc, #128]	@ (80048a8 <TIM_TI1_SetConfig+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <TIM_TI1_SetConfig+0x6a>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <TIM_TI1_SetConfig+0x6c>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e003      	b.n	800484e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	b2db      	uxtb	r3, r3
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f023 030a 	bic.w	r3, r3, #10
 8004868:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 030a 	and.w	r3, r3, #10
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40001800 	.word	0x40001800

080048ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0201 	bic.w	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f023 030a 	bic.w	r3, r3, #10
 80048e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0210 	bic.w	r2, r3, #16
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	b29b      	uxth	r3, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800495c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0210 	bic.w	r2, r3, #16
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	031b      	lsls	r3, r3, #12
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	621a      	str	r2, [r3, #32]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f023 0303 	bic.w	r3, r3, #3
 8004a10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	621a      	str	r2, [r3, #32]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a9a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	031b      	lsls	r3, r3, #12
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004aae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	031b      	lsls	r3, r3, #12
 8004ab4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f043 0307 	orr.w	r3, r3, #7
 8004af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	609a      	str	r2, [r3, #8]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2201      	movs	r2, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1a      	ldr	r2, [r3, #32]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	401a      	ands	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1a      	ldr	r2, [r3, #32]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e05a      	b.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a21      	ldr	r2, [pc, #132]	@ (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d022      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfc:	d01d      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1d      	ldr	r2, [pc, #116]	@ (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d018      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1a      	ldr	r2, [pc, #104]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a18      	ldr	r2, [pc, #96]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a17      	ldr	r2, [pc, #92]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a15      	ldr	r2, [pc, #84]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d10c      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40001800 	.word	0x40001800

08004c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e042      	b.n	8004d50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fd f800 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2224      	movs	r2, #36	@ 0x24
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f82b 	bl	8004d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d5c:	b0c0      	sub	sp, #256	@ 0x100
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	68d9      	ldr	r1, [r3, #12]
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	ea40 0301 	orr.w	r3, r0, r1
 8004d80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004db0:	f021 010c 	bic.w	r1, r1, #12
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd2:	6999      	ldr	r1, [r3, #24]
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	ea40 0301 	orr.w	r3, r0, r1
 8004dde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4b8f      	ldr	r3, [pc, #572]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d005      	beq.n	8004df8 <UART_SetConfig+0xa0>
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b8d      	ldr	r3, [pc, #564]	@ (8005028 <UART_SetConfig+0x2d0>)
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d104      	bne.n	8004e02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004df8:	f7fe f8dc 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8004dfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e00:	e003      	b.n	8004e0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e02:	f7fe f8c3 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8004e06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e14:	f040 810c 	bne.w	8005030 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	462b      	mov	r3, r5
 8004e2e:	1891      	adds	r1, r2, r2
 8004e30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e32:	415b      	adcs	r3, r3
 8004e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	eb12 0801 	adds.w	r8, r2, r1
 8004e40:	4629      	mov	r1, r5
 8004e42:	eb43 0901 	adc.w	r9, r3, r1
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e5a:	4690      	mov	r8, r2
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	eb18 0303 	adds.w	r3, r8, r3
 8004e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e68:	462b      	mov	r3, r5
 8004e6a:	eb49 0303 	adc.w	r3, r9, r3
 8004e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e86:	460b      	mov	r3, r1
 8004e88:	18db      	adds	r3, r3, r3
 8004e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	eb42 0303 	adc.w	r3, r2, r3
 8004e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e9c:	f7fb fe84 	bl	8000ba8 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4b61      	ldr	r3, [pc, #388]	@ (800502c <UART_SetConfig+0x2d4>)
 8004ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	011c      	lsls	r4, r3, #4
 8004eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004eb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ebc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	1891      	adds	r1, r2, r2
 8004ec6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ec8:	415b      	adcs	r3, r3
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ecc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	eb43 0b01 	adc.w	fp, r3, r1
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ee8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef0:	4692      	mov	sl, r2
 8004ef2:	469b      	mov	fp, r3
 8004ef4:	4643      	mov	r3, r8
 8004ef6:	eb1a 0303 	adds.w	r3, sl, r3
 8004efa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004efe:	464b      	mov	r3, r9
 8004f00:	eb4b 0303 	adc.w	r3, fp, r3
 8004f04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	18db      	adds	r3, r3, r3
 8004f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f22:	4613      	mov	r3, r2
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f32:	f7fb fe39 	bl	8000ba8 <__aeabi_uldivmod>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800502c <UART_SetConfig+0x2d4>)
 8004f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2264      	movs	r2, #100	@ 0x64
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	1acb      	subs	r3, r1, r3
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f52:	4b36      	ldr	r3, [pc, #216]	@ (800502c <UART_SetConfig+0x2d4>)
 8004f54:	fba3 2302 	umull	r2, r3, r3, r2
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f60:	441c      	add	r4, r3
 8004f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f74:	4642      	mov	r2, r8
 8004f76:	464b      	mov	r3, r9
 8004f78:	1891      	adds	r1, r2, r2
 8004f7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f7c:	415b      	adcs	r3, r3
 8004f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f84:	4641      	mov	r1, r8
 8004f86:	1851      	adds	r1, r2, r1
 8004f88:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	414b      	adcs	r3, r1
 8004f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f9c:	4659      	mov	r1, fp
 8004f9e:	00cb      	lsls	r3, r1, #3
 8004fa0:	4651      	mov	r1, sl
 8004fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	00ca      	lsls	r2, r1, #3
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	189b      	adds	r3, r3, r2
 8004fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fb8:	464b      	mov	r3, r9
 8004fba:	460a      	mov	r2, r1
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fd8:	460b      	mov	r3, r1
 8004fda:	18db      	adds	r3, r3, r3
 8004fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fde:	4613      	mov	r3, r2
 8004fe0:	eb42 0303 	adc.w	r3, r2, r3
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fee:	f7fb fddb 	bl	8000ba8 <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <UART_SetConfig+0x2d4>)
 8004ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	2164      	movs	r1, #100	@ 0x64
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	3332      	adds	r3, #50	@ 0x32
 800500a:	4a08      	ldr	r2, [pc, #32]	@ (800502c <UART_SetConfig+0x2d4>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	f003 0207 	and.w	r2, r3, #7
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4422      	add	r2, r4
 800501e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005020:	e106      	b.n	8005230 <UART_SetConfig+0x4d8>
 8005022:	bf00      	nop
 8005024:	40011000 	.word	0x40011000
 8005028:	40011400 	.word	0x40011400
 800502c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005034:	2200      	movs	r2, #0
 8005036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800503a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800503e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005042:	4642      	mov	r2, r8
 8005044:	464b      	mov	r3, r9
 8005046:	1891      	adds	r1, r2, r2
 8005048:	6239      	str	r1, [r7, #32]
 800504a:	415b      	adcs	r3, r3
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
 800504e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005052:	4641      	mov	r1, r8
 8005054:	1854      	adds	r4, r2, r1
 8005056:	4649      	mov	r1, r9
 8005058:	eb43 0501 	adc.w	r5, r3, r1
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	00eb      	lsls	r3, r5, #3
 8005066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800506a:	00e2      	lsls	r2, r4, #3
 800506c:	4614      	mov	r4, r2
 800506e:	461d      	mov	r5, r3
 8005070:	4643      	mov	r3, r8
 8005072:	18e3      	adds	r3, r4, r3
 8005074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005078:	464b      	mov	r3, r9
 800507a:	eb45 0303 	adc.w	r3, r5, r3
 800507e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800508e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800509e:	4629      	mov	r1, r5
 80050a0:	008b      	lsls	r3, r1, #2
 80050a2:	4621      	mov	r1, r4
 80050a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a8:	4621      	mov	r1, r4
 80050aa:	008a      	lsls	r2, r1, #2
 80050ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050b0:	f7fb fd7a 	bl	8000ba8 <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4b60      	ldr	r3, [pc, #384]	@ (800523c <UART_SetConfig+0x4e4>)
 80050ba:	fba3 2302 	umull	r2, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	011c      	lsls	r4, r3, #4
 80050c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050d4:	4642      	mov	r2, r8
 80050d6:	464b      	mov	r3, r9
 80050d8:	1891      	adds	r1, r2, r2
 80050da:	61b9      	str	r1, [r7, #24]
 80050dc:	415b      	adcs	r3, r3
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050e4:	4641      	mov	r1, r8
 80050e6:	1851      	adds	r1, r2, r1
 80050e8:	6139      	str	r1, [r7, #16]
 80050ea:	4649      	mov	r1, r9
 80050ec:	414b      	adcs	r3, r1
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050fc:	4659      	mov	r1, fp
 80050fe:	00cb      	lsls	r3, r1, #3
 8005100:	4651      	mov	r1, sl
 8005102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005106:	4651      	mov	r1, sl
 8005108:	00ca      	lsls	r2, r1, #3
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	4603      	mov	r3, r0
 8005110:	4642      	mov	r2, r8
 8005112:	189b      	adds	r3, r3, r2
 8005114:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005118:	464b      	mov	r3, r9
 800511a:	460a      	mov	r2, r1
 800511c:	eb42 0303 	adc.w	r3, r2, r3
 8005120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800512e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800513c:	4649      	mov	r1, r9
 800513e:	008b      	lsls	r3, r1, #2
 8005140:	4641      	mov	r1, r8
 8005142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005146:	4641      	mov	r1, r8
 8005148:	008a      	lsls	r2, r1, #2
 800514a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800514e:	f7fb fd2b 	bl	8000ba8 <__aeabi_uldivmod>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4611      	mov	r1, r2
 8005158:	4b38      	ldr	r3, [pc, #224]	@ (800523c <UART_SetConfig+0x4e4>)
 800515a:	fba3 2301 	umull	r2, r3, r3, r1
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	2264      	movs	r2, #100	@ 0x64
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	1acb      	subs	r3, r1, r3
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	3332      	adds	r3, #50	@ 0x32
 800516c:	4a33      	ldr	r2, [pc, #204]	@ (800523c <UART_SetConfig+0x4e4>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005178:	441c      	add	r4, r3
 800517a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517e:	2200      	movs	r2, #0
 8005180:	673b      	str	r3, [r7, #112]	@ 0x70
 8005182:	677a      	str	r2, [r7, #116]	@ 0x74
 8005184:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	1891      	adds	r1, r2, r2
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	415b      	adcs	r3, r3
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005198:	4641      	mov	r1, r8
 800519a:	1851      	adds	r1, r2, r1
 800519c:	6039      	str	r1, [r7, #0]
 800519e:	4649      	mov	r1, r9
 80051a0:	414b      	adcs	r3, r1
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051b0:	4659      	mov	r1, fp
 80051b2:	00cb      	lsls	r3, r1, #3
 80051b4:	4651      	mov	r1, sl
 80051b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ba:	4651      	mov	r1, sl
 80051bc:	00ca      	lsls	r2, r1, #3
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	4603      	mov	r3, r0
 80051c4:	4642      	mov	r2, r8
 80051c6:	189b      	adds	r3, r3, r2
 80051c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051ca:	464b      	mov	r3, r9
 80051cc:	460a      	mov	r2, r1
 80051ce:	eb42 0303 	adc.w	r3, r2, r3
 80051d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80051de:	667a      	str	r2, [r7, #100]	@ 0x64
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051ec:	4649      	mov	r1, r9
 80051ee:	008b      	lsls	r3, r1, #2
 80051f0:	4641      	mov	r1, r8
 80051f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f6:	4641      	mov	r1, r8
 80051f8:	008a      	lsls	r2, r1, #2
 80051fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051fe:	f7fb fcd3 	bl	8000ba8 <__aeabi_uldivmod>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4b0d      	ldr	r3, [pc, #52]	@ (800523c <UART_SetConfig+0x4e4>)
 8005208:	fba3 1302 	umull	r1, r3, r3, r2
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	2164      	movs	r1, #100	@ 0x64
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	3332      	adds	r3, #50	@ 0x32
 800521a:	4a08      	ldr	r2, [pc, #32]	@ (800523c <UART_SetConfig+0x4e4>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	f003 020f 	and.w	r2, r3, #15
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4422      	add	r2, r4
 800522e:	609a      	str	r2, [r3, #8]
}
 8005230:	bf00      	nop
 8005232:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005236:	46bd      	mov	sp, r7
 8005238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800523c:	51eb851f 	.word	0x51eb851f

08005240 <__cvt>:
 8005240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	ec57 6b10 	vmov	r6, r7, d0
 8005248:	2f00      	cmp	r7, #0
 800524a:	460c      	mov	r4, r1
 800524c:	4619      	mov	r1, r3
 800524e:	463b      	mov	r3, r7
 8005250:	bfbb      	ittet	lt
 8005252:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005256:	461f      	movlt	r7, r3
 8005258:	2300      	movge	r3, #0
 800525a:	232d      	movlt	r3, #45	@ 0x2d
 800525c:	700b      	strb	r3, [r1, #0]
 800525e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005260:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005264:	4691      	mov	r9, r2
 8005266:	f023 0820 	bic.w	r8, r3, #32
 800526a:	bfbc      	itt	lt
 800526c:	4632      	movlt	r2, r6
 800526e:	4616      	movlt	r6, r2
 8005270:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005274:	d005      	beq.n	8005282 <__cvt+0x42>
 8005276:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800527a:	d100      	bne.n	800527e <__cvt+0x3e>
 800527c:	3401      	adds	r4, #1
 800527e:	2102      	movs	r1, #2
 8005280:	e000      	b.n	8005284 <__cvt+0x44>
 8005282:	2103      	movs	r1, #3
 8005284:	ab03      	add	r3, sp, #12
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	ab02      	add	r3, sp, #8
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	ec47 6b10 	vmov	d0, r6, r7
 8005290:	4653      	mov	r3, sl
 8005292:	4622      	mov	r2, r4
 8005294:	f000 fe3c 	bl	8005f10 <_dtoa_r>
 8005298:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800529c:	4605      	mov	r5, r0
 800529e:	d119      	bne.n	80052d4 <__cvt+0x94>
 80052a0:	f019 0f01 	tst.w	r9, #1
 80052a4:	d00e      	beq.n	80052c4 <__cvt+0x84>
 80052a6:	eb00 0904 	add.w	r9, r0, r4
 80052aa:	2200      	movs	r2, #0
 80052ac:	2300      	movs	r3, #0
 80052ae:	4630      	mov	r0, r6
 80052b0:	4639      	mov	r1, r7
 80052b2:	f7fb fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 80052b6:	b108      	cbz	r0, 80052bc <__cvt+0x7c>
 80052b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80052bc:	2230      	movs	r2, #48	@ 0x30
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	454b      	cmp	r3, r9
 80052c2:	d31e      	bcc.n	8005302 <__cvt+0xc2>
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052c8:	1b5b      	subs	r3, r3, r5
 80052ca:	4628      	mov	r0, r5
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	b004      	add	sp, #16
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052d8:	eb00 0904 	add.w	r9, r0, r4
 80052dc:	d1e5      	bne.n	80052aa <__cvt+0x6a>
 80052de:	7803      	ldrb	r3, [r0, #0]
 80052e0:	2b30      	cmp	r3, #48	@ 0x30
 80052e2:	d10a      	bne.n	80052fa <__cvt+0xba>
 80052e4:	2200      	movs	r2, #0
 80052e6:	2300      	movs	r3, #0
 80052e8:	4630      	mov	r0, r6
 80052ea:	4639      	mov	r1, r7
 80052ec:	f7fb fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 80052f0:	b918      	cbnz	r0, 80052fa <__cvt+0xba>
 80052f2:	f1c4 0401 	rsb	r4, r4, #1
 80052f6:	f8ca 4000 	str.w	r4, [sl]
 80052fa:	f8da 3000 	ldr.w	r3, [sl]
 80052fe:	4499      	add	r9, r3
 8005300:	e7d3      	b.n	80052aa <__cvt+0x6a>
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	9103      	str	r1, [sp, #12]
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	e7d9      	b.n	80052be <__cvt+0x7e>

0800530a <__exponent>:
 800530a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800530c:	2900      	cmp	r1, #0
 800530e:	bfba      	itte	lt
 8005310:	4249      	neglt	r1, r1
 8005312:	232d      	movlt	r3, #45	@ 0x2d
 8005314:	232b      	movge	r3, #43	@ 0x2b
 8005316:	2909      	cmp	r1, #9
 8005318:	7002      	strb	r2, [r0, #0]
 800531a:	7043      	strb	r3, [r0, #1]
 800531c:	dd29      	ble.n	8005372 <__exponent+0x68>
 800531e:	f10d 0307 	add.w	r3, sp, #7
 8005322:	461d      	mov	r5, r3
 8005324:	270a      	movs	r7, #10
 8005326:	461a      	mov	r2, r3
 8005328:	fbb1 f6f7 	udiv	r6, r1, r7
 800532c:	fb07 1416 	mls	r4, r7, r6, r1
 8005330:	3430      	adds	r4, #48	@ 0x30
 8005332:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005336:	460c      	mov	r4, r1
 8005338:	2c63      	cmp	r4, #99	@ 0x63
 800533a:	f103 33ff 	add.w	r3, r3, #4294967295
 800533e:	4631      	mov	r1, r6
 8005340:	dcf1      	bgt.n	8005326 <__exponent+0x1c>
 8005342:	3130      	adds	r1, #48	@ 0x30
 8005344:	1e94      	subs	r4, r2, #2
 8005346:	f803 1c01 	strb.w	r1, [r3, #-1]
 800534a:	1c41      	adds	r1, r0, #1
 800534c:	4623      	mov	r3, r4
 800534e:	42ab      	cmp	r3, r5
 8005350:	d30a      	bcc.n	8005368 <__exponent+0x5e>
 8005352:	f10d 0309 	add.w	r3, sp, #9
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	42ac      	cmp	r4, r5
 800535a:	bf88      	it	hi
 800535c:	2300      	movhi	r3, #0
 800535e:	3302      	adds	r3, #2
 8005360:	4403      	add	r3, r0
 8005362:	1a18      	subs	r0, r3, r0
 8005364:	b003      	add	sp, #12
 8005366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005368:	f813 6b01 	ldrb.w	r6, [r3], #1
 800536c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005370:	e7ed      	b.n	800534e <__exponent+0x44>
 8005372:	2330      	movs	r3, #48	@ 0x30
 8005374:	3130      	adds	r1, #48	@ 0x30
 8005376:	7083      	strb	r3, [r0, #2]
 8005378:	70c1      	strb	r1, [r0, #3]
 800537a:	1d03      	adds	r3, r0, #4
 800537c:	e7f1      	b.n	8005362 <__exponent+0x58>
	...

08005380 <_printf_float>:
 8005380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005384:	b08d      	sub	sp, #52	@ 0x34
 8005386:	460c      	mov	r4, r1
 8005388:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800538c:	4616      	mov	r6, r2
 800538e:	461f      	mov	r7, r3
 8005390:	4605      	mov	r5, r0
 8005392:	f000 fcbb 	bl	8005d0c <_localeconv_r>
 8005396:	6803      	ldr	r3, [r0, #0]
 8005398:	9304      	str	r3, [sp, #16]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fa ff68 	bl	8000270 <strlen>
 80053a0:	2300      	movs	r3, #0
 80053a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80053a4:	f8d8 3000 	ldr.w	r3, [r8]
 80053a8:	9005      	str	r0, [sp, #20]
 80053aa:	3307      	adds	r3, #7
 80053ac:	f023 0307 	bic.w	r3, r3, #7
 80053b0:	f103 0208 	add.w	r2, r3, #8
 80053b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053b8:	f8d4 b000 	ldr.w	fp, [r4]
 80053bc:	f8c8 2000 	str.w	r2, [r8]
 80053c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80053c8:	9307      	str	r3, [sp, #28]
 80053ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80053ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80053d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053d6:	4b9c      	ldr	r3, [pc, #624]	@ (8005648 <_printf_float+0x2c8>)
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	f7fb fba6 	bl	8000b2c <__aeabi_dcmpun>
 80053e0:	bb70      	cbnz	r0, 8005440 <_printf_float+0xc0>
 80053e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053e6:	4b98      	ldr	r3, [pc, #608]	@ (8005648 <_printf_float+0x2c8>)
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ec:	f7fb fb80 	bl	8000af0 <__aeabi_dcmple>
 80053f0:	bb30      	cbnz	r0, 8005440 <_printf_float+0xc0>
 80053f2:	2200      	movs	r2, #0
 80053f4:	2300      	movs	r3, #0
 80053f6:	4640      	mov	r0, r8
 80053f8:	4649      	mov	r1, r9
 80053fa:	f7fb fb6f 	bl	8000adc <__aeabi_dcmplt>
 80053fe:	b110      	cbz	r0, 8005406 <_printf_float+0x86>
 8005400:	232d      	movs	r3, #45	@ 0x2d
 8005402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005406:	4a91      	ldr	r2, [pc, #580]	@ (800564c <_printf_float+0x2cc>)
 8005408:	4b91      	ldr	r3, [pc, #580]	@ (8005650 <_printf_float+0x2d0>)
 800540a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800540e:	bf94      	ite	ls
 8005410:	4690      	movls	r8, r2
 8005412:	4698      	movhi	r8, r3
 8005414:	2303      	movs	r3, #3
 8005416:	6123      	str	r3, [r4, #16]
 8005418:	f02b 0304 	bic.w	r3, fp, #4
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	f04f 0900 	mov.w	r9, #0
 8005422:	9700      	str	r7, [sp, #0]
 8005424:	4633      	mov	r3, r6
 8005426:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005428:	4621      	mov	r1, r4
 800542a:	4628      	mov	r0, r5
 800542c:	f000 f9d2 	bl	80057d4 <_printf_common>
 8005430:	3001      	adds	r0, #1
 8005432:	f040 808d 	bne.w	8005550 <_printf_float+0x1d0>
 8005436:	f04f 30ff 	mov.w	r0, #4294967295
 800543a:	b00d      	add	sp, #52	@ 0x34
 800543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005440:	4642      	mov	r2, r8
 8005442:	464b      	mov	r3, r9
 8005444:	4640      	mov	r0, r8
 8005446:	4649      	mov	r1, r9
 8005448:	f7fb fb70 	bl	8000b2c <__aeabi_dcmpun>
 800544c:	b140      	cbz	r0, 8005460 <_printf_float+0xe0>
 800544e:	464b      	mov	r3, r9
 8005450:	2b00      	cmp	r3, #0
 8005452:	bfbc      	itt	lt
 8005454:	232d      	movlt	r3, #45	@ 0x2d
 8005456:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800545a:	4a7e      	ldr	r2, [pc, #504]	@ (8005654 <_printf_float+0x2d4>)
 800545c:	4b7e      	ldr	r3, [pc, #504]	@ (8005658 <_printf_float+0x2d8>)
 800545e:	e7d4      	b.n	800540a <_printf_float+0x8a>
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005466:	9206      	str	r2, [sp, #24]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	d13b      	bne.n	80054e4 <_printf_float+0x164>
 800546c:	2306      	movs	r3, #6
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005474:	2300      	movs	r3, #0
 8005476:	6022      	str	r2, [r4, #0]
 8005478:	9303      	str	r3, [sp, #12]
 800547a:	ab0a      	add	r3, sp, #40	@ 0x28
 800547c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005480:	ab09      	add	r3, sp, #36	@ 0x24
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	6861      	ldr	r1, [r4, #4]
 8005486:	ec49 8b10 	vmov	d0, r8, r9
 800548a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800548e:	4628      	mov	r0, r5
 8005490:	f7ff fed6 	bl	8005240 <__cvt>
 8005494:	9b06      	ldr	r3, [sp, #24]
 8005496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005498:	2b47      	cmp	r3, #71	@ 0x47
 800549a:	4680      	mov	r8, r0
 800549c:	d129      	bne.n	80054f2 <_printf_float+0x172>
 800549e:	1cc8      	adds	r0, r1, #3
 80054a0:	db02      	blt.n	80054a8 <_printf_float+0x128>
 80054a2:	6863      	ldr	r3, [r4, #4]
 80054a4:	4299      	cmp	r1, r3
 80054a6:	dd41      	ble.n	800552c <_printf_float+0x1ac>
 80054a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80054ac:	fa5f fa8a 	uxtb.w	sl, sl
 80054b0:	3901      	subs	r1, #1
 80054b2:	4652      	mov	r2, sl
 80054b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80054b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80054ba:	f7ff ff26 	bl	800530a <__exponent>
 80054be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054c0:	1813      	adds	r3, r2, r0
 80054c2:	2a01      	cmp	r2, #1
 80054c4:	4681      	mov	r9, r0
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	dc02      	bgt.n	80054d0 <_printf_float+0x150>
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	07d2      	lsls	r2, r2, #31
 80054ce:	d501      	bpl.n	80054d4 <_printf_float+0x154>
 80054d0:	3301      	adds	r3, #1
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0a2      	beq.n	8005422 <_printf_float+0xa2>
 80054dc:	232d      	movs	r3, #45	@ 0x2d
 80054de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054e2:	e79e      	b.n	8005422 <_printf_float+0xa2>
 80054e4:	9a06      	ldr	r2, [sp, #24]
 80054e6:	2a47      	cmp	r2, #71	@ 0x47
 80054e8:	d1c2      	bne.n	8005470 <_printf_float+0xf0>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1c0      	bne.n	8005470 <_printf_float+0xf0>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e7bd      	b.n	800546e <_printf_float+0xee>
 80054f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054f6:	d9db      	bls.n	80054b0 <_printf_float+0x130>
 80054f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054fc:	d118      	bne.n	8005530 <_printf_float+0x1b0>
 80054fe:	2900      	cmp	r1, #0
 8005500:	6863      	ldr	r3, [r4, #4]
 8005502:	dd0b      	ble.n	800551c <_printf_float+0x19c>
 8005504:	6121      	str	r1, [r4, #16]
 8005506:	b913      	cbnz	r3, 800550e <_printf_float+0x18e>
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	07d0      	lsls	r0, r2, #31
 800550c:	d502      	bpl.n	8005514 <_printf_float+0x194>
 800550e:	3301      	adds	r3, #1
 8005510:	440b      	add	r3, r1
 8005512:	6123      	str	r3, [r4, #16]
 8005514:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005516:	f04f 0900 	mov.w	r9, #0
 800551a:	e7db      	b.n	80054d4 <_printf_float+0x154>
 800551c:	b913      	cbnz	r3, 8005524 <_printf_float+0x1a4>
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	07d2      	lsls	r2, r2, #31
 8005522:	d501      	bpl.n	8005528 <_printf_float+0x1a8>
 8005524:	3302      	adds	r3, #2
 8005526:	e7f4      	b.n	8005512 <_printf_float+0x192>
 8005528:	2301      	movs	r3, #1
 800552a:	e7f2      	b.n	8005512 <_printf_float+0x192>
 800552c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005532:	4299      	cmp	r1, r3
 8005534:	db05      	blt.n	8005542 <_printf_float+0x1c2>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	6121      	str	r1, [r4, #16]
 800553a:	07d8      	lsls	r0, r3, #31
 800553c:	d5ea      	bpl.n	8005514 <_printf_float+0x194>
 800553e:	1c4b      	adds	r3, r1, #1
 8005540:	e7e7      	b.n	8005512 <_printf_float+0x192>
 8005542:	2900      	cmp	r1, #0
 8005544:	bfd4      	ite	le
 8005546:	f1c1 0202 	rsble	r2, r1, #2
 800554a:	2201      	movgt	r2, #1
 800554c:	4413      	add	r3, r2
 800554e:	e7e0      	b.n	8005512 <_printf_float+0x192>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	055a      	lsls	r2, r3, #21
 8005554:	d407      	bmi.n	8005566 <_printf_float+0x1e6>
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	4642      	mov	r2, r8
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	d12b      	bne.n	80055bc <_printf_float+0x23c>
 8005564:	e767      	b.n	8005436 <_printf_float+0xb6>
 8005566:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800556a:	f240 80dd 	bls.w	8005728 <_printf_float+0x3a8>
 800556e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005572:	2200      	movs	r2, #0
 8005574:	2300      	movs	r3, #0
 8005576:	f7fb faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800557a:	2800      	cmp	r0, #0
 800557c:	d033      	beq.n	80055e6 <_printf_float+0x266>
 800557e:	4a37      	ldr	r2, [pc, #220]	@ (800565c <_printf_float+0x2dc>)
 8005580:	2301      	movs	r3, #1
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	f43f af54 	beq.w	8005436 <_printf_float+0xb6>
 800558e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005592:	4543      	cmp	r3, r8
 8005594:	db02      	blt.n	800559c <_printf_float+0x21c>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	07d8      	lsls	r0, r3, #31
 800559a:	d50f      	bpl.n	80055bc <_printf_float+0x23c>
 800559c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f af45 	beq.w	8005436 <_printf_float+0xb6>
 80055ac:	f04f 0900 	mov.w	r9, #0
 80055b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80055b4:	f104 0a1a 	add.w	sl, r4, #26
 80055b8:	45c8      	cmp	r8, r9
 80055ba:	dc09      	bgt.n	80055d0 <_printf_float+0x250>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	079b      	lsls	r3, r3, #30
 80055c0:	f100 8103 	bmi.w	80057ca <_printf_float+0x44a>
 80055c4:	68e0      	ldr	r0, [r4, #12]
 80055c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055c8:	4298      	cmp	r0, r3
 80055ca:	bfb8      	it	lt
 80055cc:	4618      	movlt	r0, r3
 80055ce:	e734      	b.n	800543a <_printf_float+0xba>
 80055d0:	2301      	movs	r3, #1
 80055d2:	4652      	mov	r2, sl
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	f43f af2b 	beq.w	8005436 <_printf_float+0xb6>
 80055e0:	f109 0901 	add.w	r9, r9, #1
 80055e4:	e7e8      	b.n	80055b8 <_printf_float+0x238>
 80055e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	dc39      	bgt.n	8005660 <_printf_float+0x2e0>
 80055ec:	4a1b      	ldr	r2, [pc, #108]	@ (800565c <_printf_float+0x2dc>)
 80055ee:	2301      	movs	r3, #1
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f af1d 	beq.w	8005436 <_printf_float+0xb6>
 80055fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005600:	ea59 0303 	orrs.w	r3, r9, r3
 8005604:	d102      	bne.n	800560c <_printf_float+0x28c>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	07d9      	lsls	r1, r3, #31
 800560a:	d5d7      	bpl.n	80055bc <_printf_float+0x23c>
 800560c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f af0d 	beq.w	8005436 <_printf_float+0xb6>
 800561c:	f04f 0a00 	mov.w	sl, #0
 8005620:	f104 0b1a 	add.w	fp, r4, #26
 8005624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005626:	425b      	negs	r3, r3
 8005628:	4553      	cmp	r3, sl
 800562a:	dc01      	bgt.n	8005630 <_printf_float+0x2b0>
 800562c:	464b      	mov	r3, r9
 800562e:	e793      	b.n	8005558 <_printf_float+0x1d8>
 8005630:	2301      	movs	r3, #1
 8005632:	465a      	mov	r2, fp
 8005634:	4631      	mov	r1, r6
 8005636:	4628      	mov	r0, r5
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f43f aefb 	beq.w	8005436 <_printf_float+0xb6>
 8005640:	f10a 0a01 	add.w	sl, sl, #1
 8005644:	e7ee      	b.n	8005624 <_printf_float+0x2a4>
 8005646:	bf00      	nop
 8005648:	7fefffff 	.word	0x7fefffff
 800564c:	08007b70 	.word	0x08007b70
 8005650:	08007b74 	.word	0x08007b74
 8005654:	08007b78 	.word	0x08007b78
 8005658:	08007b7c 	.word	0x08007b7c
 800565c:	08007b80 	.word	0x08007b80
 8005660:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005662:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005666:	4553      	cmp	r3, sl
 8005668:	bfa8      	it	ge
 800566a:	4653      	movge	r3, sl
 800566c:	2b00      	cmp	r3, #0
 800566e:	4699      	mov	r9, r3
 8005670:	dc36      	bgt.n	80056e0 <_printf_float+0x360>
 8005672:	f04f 0b00 	mov.w	fp, #0
 8005676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800567a:	f104 021a 	add.w	r2, r4, #26
 800567e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005680:	9306      	str	r3, [sp, #24]
 8005682:	eba3 0309 	sub.w	r3, r3, r9
 8005686:	455b      	cmp	r3, fp
 8005688:	dc31      	bgt.n	80056ee <_printf_float+0x36e>
 800568a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800568c:	459a      	cmp	sl, r3
 800568e:	dc3a      	bgt.n	8005706 <_printf_float+0x386>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	07da      	lsls	r2, r3, #31
 8005694:	d437      	bmi.n	8005706 <_printf_float+0x386>
 8005696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005698:	ebaa 0903 	sub.w	r9, sl, r3
 800569c:	9b06      	ldr	r3, [sp, #24]
 800569e:	ebaa 0303 	sub.w	r3, sl, r3
 80056a2:	4599      	cmp	r9, r3
 80056a4:	bfa8      	it	ge
 80056a6:	4699      	movge	r9, r3
 80056a8:	f1b9 0f00 	cmp.w	r9, #0
 80056ac:	dc33      	bgt.n	8005716 <_printf_float+0x396>
 80056ae:	f04f 0800 	mov.w	r8, #0
 80056b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056b6:	f104 0b1a 	add.w	fp, r4, #26
 80056ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056bc:	ebaa 0303 	sub.w	r3, sl, r3
 80056c0:	eba3 0309 	sub.w	r3, r3, r9
 80056c4:	4543      	cmp	r3, r8
 80056c6:	f77f af79 	ble.w	80055bc <_printf_float+0x23c>
 80056ca:	2301      	movs	r3, #1
 80056cc:	465a      	mov	r2, fp
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	f43f aeae 	beq.w	8005436 <_printf_float+0xb6>
 80056da:	f108 0801 	add.w	r8, r8, #1
 80056de:	e7ec      	b.n	80056ba <_printf_float+0x33a>
 80056e0:	4642      	mov	r2, r8
 80056e2:	4631      	mov	r1, r6
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	d1c2      	bne.n	8005672 <_printf_float+0x2f2>
 80056ec:	e6a3      	b.n	8005436 <_printf_float+0xb6>
 80056ee:	2301      	movs	r3, #1
 80056f0:	4631      	mov	r1, r6
 80056f2:	4628      	mov	r0, r5
 80056f4:	9206      	str	r2, [sp, #24]
 80056f6:	47b8      	blx	r7
 80056f8:	3001      	adds	r0, #1
 80056fa:	f43f ae9c 	beq.w	8005436 <_printf_float+0xb6>
 80056fe:	9a06      	ldr	r2, [sp, #24]
 8005700:	f10b 0b01 	add.w	fp, fp, #1
 8005704:	e7bb      	b.n	800567e <_printf_float+0x2fe>
 8005706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800570a:	4631      	mov	r1, r6
 800570c:	4628      	mov	r0, r5
 800570e:	47b8      	blx	r7
 8005710:	3001      	adds	r0, #1
 8005712:	d1c0      	bne.n	8005696 <_printf_float+0x316>
 8005714:	e68f      	b.n	8005436 <_printf_float+0xb6>
 8005716:	9a06      	ldr	r2, [sp, #24]
 8005718:	464b      	mov	r3, r9
 800571a:	4442      	add	r2, r8
 800571c:	4631      	mov	r1, r6
 800571e:	4628      	mov	r0, r5
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	d1c3      	bne.n	80056ae <_printf_float+0x32e>
 8005726:	e686      	b.n	8005436 <_printf_float+0xb6>
 8005728:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800572c:	f1ba 0f01 	cmp.w	sl, #1
 8005730:	dc01      	bgt.n	8005736 <_printf_float+0x3b6>
 8005732:	07db      	lsls	r3, r3, #31
 8005734:	d536      	bpl.n	80057a4 <_printf_float+0x424>
 8005736:	2301      	movs	r3, #1
 8005738:	4642      	mov	r2, r8
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f ae78 	beq.w	8005436 <_printf_float+0xb6>
 8005746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	f43f ae70 	beq.w	8005436 <_printf_float+0xb6>
 8005756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800575a:	2200      	movs	r2, #0
 800575c:	2300      	movs	r3, #0
 800575e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005762:	f7fb f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005766:	b9c0      	cbnz	r0, 800579a <_printf_float+0x41a>
 8005768:	4653      	mov	r3, sl
 800576a:	f108 0201 	add.w	r2, r8, #1
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	d10c      	bne.n	8005792 <_printf_float+0x412>
 8005778:	e65d      	b.n	8005436 <_printf_float+0xb6>
 800577a:	2301      	movs	r3, #1
 800577c:	465a      	mov	r2, fp
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	f43f ae56 	beq.w	8005436 <_printf_float+0xb6>
 800578a:	f108 0801 	add.w	r8, r8, #1
 800578e:	45d0      	cmp	r8, sl
 8005790:	dbf3      	blt.n	800577a <_printf_float+0x3fa>
 8005792:	464b      	mov	r3, r9
 8005794:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005798:	e6df      	b.n	800555a <_printf_float+0x1da>
 800579a:	f04f 0800 	mov.w	r8, #0
 800579e:	f104 0b1a 	add.w	fp, r4, #26
 80057a2:	e7f4      	b.n	800578e <_printf_float+0x40e>
 80057a4:	2301      	movs	r3, #1
 80057a6:	4642      	mov	r2, r8
 80057a8:	e7e1      	b.n	800576e <_printf_float+0x3ee>
 80057aa:	2301      	movs	r3, #1
 80057ac:	464a      	mov	r2, r9
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	f43f ae3e 	beq.w	8005436 <_printf_float+0xb6>
 80057ba:	f108 0801 	add.w	r8, r8, #1
 80057be:	68e3      	ldr	r3, [r4, #12]
 80057c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057c2:	1a5b      	subs	r3, r3, r1
 80057c4:	4543      	cmp	r3, r8
 80057c6:	dcf0      	bgt.n	80057aa <_printf_float+0x42a>
 80057c8:	e6fc      	b.n	80055c4 <_printf_float+0x244>
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	f104 0919 	add.w	r9, r4, #25
 80057d2:	e7f4      	b.n	80057be <_printf_float+0x43e>

080057d4 <_printf_common>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	4616      	mov	r6, r2
 80057da:	4698      	mov	r8, r3
 80057dc:	688a      	ldr	r2, [r1, #8]
 80057de:	690b      	ldr	r3, [r1, #16]
 80057e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057e4:	4293      	cmp	r3, r2
 80057e6:	bfb8      	it	lt
 80057e8:	4613      	movlt	r3, r2
 80057ea:	6033      	str	r3, [r6, #0]
 80057ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057f0:	4607      	mov	r7, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	b10a      	cbz	r2, 80057fa <_printf_common+0x26>
 80057f6:	3301      	adds	r3, #1
 80057f8:	6033      	str	r3, [r6, #0]
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	0699      	lsls	r1, r3, #26
 80057fe:	bf42      	ittt	mi
 8005800:	6833      	ldrmi	r3, [r6, #0]
 8005802:	3302      	addmi	r3, #2
 8005804:	6033      	strmi	r3, [r6, #0]
 8005806:	6825      	ldr	r5, [r4, #0]
 8005808:	f015 0506 	ands.w	r5, r5, #6
 800580c:	d106      	bne.n	800581c <_printf_common+0x48>
 800580e:	f104 0a19 	add.w	sl, r4, #25
 8005812:	68e3      	ldr	r3, [r4, #12]
 8005814:	6832      	ldr	r2, [r6, #0]
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	42ab      	cmp	r3, r5
 800581a:	dc26      	bgt.n	800586a <_printf_common+0x96>
 800581c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	3b00      	subs	r3, #0
 8005824:	bf18      	it	ne
 8005826:	2301      	movne	r3, #1
 8005828:	0692      	lsls	r2, r2, #26
 800582a:	d42b      	bmi.n	8005884 <_printf_common+0xb0>
 800582c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005830:	4641      	mov	r1, r8
 8005832:	4638      	mov	r0, r7
 8005834:	47c8      	blx	r9
 8005836:	3001      	adds	r0, #1
 8005838:	d01e      	beq.n	8005878 <_printf_common+0xa4>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	6922      	ldr	r2, [r4, #16]
 800583e:	f003 0306 	and.w	r3, r3, #6
 8005842:	2b04      	cmp	r3, #4
 8005844:	bf02      	ittt	eq
 8005846:	68e5      	ldreq	r5, [r4, #12]
 8005848:	6833      	ldreq	r3, [r6, #0]
 800584a:	1aed      	subeq	r5, r5, r3
 800584c:	68a3      	ldr	r3, [r4, #8]
 800584e:	bf0c      	ite	eq
 8005850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005854:	2500      	movne	r5, #0
 8005856:	4293      	cmp	r3, r2
 8005858:	bfc4      	itt	gt
 800585a:	1a9b      	subgt	r3, r3, r2
 800585c:	18ed      	addgt	r5, r5, r3
 800585e:	2600      	movs	r6, #0
 8005860:	341a      	adds	r4, #26
 8005862:	42b5      	cmp	r5, r6
 8005864:	d11a      	bne.n	800589c <_printf_common+0xc8>
 8005866:	2000      	movs	r0, #0
 8005868:	e008      	b.n	800587c <_printf_common+0xa8>
 800586a:	2301      	movs	r3, #1
 800586c:	4652      	mov	r2, sl
 800586e:	4641      	mov	r1, r8
 8005870:	4638      	mov	r0, r7
 8005872:	47c8      	blx	r9
 8005874:	3001      	adds	r0, #1
 8005876:	d103      	bne.n	8005880 <_printf_common+0xac>
 8005878:	f04f 30ff 	mov.w	r0, #4294967295
 800587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005880:	3501      	adds	r5, #1
 8005882:	e7c6      	b.n	8005812 <_printf_common+0x3e>
 8005884:	18e1      	adds	r1, r4, r3
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	2030      	movs	r0, #48	@ 0x30
 800588a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800588e:	4422      	add	r2, r4
 8005890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005898:	3302      	adds	r3, #2
 800589a:	e7c7      	b.n	800582c <_printf_common+0x58>
 800589c:	2301      	movs	r3, #1
 800589e:	4622      	mov	r2, r4
 80058a0:	4641      	mov	r1, r8
 80058a2:	4638      	mov	r0, r7
 80058a4:	47c8      	blx	r9
 80058a6:	3001      	adds	r0, #1
 80058a8:	d0e6      	beq.n	8005878 <_printf_common+0xa4>
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7d9      	b.n	8005862 <_printf_common+0x8e>
	...

080058b0 <_printf_i>:
 80058b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	7e0f      	ldrb	r7, [r1, #24]
 80058b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058b8:	2f78      	cmp	r7, #120	@ 0x78
 80058ba:	4691      	mov	r9, r2
 80058bc:	4680      	mov	r8, r0
 80058be:	460c      	mov	r4, r1
 80058c0:	469a      	mov	sl, r3
 80058c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058c6:	d807      	bhi.n	80058d8 <_printf_i+0x28>
 80058c8:	2f62      	cmp	r7, #98	@ 0x62
 80058ca:	d80a      	bhi.n	80058e2 <_printf_i+0x32>
 80058cc:	2f00      	cmp	r7, #0
 80058ce:	f000 80d2 	beq.w	8005a76 <_printf_i+0x1c6>
 80058d2:	2f58      	cmp	r7, #88	@ 0x58
 80058d4:	f000 80b9 	beq.w	8005a4a <_printf_i+0x19a>
 80058d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058e0:	e03a      	b.n	8005958 <_printf_i+0xa8>
 80058e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058e6:	2b15      	cmp	r3, #21
 80058e8:	d8f6      	bhi.n	80058d8 <_printf_i+0x28>
 80058ea:	a101      	add	r1, pc, #4	@ (adr r1, 80058f0 <_printf_i+0x40>)
 80058ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058f0:	08005949 	.word	0x08005949
 80058f4:	0800595d 	.word	0x0800595d
 80058f8:	080058d9 	.word	0x080058d9
 80058fc:	080058d9 	.word	0x080058d9
 8005900:	080058d9 	.word	0x080058d9
 8005904:	080058d9 	.word	0x080058d9
 8005908:	0800595d 	.word	0x0800595d
 800590c:	080058d9 	.word	0x080058d9
 8005910:	080058d9 	.word	0x080058d9
 8005914:	080058d9 	.word	0x080058d9
 8005918:	080058d9 	.word	0x080058d9
 800591c:	08005a5d 	.word	0x08005a5d
 8005920:	08005987 	.word	0x08005987
 8005924:	08005a17 	.word	0x08005a17
 8005928:	080058d9 	.word	0x080058d9
 800592c:	080058d9 	.word	0x080058d9
 8005930:	08005a7f 	.word	0x08005a7f
 8005934:	080058d9 	.word	0x080058d9
 8005938:	08005987 	.word	0x08005987
 800593c:	080058d9 	.word	0x080058d9
 8005940:	080058d9 	.word	0x080058d9
 8005944:	08005a1f 	.word	0x08005a1f
 8005948:	6833      	ldr	r3, [r6, #0]
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6032      	str	r2, [r6, #0]
 8005950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005958:	2301      	movs	r3, #1
 800595a:	e09d      	b.n	8005a98 <_printf_i+0x1e8>
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	6820      	ldr	r0, [r4, #0]
 8005960:	1d19      	adds	r1, r3, #4
 8005962:	6031      	str	r1, [r6, #0]
 8005964:	0606      	lsls	r6, r0, #24
 8005966:	d501      	bpl.n	800596c <_printf_i+0xbc>
 8005968:	681d      	ldr	r5, [r3, #0]
 800596a:	e003      	b.n	8005974 <_printf_i+0xc4>
 800596c:	0645      	lsls	r5, r0, #25
 800596e:	d5fb      	bpl.n	8005968 <_printf_i+0xb8>
 8005970:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005974:	2d00      	cmp	r5, #0
 8005976:	da03      	bge.n	8005980 <_printf_i+0xd0>
 8005978:	232d      	movs	r3, #45	@ 0x2d
 800597a:	426d      	negs	r5, r5
 800597c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005980:	4859      	ldr	r0, [pc, #356]	@ (8005ae8 <_printf_i+0x238>)
 8005982:	230a      	movs	r3, #10
 8005984:	e011      	b.n	80059aa <_printf_i+0xfa>
 8005986:	6821      	ldr	r1, [r4, #0]
 8005988:	6833      	ldr	r3, [r6, #0]
 800598a:	0608      	lsls	r0, r1, #24
 800598c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005990:	d402      	bmi.n	8005998 <_printf_i+0xe8>
 8005992:	0649      	lsls	r1, r1, #25
 8005994:	bf48      	it	mi
 8005996:	b2ad      	uxthmi	r5, r5
 8005998:	2f6f      	cmp	r7, #111	@ 0x6f
 800599a:	4853      	ldr	r0, [pc, #332]	@ (8005ae8 <_printf_i+0x238>)
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	bf14      	ite	ne
 80059a0:	230a      	movne	r3, #10
 80059a2:	2308      	moveq	r3, #8
 80059a4:	2100      	movs	r1, #0
 80059a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059aa:	6866      	ldr	r6, [r4, #4]
 80059ac:	60a6      	str	r6, [r4, #8]
 80059ae:	2e00      	cmp	r6, #0
 80059b0:	bfa2      	ittt	ge
 80059b2:	6821      	ldrge	r1, [r4, #0]
 80059b4:	f021 0104 	bicge.w	r1, r1, #4
 80059b8:	6021      	strge	r1, [r4, #0]
 80059ba:	b90d      	cbnz	r5, 80059c0 <_printf_i+0x110>
 80059bc:	2e00      	cmp	r6, #0
 80059be:	d04b      	beq.n	8005a58 <_printf_i+0x1a8>
 80059c0:	4616      	mov	r6, r2
 80059c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80059c6:	fb03 5711 	mls	r7, r3, r1, r5
 80059ca:	5dc7      	ldrb	r7, [r0, r7]
 80059cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059d0:	462f      	mov	r7, r5
 80059d2:	42bb      	cmp	r3, r7
 80059d4:	460d      	mov	r5, r1
 80059d6:	d9f4      	bls.n	80059c2 <_printf_i+0x112>
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d10b      	bne.n	80059f4 <_printf_i+0x144>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	07df      	lsls	r7, r3, #31
 80059e0:	d508      	bpl.n	80059f4 <_printf_i+0x144>
 80059e2:	6923      	ldr	r3, [r4, #16]
 80059e4:	6861      	ldr	r1, [r4, #4]
 80059e6:	4299      	cmp	r1, r3
 80059e8:	bfde      	ittt	le
 80059ea:	2330      	movle	r3, #48	@ 0x30
 80059ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059f4:	1b92      	subs	r2, r2, r6
 80059f6:	6122      	str	r2, [r4, #16]
 80059f8:	f8cd a000 	str.w	sl, [sp]
 80059fc:	464b      	mov	r3, r9
 80059fe:	aa03      	add	r2, sp, #12
 8005a00:	4621      	mov	r1, r4
 8005a02:	4640      	mov	r0, r8
 8005a04:	f7ff fee6 	bl	80057d4 <_printf_common>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d14a      	bne.n	8005aa2 <_printf_i+0x1f2>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	b004      	add	sp, #16
 8005a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f043 0320 	orr.w	r3, r3, #32
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	4833      	ldr	r0, [pc, #204]	@ (8005aec <_printf_i+0x23c>)
 8005a20:	2778      	movs	r7, #120	@ 0x78
 8005a22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	6831      	ldr	r1, [r6, #0]
 8005a2a:	061f      	lsls	r7, r3, #24
 8005a2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a30:	d402      	bmi.n	8005a38 <_printf_i+0x188>
 8005a32:	065f      	lsls	r7, r3, #25
 8005a34:	bf48      	it	mi
 8005a36:	b2ad      	uxthmi	r5, r5
 8005a38:	6031      	str	r1, [r6, #0]
 8005a3a:	07d9      	lsls	r1, r3, #31
 8005a3c:	bf44      	itt	mi
 8005a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a42:	6023      	strmi	r3, [r4, #0]
 8005a44:	b11d      	cbz	r5, 8005a4e <_printf_i+0x19e>
 8005a46:	2310      	movs	r3, #16
 8005a48:	e7ac      	b.n	80059a4 <_printf_i+0xf4>
 8005a4a:	4827      	ldr	r0, [pc, #156]	@ (8005ae8 <_printf_i+0x238>)
 8005a4c:	e7e9      	b.n	8005a22 <_printf_i+0x172>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f023 0320 	bic.w	r3, r3, #32
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	e7f6      	b.n	8005a46 <_printf_i+0x196>
 8005a58:	4616      	mov	r6, r2
 8005a5a:	e7bd      	b.n	80059d8 <_printf_i+0x128>
 8005a5c:	6833      	ldr	r3, [r6, #0]
 8005a5e:	6825      	ldr	r5, [r4, #0]
 8005a60:	6961      	ldr	r1, [r4, #20]
 8005a62:	1d18      	adds	r0, r3, #4
 8005a64:	6030      	str	r0, [r6, #0]
 8005a66:	062e      	lsls	r6, r5, #24
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0x1c0>
 8005a6c:	6019      	str	r1, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0x1c6>
 8005a70:	0668      	lsls	r0, r5, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0x1bc>
 8005a74:	8019      	strh	r1, [r3, #0]
 8005a76:	2300      	movs	r3, #0
 8005a78:	6123      	str	r3, [r4, #16]
 8005a7a:	4616      	mov	r6, r2
 8005a7c:	e7bc      	b.n	80059f8 <_printf_i+0x148>
 8005a7e:	6833      	ldr	r3, [r6, #0]
 8005a80:	1d1a      	adds	r2, r3, #4
 8005a82:	6032      	str	r2, [r6, #0]
 8005a84:	681e      	ldr	r6, [r3, #0]
 8005a86:	6862      	ldr	r2, [r4, #4]
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7fa fba0 	bl	80001d0 <memchr>
 8005a90:	b108      	cbz	r0, 8005a96 <_printf_i+0x1e6>
 8005a92:	1b80      	subs	r0, r0, r6
 8005a94:	6060      	str	r0, [r4, #4]
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aa0:	e7aa      	b.n	80059f8 <_printf_i+0x148>
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	47d0      	blx	sl
 8005aac:	3001      	adds	r0, #1
 8005aae:	d0ad      	beq.n	8005a0c <_printf_i+0x15c>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	079b      	lsls	r3, r3, #30
 8005ab4:	d413      	bmi.n	8005ade <_printf_i+0x22e>
 8005ab6:	68e0      	ldr	r0, [r4, #12]
 8005ab8:	9b03      	ldr	r3, [sp, #12]
 8005aba:	4298      	cmp	r0, r3
 8005abc:	bfb8      	it	lt
 8005abe:	4618      	movlt	r0, r3
 8005ac0:	e7a6      	b.n	8005a10 <_printf_i+0x160>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	47d0      	blx	sl
 8005acc:	3001      	adds	r0, #1
 8005ace:	d09d      	beq.n	8005a0c <_printf_i+0x15c>
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	9903      	ldr	r1, [sp, #12]
 8005ad6:	1a5b      	subs	r3, r3, r1
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dcf2      	bgt.n	8005ac2 <_printf_i+0x212>
 8005adc:	e7eb      	b.n	8005ab6 <_printf_i+0x206>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	f104 0619 	add.w	r6, r4, #25
 8005ae4:	e7f5      	b.n	8005ad2 <_printf_i+0x222>
 8005ae6:	bf00      	nop
 8005ae8:	08007b82 	.word	0x08007b82
 8005aec:	08007b93 	.word	0x08007b93

08005af0 <std>:
 8005af0:	2300      	movs	r3, #0
 8005af2:	b510      	push	{r4, lr}
 8005af4:	4604      	mov	r4, r0
 8005af6:	e9c0 3300 	strd	r3, r3, [r0]
 8005afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005afe:	6083      	str	r3, [r0, #8]
 8005b00:	8181      	strh	r1, [r0, #12]
 8005b02:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b04:	81c2      	strh	r2, [r0, #14]
 8005b06:	6183      	str	r3, [r0, #24]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	2208      	movs	r2, #8
 8005b0c:	305c      	adds	r0, #92	@ 0x5c
 8005b0e:	f000 f8f4 	bl	8005cfa <memset>
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <std+0x58>)
 8005b14:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <std+0x5c>)
 8005b18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b50 <std+0x60>)
 8005b1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <std+0x64>)
 8005b20:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b22:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <std+0x68>)
 8005b24:	6224      	str	r4, [r4, #32]
 8005b26:	429c      	cmp	r4, r3
 8005b28:	d006      	beq.n	8005b38 <std+0x48>
 8005b2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b2e:	4294      	cmp	r4, r2
 8005b30:	d002      	beq.n	8005b38 <std+0x48>
 8005b32:	33d0      	adds	r3, #208	@ 0xd0
 8005b34:	429c      	cmp	r4, r3
 8005b36:	d105      	bne.n	8005b44 <std+0x54>
 8005b38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b40:	f000 b958 	b.w	8005df4 <__retarget_lock_init_recursive>
 8005b44:	bd10      	pop	{r4, pc}
 8005b46:	bf00      	nop
 8005b48:	08005c75 	.word	0x08005c75
 8005b4c:	08005c97 	.word	0x08005c97
 8005b50:	08005ccf 	.word	0x08005ccf
 8005b54:	08005cf3 	.word	0x08005cf3
 8005b58:	20000468 	.word	0x20000468

08005b5c <stdio_exit_handler>:
 8005b5c:	4a02      	ldr	r2, [pc, #8]	@ (8005b68 <stdio_exit_handler+0xc>)
 8005b5e:	4903      	ldr	r1, [pc, #12]	@ (8005b6c <stdio_exit_handler+0x10>)
 8005b60:	4803      	ldr	r0, [pc, #12]	@ (8005b70 <stdio_exit_handler+0x14>)
 8005b62:	f000 b869 	b.w	8005c38 <_fwalk_sglue>
 8005b66:	bf00      	nop
 8005b68:	2000000c 	.word	0x2000000c
 8005b6c:	080074a5 	.word	0x080074a5
 8005b70:	2000001c 	.word	0x2000001c

08005b74 <cleanup_stdio>:
 8005b74:	6841      	ldr	r1, [r0, #4]
 8005b76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba8 <cleanup_stdio+0x34>)
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	d001      	beq.n	8005b84 <cleanup_stdio+0x10>
 8005b80:	f001 fc90 	bl	80074a4 <_fflush_r>
 8005b84:	68a1      	ldr	r1, [r4, #8]
 8005b86:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <cleanup_stdio+0x38>)
 8005b88:	4299      	cmp	r1, r3
 8005b8a:	d002      	beq.n	8005b92 <cleanup_stdio+0x1e>
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f001 fc89 	bl	80074a4 <_fflush_r>
 8005b92:	68e1      	ldr	r1, [r4, #12]
 8005b94:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <cleanup_stdio+0x3c>)
 8005b96:	4299      	cmp	r1, r3
 8005b98:	d004      	beq.n	8005ba4 <cleanup_stdio+0x30>
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba0:	f001 bc80 	b.w	80074a4 <_fflush_r>
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000468 	.word	0x20000468
 8005bac:	200004d0 	.word	0x200004d0
 8005bb0:	20000538 	.word	0x20000538

08005bb4 <global_stdio_init.part.0>:
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <global_stdio_init.part.0+0x30>)
 8005bb8:	4c0b      	ldr	r4, [pc, #44]	@ (8005be8 <global_stdio_init.part.0+0x34>)
 8005bba:	4a0c      	ldr	r2, [pc, #48]	@ (8005bec <global_stdio_init.part.0+0x38>)
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2104      	movs	r1, #4
 8005bc4:	f7ff ff94 	bl	8005af0 <std>
 8005bc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bcc:	2201      	movs	r2, #1
 8005bce:	2109      	movs	r1, #9
 8005bd0:	f7ff ff8e 	bl	8005af0 <std>
 8005bd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bd8:	2202      	movs	r2, #2
 8005bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bde:	2112      	movs	r1, #18
 8005be0:	f7ff bf86 	b.w	8005af0 <std>
 8005be4:	200005a0 	.word	0x200005a0
 8005be8:	20000468 	.word	0x20000468
 8005bec:	08005b5d 	.word	0x08005b5d

08005bf0 <__sfp_lock_acquire>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	@ (8005bf8 <__sfp_lock_acquire+0x8>)
 8005bf2:	f000 b900 	b.w	8005df6 <__retarget_lock_acquire_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	200005a9 	.word	0x200005a9

08005bfc <__sfp_lock_release>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	@ (8005c04 <__sfp_lock_release+0x8>)
 8005bfe:	f000 b8fb 	b.w	8005df8 <__retarget_lock_release_recursive>
 8005c02:	bf00      	nop
 8005c04:	200005a9 	.word	0x200005a9

08005c08 <__sinit>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	f7ff fff0 	bl	8005bf0 <__sfp_lock_acquire>
 8005c10:	6a23      	ldr	r3, [r4, #32]
 8005c12:	b11b      	cbz	r3, 8005c1c <__sinit+0x14>
 8005c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c18:	f7ff bff0 	b.w	8005bfc <__sfp_lock_release>
 8005c1c:	4b04      	ldr	r3, [pc, #16]	@ (8005c30 <__sinit+0x28>)
 8005c1e:	6223      	str	r3, [r4, #32]
 8005c20:	4b04      	ldr	r3, [pc, #16]	@ (8005c34 <__sinit+0x2c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f5      	bne.n	8005c14 <__sinit+0xc>
 8005c28:	f7ff ffc4 	bl	8005bb4 <global_stdio_init.part.0>
 8005c2c:	e7f2      	b.n	8005c14 <__sinit+0xc>
 8005c2e:	bf00      	nop
 8005c30:	08005b75 	.word	0x08005b75
 8005c34:	200005a0 	.word	0x200005a0

08005c38 <_fwalk_sglue>:
 8005c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c3c:	4607      	mov	r7, r0
 8005c3e:	4688      	mov	r8, r1
 8005c40:	4614      	mov	r4, r2
 8005c42:	2600      	movs	r6, #0
 8005c44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c48:	f1b9 0901 	subs.w	r9, r9, #1
 8005c4c:	d505      	bpl.n	8005c5a <_fwalk_sglue+0x22>
 8005c4e:	6824      	ldr	r4, [r4, #0]
 8005c50:	2c00      	cmp	r4, #0
 8005c52:	d1f7      	bne.n	8005c44 <_fwalk_sglue+0xc>
 8005c54:	4630      	mov	r0, r6
 8005c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c5a:	89ab      	ldrh	r3, [r5, #12]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d907      	bls.n	8005c70 <_fwalk_sglue+0x38>
 8005c60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c64:	3301      	adds	r3, #1
 8005c66:	d003      	beq.n	8005c70 <_fwalk_sglue+0x38>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	47c0      	blx	r8
 8005c6e:	4306      	orrs	r6, r0
 8005c70:	3568      	adds	r5, #104	@ 0x68
 8005c72:	e7e9      	b.n	8005c48 <_fwalk_sglue+0x10>

08005c74 <__sread>:
 8005c74:	b510      	push	{r4, lr}
 8005c76:	460c      	mov	r4, r1
 8005c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7c:	f000 f86c 	bl	8005d58 <_read_r>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	bfab      	itete	ge
 8005c84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c86:	89a3      	ldrhlt	r3, [r4, #12]
 8005c88:	181b      	addge	r3, r3, r0
 8005c8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c8e:	bfac      	ite	ge
 8005c90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c92:	81a3      	strhlt	r3, [r4, #12]
 8005c94:	bd10      	pop	{r4, pc}

08005c96 <__swrite>:
 8005c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9a:	461f      	mov	r7, r3
 8005c9c:	898b      	ldrh	r3, [r1, #12]
 8005c9e:	05db      	lsls	r3, r3, #23
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	4616      	mov	r6, r2
 8005ca6:	d505      	bpl.n	8005cb4 <__swrite+0x1e>
 8005ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cac:	2302      	movs	r3, #2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f000 f840 	bl	8005d34 <_lseek_r>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cbe:	81a3      	strh	r3, [r4, #12]
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cca:	f000 b857 	b.w	8005d7c <_write_r>

08005cce <__sseek>:
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd6:	f000 f82d 	bl	8005d34 <_lseek_r>
 8005cda:	1c43      	adds	r3, r0, #1
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	bf15      	itete	ne
 8005ce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cea:	81a3      	strheq	r3, [r4, #12]
 8005cec:	bf18      	it	ne
 8005cee:	81a3      	strhne	r3, [r4, #12]
 8005cf0:	bd10      	pop	{r4, pc}

08005cf2 <__sclose>:
 8005cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf6:	f000 b80d 	b.w	8005d14 <_close_r>

08005cfa <memset>:
 8005cfa:	4402      	add	r2, r0
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d100      	bne.n	8005d04 <memset+0xa>
 8005d02:	4770      	bx	lr
 8005d04:	f803 1b01 	strb.w	r1, [r3], #1
 8005d08:	e7f9      	b.n	8005cfe <memset+0x4>
	...

08005d0c <_localeconv_r>:
 8005d0c:	4800      	ldr	r0, [pc, #0]	@ (8005d10 <_localeconv_r+0x4>)
 8005d0e:	4770      	bx	lr
 8005d10:	20000158 	.word	0x20000158

08005d14 <_close_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4d06      	ldr	r5, [pc, #24]	@ (8005d30 <_close_r+0x1c>)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	602b      	str	r3, [r5, #0]
 8005d20:	f7fc f8cc 	bl	8001ebc <_close>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d102      	bne.n	8005d2e <_close_r+0x1a>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	b103      	cbz	r3, 8005d2e <_close_r+0x1a>
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
 8005d30:	200005a4 	.word	0x200005a4

08005d34 <_lseek_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4d07      	ldr	r5, [pc, #28]	@ (8005d54 <_lseek_r+0x20>)
 8005d38:	4604      	mov	r4, r0
 8005d3a:	4608      	mov	r0, r1
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	2200      	movs	r2, #0
 8005d40:	602a      	str	r2, [r5, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f7fc f8e1 	bl	8001f0a <_lseek>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_lseek_r+0x1e>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_lseek_r+0x1e>
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	200005a4 	.word	0x200005a4

08005d58 <_read_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4d07      	ldr	r5, [pc, #28]	@ (8005d78 <_read_r+0x20>)
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	4608      	mov	r0, r1
 8005d60:	4611      	mov	r1, r2
 8005d62:	2200      	movs	r2, #0
 8005d64:	602a      	str	r2, [r5, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f7fc f86f 	bl	8001e4a <_read>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_read_r+0x1e>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_read_r+0x1e>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	200005a4 	.word	0x200005a4

08005d7c <_write_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4d07      	ldr	r5, [pc, #28]	@ (8005d9c <_write_r+0x20>)
 8005d80:	4604      	mov	r4, r0
 8005d82:	4608      	mov	r0, r1
 8005d84:	4611      	mov	r1, r2
 8005d86:	2200      	movs	r2, #0
 8005d88:	602a      	str	r2, [r5, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f7fc f87a 	bl	8001e84 <_write>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d102      	bne.n	8005d9a <_write_r+0x1e>
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	b103      	cbz	r3, 8005d9a <_write_r+0x1e>
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	200005a4 	.word	0x200005a4

08005da0 <__errno>:
 8005da0:	4b01      	ldr	r3, [pc, #4]	@ (8005da8 <__errno+0x8>)
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000018 	.word	0x20000018

08005dac <__libc_init_array>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	4d0d      	ldr	r5, [pc, #52]	@ (8005de4 <__libc_init_array+0x38>)
 8005db0:	4c0d      	ldr	r4, [pc, #52]	@ (8005de8 <__libc_init_array+0x3c>)
 8005db2:	1b64      	subs	r4, r4, r5
 8005db4:	10a4      	asrs	r4, r4, #2
 8005db6:	2600      	movs	r6, #0
 8005db8:	42a6      	cmp	r6, r4
 8005dba:	d109      	bne.n	8005dd0 <__libc_init_array+0x24>
 8005dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8005dec <__libc_init_array+0x40>)
 8005dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8005df0 <__libc_init_array+0x44>)
 8005dc0:	f001 febe 	bl	8007b40 <_init>
 8005dc4:	1b64      	subs	r4, r4, r5
 8005dc6:	10a4      	asrs	r4, r4, #2
 8005dc8:	2600      	movs	r6, #0
 8005dca:	42a6      	cmp	r6, r4
 8005dcc:	d105      	bne.n	8005dda <__libc_init_array+0x2e>
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd4:	4798      	blx	r3
 8005dd6:	3601      	adds	r6, #1
 8005dd8:	e7ee      	b.n	8005db8 <__libc_init_array+0xc>
 8005dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dde:	4798      	blx	r3
 8005de0:	3601      	adds	r6, #1
 8005de2:	e7f2      	b.n	8005dca <__libc_init_array+0x1e>
 8005de4:	08007ee8 	.word	0x08007ee8
 8005de8:	08007ee8 	.word	0x08007ee8
 8005dec:	08007ee8 	.word	0x08007ee8
 8005df0:	08007eec 	.word	0x08007eec

08005df4 <__retarget_lock_init_recursive>:
 8005df4:	4770      	bx	lr

08005df6 <__retarget_lock_acquire_recursive>:
 8005df6:	4770      	bx	lr

08005df8 <__retarget_lock_release_recursive>:
 8005df8:	4770      	bx	lr

08005dfa <quorem>:
 8005dfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfe:	6903      	ldr	r3, [r0, #16]
 8005e00:	690c      	ldr	r4, [r1, #16]
 8005e02:	42a3      	cmp	r3, r4
 8005e04:	4607      	mov	r7, r0
 8005e06:	db7e      	blt.n	8005f06 <quorem+0x10c>
 8005e08:	3c01      	subs	r4, #1
 8005e0a:	f101 0814 	add.w	r8, r1, #20
 8005e0e:	00a3      	lsls	r3, r4, #2
 8005e10:	f100 0514 	add.w	r5, r0, #20
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e1a:	9301      	str	r3, [sp, #4]
 8005e1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e24:	3301      	adds	r3, #1
 8005e26:	429a      	cmp	r2, r3
 8005e28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e30:	d32e      	bcc.n	8005e90 <quorem+0x96>
 8005e32:	f04f 0a00 	mov.w	sl, #0
 8005e36:	46c4      	mov	ip, r8
 8005e38:	46ae      	mov	lr, r5
 8005e3a:	46d3      	mov	fp, sl
 8005e3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e40:	b298      	uxth	r0, r3
 8005e42:	fb06 a000 	mla	r0, r6, r0, sl
 8005e46:	0c02      	lsrs	r2, r0, #16
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	fb06 2303 	mla	r3, r6, r3, r2
 8005e4e:	f8de 2000 	ldr.w	r2, [lr]
 8005e52:	b280      	uxth	r0, r0
 8005e54:	b292      	uxth	r2, r2
 8005e56:	1a12      	subs	r2, r2, r0
 8005e58:	445a      	add	r2, fp
 8005e5a:	f8de 0000 	ldr.w	r0, [lr]
 8005e5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e6c:	b292      	uxth	r2, r2
 8005e6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e72:	45e1      	cmp	r9, ip
 8005e74:	f84e 2b04 	str.w	r2, [lr], #4
 8005e78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e7c:	d2de      	bcs.n	8005e3c <quorem+0x42>
 8005e7e:	9b00      	ldr	r3, [sp, #0]
 8005e80:	58eb      	ldr	r3, [r5, r3]
 8005e82:	b92b      	cbnz	r3, 8005e90 <quorem+0x96>
 8005e84:	9b01      	ldr	r3, [sp, #4]
 8005e86:	3b04      	subs	r3, #4
 8005e88:	429d      	cmp	r5, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	d32f      	bcc.n	8005eee <quorem+0xf4>
 8005e8e:	613c      	str	r4, [r7, #16]
 8005e90:	4638      	mov	r0, r7
 8005e92:	f001 f97b 	bl	800718c <__mcmp>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	db25      	blt.n	8005ee6 <quorem+0xec>
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ea2:	f8d1 c000 	ldr.w	ip, [r1]
 8005ea6:	fa1f fe82 	uxth.w	lr, r2
 8005eaa:	fa1f f38c 	uxth.w	r3, ip
 8005eae:	eba3 030e 	sub.w	r3, r3, lr
 8005eb2:	4403      	add	r3, r0
 8005eb4:	0c12      	lsrs	r2, r2, #16
 8005eb6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005eba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ec4:	45c1      	cmp	r9, r8
 8005ec6:	f841 3b04 	str.w	r3, [r1], #4
 8005eca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ece:	d2e6      	bcs.n	8005e9e <quorem+0xa4>
 8005ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ed4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ed8:	b922      	cbnz	r2, 8005ee4 <quorem+0xea>
 8005eda:	3b04      	subs	r3, #4
 8005edc:	429d      	cmp	r5, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	d30b      	bcc.n	8005efa <quorem+0x100>
 8005ee2:	613c      	str	r4, [r7, #16]
 8005ee4:	3601      	adds	r6, #1
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	b003      	add	sp, #12
 8005eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	3b04      	subs	r3, #4
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	d1cb      	bne.n	8005e8e <quorem+0x94>
 8005ef6:	3c01      	subs	r4, #1
 8005ef8:	e7c6      	b.n	8005e88 <quorem+0x8e>
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	3b04      	subs	r3, #4
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	d1ef      	bne.n	8005ee2 <quorem+0xe8>
 8005f02:	3c01      	subs	r4, #1
 8005f04:	e7ea      	b.n	8005edc <quorem+0xe2>
 8005f06:	2000      	movs	r0, #0
 8005f08:	e7ee      	b.n	8005ee8 <quorem+0xee>
 8005f0a:	0000      	movs	r0, r0
 8005f0c:	0000      	movs	r0, r0
	...

08005f10 <_dtoa_r>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	69c7      	ldr	r7, [r0, #28]
 8005f16:	b099      	sub	sp, #100	@ 0x64
 8005f18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f1c:	ec55 4b10 	vmov	r4, r5, d0
 8005f20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005f22:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f24:	4683      	mov	fp, r0
 8005f26:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f2a:	b97f      	cbnz	r7, 8005f4c <_dtoa_r+0x3c>
 8005f2c:	2010      	movs	r0, #16
 8005f2e:	f000 fdfd 	bl	8006b2c <malloc>
 8005f32:	4602      	mov	r2, r0
 8005f34:	f8cb 001c 	str.w	r0, [fp, #28]
 8005f38:	b920      	cbnz	r0, 8005f44 <_dtoa_r+0x34>
 8005f3a:	4ba7      	ldr	r3, [pc, #668]	@ (80061d8 <_dtoa_r+0x2c8>)
 8005f3c:	21ef      	movs	r1, #239	@ 0xef
 8005f3e:	48a7      	ldr	r0, [pc, #668]	@ (80061dc <_dtoa_r+0x2cc>)
 8005f40:	f001 faf6 	bl	8007530 <__assert_func>
 8005f44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f48:	6007      	str	r7, [r0, #0]
 8005f4a:	60c7      	str	r7, [r0, #12]
 8005f4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f50:	6819      	ldr	r1, [r3, #0]
 8005f52:	b159      	cbz	r1, 8005f6c <_dtoa_r+0x5c>
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	604a      	str	r2, [r1, #4]
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4093      	lsls	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
 8005f5e:	4658      	mov	r0, fp
 8005f60:	f000 feda 	bl	8006d18 <_Bfree>
 8005f64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	1e2b      	subs	r3, r5, #0
 8005f6e:	bfb9      	ittee	lt
 8005f70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f74:	9303      	strlt	r3, [sp, #12]
 8005f76:	2300      	movge	r3, #0
 8005f78:	6033      	strge	r3, [r6, #0]
 8005f7a:	9f03      	ldr	r7, [sp, #12]
 8005f7c:	4b98      	ldr	r3, [pc, #608]	@ (80061e0 <_dtoa_r+0x2d0>)
 8005f7e:	bfbc      	itt	lt
 8005f80:	2201      	movlt	r2, #1
 8005f82:	6032      	strlt	r2, [r6, #0]
 8005f84:	43bb      	bics	r3, r7
 8005f86:	d112      	bne.n	8005fae <_dtoa_r+0x9e>
 8005f88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f94:	4323      	orrs	r3, r4
 8005f96:	f000 854d 	beq.w	8006a34 <_dtoa_r+0xb24>
 8005f9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80061f4 <_dtoa_r+0x2e4>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 854f 	beq.w	8006a44 <_dtoa_r+0xb34>
 8005fa6:	f10a 0303 	add.w	r3, sl, #3
 8005faa:	f000 bd49 	b.w	8006a40 <_dtoa_r+0xb30>
 8005fae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	ec51 0b17 	vmov	r0, r1, d7
 8005fb8:	2300      	movs	r3, #0
 8005fba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005fbe:	f7fa fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	b158      	cbz	r0, 8005fde <_dtoa_r+0xce>
 8005fc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005fc8:	2301      	movs	r3, #1
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fce:	b113      	cbz	r3, 8005fd6 <_dtoa_r+0xc6>
 8005fd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005fd2:	4b84      	ldr	r3, [pc, #528]	@ (80061e4 <_dtoa_r+0x2d4>)
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80061f8 <_dtoa_r+0x2e8>
 8005fda:	f000 bd33 	b.w	8006a44 <_dtoa_r+0xb34>
 8005fde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005fe2:	aa16      	add	r2, sp, #88	@ 0x58
 8005fe4:	a917      	add	r1, sp, #92	@ 0x5c
 8005fe6:	4658      	mov	r0, fp
 8005fe8:	f001 f980 	bl	80072ec <__d2b>
 8005fec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005ff0:	4681      	mov	r9, r0
 8005ff2:	2e00      	cmp	r6, #0
 8005ff4:	d077      	beq.n	80060e6 <_dtoa_r+0x1d6>
 8005ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ff8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006004:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006008:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800600c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006010:	4619      	mov	r1, r3
 8006012:	2200      	movs	r2, #0
 8006014:	4b74      	ldr	r3, [pc, #464]	@ (80061e8 <_dtoa_r+0x2d8>)
 8006016:	f7fa f937 	bl	8000288 <__aeabi_dsub>
 800601a:	a369      	add	r3, pc, #420	@ (adr r3, 80061c0 <_dtoa_r+0x2b0>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa faea 	bl	80005f8 <__aeabi_dmul>
 8006024:	a368      	add	r3, pc, #416	@ (adr r3, 80061c8 <_dtoa_r+0x2b8>)
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f7fa f92f 	bl	800028c <__adddf3>
 800602e:	4604      	mov	r4, r0
 8006030:	4630      	mov	r0, r6
 8006032:	460d      	mov	r5, r1
 8006034:	f7fa fa76 	bl	8000524 <__aeabi_i2d>
 8006038:	a365      	add	r3, pc, #404	@ (adr r3, 80061d0 <_dtoa_r+0x2c0>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa fadb 	bl	80005f8 <__aeabi_dmul>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4620      	mov	r0, r4
 8006048:	4629      	mov	r1, r5
 800604a:	f7fa f91f 	bl	800028c <__adddf3>
 800604e:	4604      	mov	r4, r0
 8006050:	460d      	mov	r5, r1
 8006052:	f7fa fd81 	bl	8000b58 <__aeabi_d2iz>
 8006056:	2200      	movs	r2, #0
 8006058:	4607      	mov	r7, r0
 800605a:	2300      	movs	r3, #0
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	f7fa fd3c 	bl	8000adc <__aeabi_dcmplt>
 8006064:	b140      	cbz	r0, 8006078 <_dtoa_r+0x168>
 8006066:	4638      	mov	r0, r7
 8006068:	f7fa fa5c 	bl	8000524 <__aeabi_i2d>
 800606c:	4622      	mov	r2, r4
 800606e:	462b      	mov	r3, r5
 8006070:	f7fa fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006074:	b900      	cbnz	r0, 8006078 <_dtoa_r+0x168>
 8006076:	3f01      	subs	r7, #1
 8006078:	2f16      	cmp	r7, #22
 800607a:	d851      	bhi.n	8006120 <_dtoa_r+0x210>
 800607c:	4b5b      	ldr	r3, [pc, #364]	@ (80061ec <_dtoa_r+0x2dc>)
 800607e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800608a:	f7fa fd27 	bl	8000adc <__aeabi_dcmplt>
 800608e:	2800      	cmp	r0, #0
 8006090:	d048      	beq.n	8006124 <_dtoa_r+0x214>
 8006092:	3f01      	subs	r7, #1
 8006094:	2300      	movs	r3, #0
 8006096:	9312      	str	r3, [sp, #72]	@ 0x48
 8006098:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800609a:	1b9b      	subs	r3, r3, r6
 800609c:	1e5a      	subs	r2, r3, #1
 800609e:	bf44      	itt	mi
 80060a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80060a4:	2300      	movmi	r3, #0
 80060a6:	9208      	str	r2, [sp, #32]
 80060a8:	bf54      	ite	pl
 80060aa:	f04f 0800 	movpl.w	r8, #0
 80060ae:	9308      	strmi	r3, [sp, #32]
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	db39      	blt.n	8006128 <_dtoa_r+0x218>
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80060b8:	443b      	add	r3, r7
 80060ba:	9308      	str	r3, [sp, #32]
 80060bc:	2300      	movs	r3, #0
 80060be:	930a      	str	r3, [sp, #40]	@ 0x28
 80060c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c2:	2b09      	cmp	r3, #9
 80060c4:	d864      	bhi.n	8006190 <_dtoa_r+0x280>
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	bfc4      	itt	gt
 80060ca:	3b04      	subgt	r3, #4
 80060cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80060ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d0:	f1a3 0302 	sub.w	r3, r3, #2
 80060d4:	bfcc      	ite	gt
 80060d6:	2400      	movgt	r4, #0
 80060d8:	2401      	movle	r4, #1
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d863      	bhi.n	80061a6 <_dtoa_r+0x296>
 80060de:	e8df f003 	tbb	[pc, r3]
 80060e2:	372a      	.short	0x372a
 80060e4:	5535      	.short	0x5535
 80060e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80060ea:	441e      	add	r6, r3
 80060ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	bfc1      	itttt	gt
 80060f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80060f8:	409f      	lslgt	r7, r3
 80060fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80060fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006102:	bfd6      	itet	le
 8006104:	f1c3 0320 	rsble	r3, r3, #32
 8006108:	ea47 0003 	orrgt.w	r0, r7, r3
 800610c:	fa04 f003 	lslle.w	r0, r4, r3
 8006110:	f7fa f9f8 	bl	8000504 <__aeabi_ui2d>
 8006114:	2201      	movs	r2, #1
 8006116:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800611a:	3e01      	subs	r6, #1
 800611c:	9214      	str	r2, [sp, #80]	@ 0x50
 800611e:	e777      	b.n	8006010 <_dtoa_r+0x100>
 8006120:	2301      	movs	r3, #1
 8006122:	e7b8      	b.n	8006096 <_dtoa_r+0x186>
 8006124:	9012      	str	r0, [sp, #72]	@ 0x48
 8006126:	e7b7      	b.n	8006098 <_dtoa_r+0x188>
 8006128:	427b      	negs	r3, r7
 800612a:	930a      	str	r3, [sp, #40]	@ 0x28
 800612c:	2300      	movs	r3, #0
 800612e:	eba8 0807 	sub.w	r8, r8, r7
 8006132:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006134:	e7c4      	b.n	80060c0 <_dtoa_r+0x1b0>
 8006136:	2300      	movs	r3, #0
 8006138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800613a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	dc35      	bgt.n	80061ac <_dtoa_r+0x29c>
 8006140:	2301      	movs	r3, #1
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	9307      	str	r3, [sp, #28]
 8006146:	461a      	mov	r2, r3
 8006148:	920e      	str	r2, [sp, #56]	@ 0x38
 800614a:	e00b      	b.n	8006164 <_dtoa_r+0x254>
 800614c:	2301      	movs	r3, #1
 800614e:	e7f3      	b.n	8006138 <_dtoa_r+0x228>
 8006150:	2300      	movs	r3, #0
 8006152:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	3301      	adds	r3, #1
 800615c:	2b01      	cmp	r3, #1
 800615e:	9307      	str	r3, [sp, #28]
 8006160:	bfb8      	it	lt
 8006162:	2301      	movlt	r3, #1
 8006164:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006168:	2100      	movs	r1, #0
 800616a:	2204      	movs	r2, #4
 800616c:	f102 0514 	add.w	r5, r2, #20
 8006170:	429d      	cmp	r5, r3
 8006172:	d91f      	bls.n	80061b4 <_dtoa_r+0x2a4>
 8006174:	6041      	str	r1, [r0, #4]
 8006176:	4658      	mov	r0, fp
 8006178:	f000 fd8e 	bl	8006c98 <_Balloc>
 800617c:	4682      	mov	sl, r0
 800617e:	2800      	cmp	r0, #0
 8006180:	d13c      	bne.n	80061fc <_dtoa_r+0x2ec>
 8006182:	4b1b      	ldr	r3, [pc, #108]	@ (80061f0 <_dtoa_r+0x2e0>)
 8006184:	4602      	mov	r2, r0
 8006186:	f240 11af 	movw	r1, #431	@ 0x1af
 800618a:	e6d8      	b.n	8005f3e <_dtoa_r+0x2e>
 800618c:	2301      	movs	r3, #1
 800618e:	e7e0      	b.n	8006152 <_dtoa_r+0x242>
 8006190:	2401      	movs	r4, #1
 8006192:	2300      	movs	r3, #0
 8006194:	9309      	str	r3, [sp, #36]	@ 0x24
 8006196:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006198:	f04f 33ff 	mov.w	r3, #4294967295
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	9307      	str	r3, [sp, #28]
 80061a0:	2200      	movs	r2, #0
 80061a2:	2312      	movs	r3, #18
 80061a4:	e7d0      	b.n	8006148 <_dtoa_r+0x238>
 80061a6:	2301      	movs	r3, #1
 80061a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061aa:	e7f5      	b.n	8006198 <_dtoa_r+0x288>
 80061ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	e7d7      	b.n	8006164 <_dtoa_r+0x254>
 80061b4:	3101      	adds	r1, #1
 80061b6:	0052      	lsls	r2, r2, #1
 80061b8:	e7d8      	b.n	800616c <_dtoa_r+0x25c>
 80061ba:	bf00      	nop
 80061bc:	f3af 8000 	nop.w
 80061c0:	636f4361 	.word	0x636f4361
 80061c4:	3fd287a7 	.word	0x3fd287a7
 80061c8:	8b60c8b3 	.word	0x8b60c8b3
 80061cc:	3fc68a28 	.word	0x3fc68a28
 80061d0:	509f79fb 	.word	0x509f79fb
 80061d4:	3fd34413 	.word	0x3fd34413
 80061d8:	08007bb1 	.word	0x08007bb1
 80061dc:	08007bc8 	.word	0x08007bc8
 80061e0:	7ff00000 	.word	0x7ff00000
 80061e4:	08007b81 	.word	0x08007b81
 80061e8:	3ff80000 	.word	0x3ff80000
 80061ec:	08007cc0 	.word	0x08007cc0
 80061f0:	08007c20 	.word	0x08007c20
 80061f4:	08007bad 	.word	0x08007bad
 80061f8:	08007b80 	.word	0x08007b80
 80061fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006200:	6018      	str	r0, [r3, #0]
 8006202:	9b07      	ldr	r3, [sp, #28]
 8006204:	2b0e      	cmp	r3, #14
 8006206:	f200 80a4 	bhi.w	8006352 <_dtoa_r+0x442>
 800620a:	2c00      	cmp	r4, #0
 800620c:	f000 80a1 	beq.w	8006352 <_dtoa_r+0x442>
 8006210:	2f00      	cmp	r7, #0
 8006212:	dd33      	ble.n	800627c <_dtoa_r+0x36c>
 8006214:	4bad      	ldr	r3, [pc, #692]	@ (80064cc <_dtoa_r+0x5bc>)
 8006216:	f007 020f 	and.w	r2, r7, #15
 800621a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800621e:	ed93 7b00 	vldr	d7, [r3]
 8006222:	05f8      	lsls	r0, r7, #23
 8006224:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006228:	ea4f 1427 	mov.w	r4, r7, asr #4
 800622c:	d516      	bpl.n	800625c <_dtoa_r+0x34c>
 800622e:	4ba8      	ldr	r3, [pc, #672]	@ (80064d0 <_dtoa_r+0x5c0>)
 8006230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006234:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006238:	f7fa fb08 	bl	800084c <__aeabi_ddiv>
 800623c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006240:	f004 040f 	and.w	r4, r4, #15
 8006244:	2603      	movs	r6, #3
 8006246:	4da2      	ldr	r5, [pc, #648]	@ (80064d0 <_dtoa_r+0x5c0>)
 8006248:	b954      	cbnz	r4, 8006260 <_dtoa_r+0x350>
 800624a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800624e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006252:	f7fa fafb 	bl	800084c <__aeabi_ddiv>
 8006256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800625a:	e028      	b.n	80062ae <_dtoa_r+0x39e>
 800625c:	2602      	movs	r6, #2
 800625e:	e7f2      	b.n	8006246 <_dtoa_r+0x336>
 8006260:	07e1      	lsls	r1, r4, #31
 8006262:	d508      	bpl.n	8006276 <_dtoa_r+0x366>
 8006264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006268:	e9d5 2300 	ldrd	r2, r3, [r5]
 800626c:	f7fa f9c4 	bl	80005f8 <__aeabi_dmul>
 8006270:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006274:	3601      	adds	r6, #1
 8006276:	1064      	asrs	r4, r4, #1
 8006278:	3508      	adds	r5, #8
 800627a:	e7e5      	b.n	8006248 <_dtoa_r+0x338>
 800627c:	f000 80d2 	beq.w	8006424 <_dtoa_r+0x514>
 8006280:	427c      	negs	r4, r7
 8006282:	4b92      	ldr	r3, [pc, #584]	@ (80064cc <_dtoa_r+0x5bc>)
 8006284:	4d92      	ldr	r5, [pc, #584]	@ (80064d0 <_dtoa_r+0x5c0>)
 8006286:	f004 020f 	and.w	r2, r4, #15
 800628a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006296:	f7fa f9af 	bl	80005f8 <__aeabi_dmul>
 800629a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629e:	1124      	asrs	r4, r4, #4
 80062a0:	2300      	movs	r3, #0
 80062a2:	2602      	movs	r6, #2
 80062a4:	2c00      	cmp	r4, #0
 80062a6:	f040 80b2 	bne.w	800640e <_dtoa_r+0x4fe>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1d3      	bne.n	8006256 <_dtoa_r+0x346>
 80062ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80b7 	beq.w	8006428 <_dtoa_r+0x518>
 80062ba:	4b86      	ldr	r3, [pc, #536]	@ (80064d4 <_dtoa_r+0x5c4>)
 80062bc:	2200      	movs	r2, #0
 80062be:	4620      	mov	r0, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	f7fa fc0b 	bl	8000adc <__aeabi_dcmplt>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f000 80ae 	beq.w	8006428 <_dtoa_r+0x518>
 80062cc:	9b07      	ldr	r3, [sp, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80aa 	beq.w	8006428 <_dtoa_r+0x518>
 80062d4:	9b00      	ldr	r3, [sp, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dd37      	ble.n	800634a <_dtoa_r+0x43a>
 80062da:	1e7b      	subs	r3, r7, #1
 80062dc:	9304      	str	r3, [sp, #16]
 80062de:	4620      	mov	r0, r4
 80062e0:	4b7d      	ldr	r3, [pc, #500]	@ (80064d8 <_dtoa_r+0x5c8>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7fa f987 	bl	80005f8 <__aeabi_dmul>
 80062ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062ee:	9c00      	ldr	r4, [sp, #0]
 80062f0:	3601      	adds	r6, #1
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7fa f916 	bl	8000524 <__aeabi_i2d>
 80062f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062fc:	f7fa f97c 	bl	80005f8 <__aeabi_dmul>
 8006300:	4b76      	ldr	r3, [pc, #472]	@ (80064dc <_dtoa_r+0x5cc>)
 8006302:	2200      	movs	r2, #0
 8006304:	f7f9 ffc2 	bl	800028c <__adddf3>
 8006308:	4605      	mov	r5, r0
 800630a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800630e:	2c00      	cmp	r4, #0
 8006310:	f040 808d 	bne.w	800642e <_dtoa_r+0x51e>
 8006314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006318:	4b71      	ldr	r3, [pc, #452]	@ (80064e0 <_dtoa_r+0x5d0>)
 800631a:	2200      	movs	r2, #0
 800631c:	f7f9 ffb4 	bl	8000288 <__aeabi_dsub>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006328:	462a      	mov	r2, r5
 800632a:	4633      	mov	r3, r6
 800632c:	f7fa fbf4 	bl	8000b18 <__aeabi_dcmpgt>
 8006330:	2800      	cmp	r0, #0
 8006332:	f040 828b 	bne.w	800684c <_dtoa_r+0x93c>
 8006336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800633a:	462a      	mov	r2, r5
 800633c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006340:	f7fa fbcc 	bl	8000adc <__aeabi_dcmplt>
 8006344:	2800      	cmp	r0, #0
 8006346:	f040 8128 	bne.w	800659a <_dtoa_r+0x68a>
 800634a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800634e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006352:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006354:	2b00      	cmp	r3, #0
 8006356:	f2c0 815a 	blt.w	800660e <_dtoa_r+0x6fe>
 800635a:	2f0e      	cmp	r7, #14
 800635c:	f300 8157 	bgt.w	800660e <_dtoa_r+0x6fe>
 8006360:	4b5a      	ldr	r3, [pc, #360]	@ (80064cc <_dtoa_r+0x5bc>)
 8006362:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006366:	ed93 7b00 	vldr	d7, [r3]
 800636a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	ed8d 7b00 	vstr	d7, [sp]
 8006372:	da03      	bge.n	800637c <_dtoa_r+0x46c>
 8006374:	9b07      	ldr	r3, [sp, #28]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f340 8101 	ble.w	800657e <_dtoa_r+0x66e>
 800637c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006380:	4656      	mov	r6, sl
 8006382:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006386:	4620      	mov	r0, r4
 8006388:	4629      	mov	r1, r5
 800638a:	f7fa fa5f 	bl	800084c <__aeabi_ddiv>
 800638e:	f7fa fbe3 	bl	8000b58 <__aeabi_d2iz>
 8006392:	4680      	mov	r8, r0
 8006394:	f7fa f8c6 	bl	8000524 <__aeabi_i2d>
 8006398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800639c:	f7fa f92c 	bl	80005f8 <__aeabi_dmul>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4620      	mov	r0, r4
 80063a6:	4629      	mov	r1, r5
 80063a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80063ac:	f7f9 ff6c 	bl	8000288 <__aeabi_dsub>
 80063b0:	f806 4b01 	strb.w	r4, [r6], #1
 80063b4:	9d07      	ldr	r5, [sp, #28]
 80063b6:	eba6 040a 	sub.w	r4, r6, sl
 80063ba:	42a5      	cmp	r5, r4
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	f040 8117 	bne.w	80065f2 <_dtoa_r+0x6e2>
 80063c4:	f7f9 ff62 	bl	800028c <__adddf3>
 80063c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063cc:	4604      	mov	r4, r0
 80063ce:	460d      	mov	r5, r1
 80063d0:	f7fa fba2 	bl	8000b18 <__aeabi_dcmpgt>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	f040 80f9 	bne.w	80065cc <_dtoa_r+0x6bc>
 80063da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7fa fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 80063e6:	b118      	cbz	r0, 80063f0 <_dtoa_r+0x4e0>
 80063e8:	f018 0f01 	tst.w	r8, #1
 80063ec:	f040 80ee 	bne.w	80065cc <_dtoa_r+0x6bc>
 80063f0:	4649      	mov	r1, r9
 80063f2:	4658      	mov	r0, fp
 80063f4:	f000 fc90 	bl	8006d18 <_Bfree>
 80063f8:	2300      	movs	r3, #0
 80063fa:	7033      	strb	r3, [r6, #0]
 80063fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063fe:	3701      	adds	r7, #1
 8006400:	601f      	str	r7, [r3, #0]
 8006402:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 831d 	beq.w	8006a44 <_dtoa_r+0xb34>
 800640a:	601e      	str	r6, [r3, #0]
 800640c:	e31a      	b.n	8006a44 <_dtoa_r+0xb34>
 800640e:	07e2      	lsls	r2, r4, #31
 8006410:	d505      	bpl.n	800641e <_dtoa_r+0x50e>
 8006412:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006416:	f7fa f8ef 	bl	80005f8 <__aeabi_dmul>
 800641a:	3601      	adds	r6, #1
 800641c:	2301      	movs	r3, #1
 800641e:	1064      	asrs	r4, r4, #1
 8006420:	3508      	adds	r5, #8
 8006422:	e73f      	b.n	80062a4 <_dtoa_r+0x394>
 8006424:	2602      	movs	r6, #2
 8006426:	e742      	b.n	80062ae <_dtoa_r+0x39e>
 8006428:	9c07      	ldr	r4, [sp, #28]
 800642a:	9704      	str	r7, [sp, #16]
 800642c:	e761      	b.n	80062f2 <_dtoa_r+0x3e2>
 800642e:	4b27      	ldr	r3, [pc, #156]	@ (80064cc <_dtoa_r+0x5bc>)
 8006430:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006432:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006436:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800643a:	4454      	add	r4, sl
 800643c:	2900      	cmp	r1, #0
 800643e:	d053      	beq.n	80064e8 <_dtoa_r+0x5d8>
 8006440:	4928      	ldr	r1, [pc, #160]	@ (80064e4 <_dtoa_r+0x5d4>)
 8006442:	2000      	movs	r0, #0
 8006444:	f7fa fa02 	bl	800084c <__aeabi_ddiv>
 8006448:	4633      	mov	r3, r6
 800644a:	462a      	mov	r2, r5
 800644c:	f7f9 ff1c 	bl	8000288 <__aeabi_dsub>
 8006450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006454:	4656      	mov	r6, sl
 8006456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645a:	f7fa fb7d 	bl	8000b58 <__aeabi_d2iz>
 800645e:	4605      	mov	r5, r0
 8006460:	f7fa f860 	bl	8000524 <__aeabi_i2d>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800646c:	f7f9 ff0c 	bl	8000288 <__aeabi_dsub>
 8006470:	3530      	adds	r5, #48	@ 0x30
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800647a:	f806 5b01 	strb.w	r5, [r6], #1
 800647e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006482:	f7fa fb2b 	bl	8000adc <__aeabi_dcmplt>
 8006486:	2800      	cmp	r0, #0
 8006488:	d171      	bne.n	800656e <_dtoa_r+0x65e>
 800648a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800648e:	4911      	ldr	r1, [pc, #68]	@ (80064d4 <_dtoa_r+0x5c4>)
 8006490:	2000      	movs	r0, #0
 8006492:	f7f9 fef9 	bl	8000288 <__aeabi_dsub>
 8006496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800649a:	f7fa fb1f 	bl	8000adc <__aeabi_dcmplt>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f040 8095 	bne.w	80065ce <_dtoa_r+0x6be>
 80064a4:	42a6      	cmp	r6, r4
 80064a6:	f43f af50 	beq.w	800634a <_dtoa_r+0x43a>
 80064aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064ae:	4b0a      	ldr	r3, [pc, #40]	@ (80064d8 <_dtoa_r+0x5c8>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	f7fa f8a1 	bl	80005f8 <__aeabi_dmul>
 80064b6:	4b08      	ldr	r3, [pc, #32]	@ (80064d8 <_dtoa_r+0x5c8>)
 80064b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064bc:	2200      	movs	r2, #0
 80064be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064c2:	f7fa f899 	bl	80005f8 <__aeabi_dmul>
 80064c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ca:	e7c4      	b.n	8006456 <_dtoa_r+0x546>
 80064cc:	08007cc0 	.word	0x08007cc0
 80064d0:	08007c98 	.word	0x08007c98
 80064d4:	3ff00000 	.word	0x3ff00000
 80064d8:	40240000 	.word	0x40240000
 80064dc:	401c0000 	.word	0x401c0000
 80064e0:	40140000 	.word	0x40140000
 80064e4:	3fe00000 	.word	0x3fe00000
 80064e8:	4631      	mov	r1, r6
 80064ea:	4628      	mov	r0, r5
 80064ec:	f7fa f884 	bl	80005f8 <__aeabi_dmul>
 80064f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80064f6:	4656      	mov	r6, sl
 80064f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064fc:	f7fa fb2c 	bl	8000b58 <__aeabi_d2iz>
 8006500:	4605      	mov	r5, r0
 8006502:	f7fa f80f 	bl	8000524 <__aeabi_i2d>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650e:	f7f9 febb 	bl	8000288 <__aeabi_dsub>
 8006512:	3530      	adds	r5, #48	@ 0x30
 8006514:	f806 5b01 	strb.w	r5, [r6], #1
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	42a6      	cmp	r6, r4
 800651e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	d124      	bne.n	8006572 <_dtoa_r+0x662>
 8006528:	4bac      	ldr	r3, [pc, #688]	@ (80067dc <_dtoa_r+0x8cc>)
 800652a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800652e:	f7f9 fead 	bl	800028c <__adddf3>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800653a:	f7fa faed 	bl	8000b18 <__aeabi_dcmpgt>
 800653e:	2800      	cmp	r0, #0
 8006540:	d145      	bne.n	80065ce <_dtoa_r+0x6be>
 8006542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006546:	49a5      	ldr	r1, [pc, #660]	@ (80067dc <_dtoa_r+0x8cc>)
 8006548:	2000      	movs	r0, #0
 800654a:	f7f9 fe9d 	bl	8000288 <__aeabi_dsub>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006556:	f7fa fac1 	bl	8000adc <__aeabi_dcmplt>
 800655a:	2800      	cmp	r0, #0
 800655c:	f43f aef5 	beq.w	800634a <_dtoa_r+0x43a>
 8006560:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006562:	1e73      	subs	r3, r6, #1
 8006564:	9315      	str	r3, [sp, #84]	@ 0x54
 8006566:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800656a:	2b30      	cmp	r3, #48	@ 0x30
 800656c:	d0f8      	beq.n	8006560 <_dtoa_r+0x650>
 800656e:	9f04      	ldr	r7, [sp, #16]
 8006570:	e73e      	b.n	80063f0 <_dtoa_r+0x4e0>
 8006572:	4b9b      	ldr	r3, [pc, #620]	@ (80067e0 <_dtoa_r+0x8d0>)
 8006574:	f7fa f840 	bl	80005f8 <__aeabi_dmul>
 8006578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800657c:	e7bc      	b.n	80064f8 <_dtoa_r+0x5e8>
 800657e:	d10c      	bne.n	800659a <_dtoa_r+0x68a>
 8006580:	4b98      	ldr	r3, [pc, #608]	@ (80067e4 <_dtoa_r+0x8d4>)
 8006582:	2200      	movs	r2, #0
 8006584:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006588:	f7fa f836 	bl	80005f8 <__aeabi_dmul>
 800658c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006590:	f7fa fab8 	bl	8000b04 <__aeabi_dcmpge>
 8006594:	2800      	cmp	r0, #0
 8006596:	f000 8157 	beq.w	8006848 <_dtoa_r+0x938>
 800659a:	2400      	movs	r4, #0
 800659c:	4625      	mov	r5, r4
 800659e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065a0:	43db      	mvns	r3, r3
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	4656      	mov	r6, sl
 80065a6:	2700      	movs	r7, #0
 80065a8:	4621      	mov	r1, r4
 80065aa:	4658      	mov	r0, fp
 80065ac:	f000 fbb4 	bl	8006d18 <_Bfree>
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	d0dc      	beq.n	800656e <_dtoa_r+0x65e>
 80065b4:	b12f      	cbz	r7, 80065c2 <_dtoa_r+0x6b2>
 80065b6:	42af      	cmp	r7, r5
 80065b8:	d003      	beq.n	80065c2 <_dtoa_r+0x6b2>
 80065ba:	4639      	mov	r1, r7
 80065bc:	4658      	mov	r0, fp
 80065be:	f000 fbab 	bl	8006d18 <_Bfree>
 80065c2:	4629      	mov	r1, r5
 80065c4:	4658      	mov	r0, fp
 80065c6:	f000 fba7 	bl	8006d18 <_Bfree>
 80065ca:	e7d0      	b.n	800656e <_dtoa_r+0x65e>
 80065cc:	9704      	str	r7, [sp, #16]
 80065ce:	4633      	mov	r3, r6
 80065d0:	461e      	mov	r6, r3
 80065d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065d6:	2a39      	cmp	r2, #57	@ 0x39
 80065d8:	d107      	bne.n	80065ea <_dtoa_r+0x6da>
 80065da:	459a      	cmp	sl, r3
 80065dc:	d1f8      	bne.n	80065d0 <_dtoa_r+0x6c0>
 80065de:	9a04      	ldr	r2, [sp, #16]
 80065e0:	3201      	adds	r2, #1
 80065e2:	9204      	str	r2, [sp, #16]
 80065e4:	2230      	movs	r2, #48	@ 0x30
 80065e6:	f88a 2000 	strb.w	r2, [sl]
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	3201      	adds	r2, #1
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	e7bd      	b.n	800656e <_dtoa_r+0x65e>
 80065f2:	4b7b      	ldr	r3, [pc, #492]	@ (80067e0 <_dtoa_r+0x8d0>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	f7f9 ffff 	bl	80005f8 <__aeabi_dmul>
 80065fa:	2200      	movs	r2, #0
 80065fc:	2300      	movs	r3, #0
 80065fe:	4604      	mov	r4, r0
 8006600:	460d      	mov	r5, r1
 8006602:	f7fa fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8006606:	2800      	cmp	r0, #0
 8006608:	f43f aebb 	beq.w	8006382 <_dtoa_r+0x472>
 800660c:	e6f0      	b.n	80063f0 <_dtoa_r+0x4e0>
 800660e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006610:	2a00      	cmp	r2, #0
 8006612:	f000 80db 	beq.w	80067cc <_dtoa_r+0x8bc>
 8006616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006618:	2a01      	cmp	r2, #1
 800661a:	f300 80bf 	bgt.w	800679c <_dtoa_r+0x88c>
 800661e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006620:	2a00      	cmp	r2, #0
 8006622:	f000 80b7 	beq.w	8006794 <_dtoa_r+0x884>
 8006626:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800662a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800662c:	4646      	mov	r6, r8
 800662e:	9a08      	ldr	r2, [sp, #32]
 8006630:	2101      	movs	r1, #1
 8006632:	441a      	add	r2, r3
 8006634:	4658      	mov	r0, fp
 8006636:	4498      	add	r8, r3
 8006638:	9208      	str	r2, [sp, #32]
 800663a:	f000 fc21 	bl	8006e80 <__i2b>
 800663e:	4605      	mov	r5, r0
 8006640:	b15e      	cbz	r6, 800665a <_dtoa_r+0x74a>
 8006642:	9b08      	ldr	r3, [sp, #32]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dd08      	ble.n	800665a <_dtoa_r+0x74a>
 8006648:	42b3      	cmp	r3, r6
 800664a:	9a08      	ldr	r2, [sp, #32]
 800664c:	bfa8      	it	ge
 800664e:	4633      	movge	r3, r6
 8006650:	eba8 0803 	sub.w	r8, r8, r3
 8006654:	1af6      	subs	r6, r6, r3
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	9308      	str	r3, [sp, #32]
 800665a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800665c:	b1f3      	cbz	r3, 800669c <_dtoa_r+0x78c>
 800665e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80b7 	beq.w	80067d4 <_dtoa_r+0x8c4>
 8006666:	b18c      	cbz	r4, 800668c <_dtoa_r+0x77c>
 8006668:	4629      	mov	r1, r5
 800666a:	4622      	mov	r2, r4
 800666c:	4658      	mov	r0, fp
 800666e:	f000 fcc7 	bl	8007000 <__pow5mult>
 8006672:	464a      	mov	r2, r9
 8006674:	4601      	mov	r1, r0
 8006676:	4605      	mov	r5, r0
 8006678:	4658      	mov	r0, fp
 800667a:	f000 fc17 	bl	8006eac <__multiply>
 800667e:	4649      	mov	r1, r9
 8006680:	9004      	str	r0, [sp, #16]
 8006682:	4658      	mov	r0, fp
 8006684:	f000 fb48 	bl	8006d18 <_Bfree>
 8006688:	9b04      	ldr	r3, [sp, #16]
 800668a:	4699      	mov	r9, r3
 800668c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800668e:	1b1a      	subs	r2, r3, r4
 8006690:	d004      	beq.n	800669c <_dtoa_r+0x78c>
 8006692:	4649      	mov	r1, r9
 8006694:	4658      	mov	r0, fp
 8006696:	f000 fcb3 	bl	8007000 <__pow5mult>
 800669a:	4681      	mov	r9, r0
 800669c:	2101      	movs	r1, #1
 800669e:	4658      	mov	r0, fp
 80066a0:	f000 fbee 	bl	8006e80 <__i2b>
 80066a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066a6:	4604      	mov	r4, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 81cf 	beq.w	8006a4c <_dtoa_r+0xb3c>
 80066ae:	461a      	mov	r2, r3
 80066b0:	4601      	mov	r1, r0
 80066b2:	4658      	mov	r0, fp
 80066b4:	f000 fca4 	bl	8007000 <__pow5mult>
 80066b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	4604      	mov	r4, r0
 80066be:	f300 8095 	bgt.w	80067ec <_dtoa_r+0x8dc>
 80066c2:	9b02      	ldr	r3, [sp, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f040 8087 	bne.w	80067d8 <_dtoa_r+0x8c8>
 80066ca:	9b03      	ldr	r3, [sp, #12]
 80066cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f040 8089 	bne.w	80067e8 <_dtoa_r+0x8d8>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066dc:	0d1b      	lsrs	r3, r3, #20
 80066de:	051b      	lsls	r3, r3, #20
 80066e0:	b12b      	cbz	r3, 80066ee <_dtoa_r+0x7de>
 80066e2:	9b08      	ldr	r3, [sp, #32]
 80066e4:	3301      	adds	r3, #1
 80066e6:	9308      	str	r3, [sp, #32]
 80066e8:	f108 0801 	add.w	r8, r8, #1
 80066ec:	2301      	movs	r3, #1
 80066ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80066f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 81b0 	beq.w	8006a58 <_dtoa_r+0xb48>
 80066f8:	6923      	ldr	r3, [r4, #16]
 80066fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066fe:	6918      	ldr	r0, [r3, #16]
 8006700:	f000 fb72 	bl	8006de8 <__hi0bits>
 8006704:	f1c0 0020 	rsb	r0, r0, #32
 8006708:	9b08      	ldr	r3, [sp, #32]
 800670a:	4418      	add	r0, r3
 800670c:	f010 001f 	ands.w	r0, r0, #31
 8006710:	d077      	beq.n	8006802 <_dtoa_r+0x8f2>
 8006712:	f1c0 0320 	rsb	r3, r0, #32
 8006716:	2b04      	cmp	r3, #4
 8006718:	dd6b      	ble.n	80067f2 <_dtoa_r+0x8e2>
 800671a:	9b08      	ldr	r3, [sp, #32]
 800671c:	f1c0 001c 	rsb	r0, r0, #28
 8006720:	4403      	add	r3, r0
 8006722:	4480      	add	r8, r0
 8006724:	4406      	add	r6, r0
 8006726:	9308      	str	r3, [sp, #32]
 8006728:	f1b8 0f00 	cmp.w	r8, #0
 800672c:	dd05      	ble.n	800673a <_dtoa_r+0x82a>
 800672e:	4649      	mov	r1, r9
 8006730:	4642      	mov	r2, r8
 8006732:	4658      	mov	r0, fp
 8006734:	f000 fcbe 	bl	80070b4 <__lshift>
 8006738:	4681      	mov	r9, r0
 800673a:	9b08      	ldr	r3, [sp, #32]
 800673c:	2b00      	cmp	r3, #0
 800673e:	dd05      	ble.n	800674c <_dtoa_r+0x83c>
 8006740:	4621      	mov	r1, r4
 8006742:	461a      	mov	r2, r3
 8006744:	4658      	mov	r0, fp
 8006746:	f000 fcb5 	bl	80070b4 <__lshift>
 800674a:	4604      	mov	r4, r0
 800674c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800674e:	2b00      	cmp	r3, #0
 8006750:	d059      	beq.n	8006806 <_dtoa_r+0x8f6>
 8006752:	4621      	mov	r1, r4
 8006754:	4648      	mov	r0, r9
 8006756:	f000 fd19 	bl	800718c <__mcmp>
 800675a:	2800      	cmp	r0, #0
 800675c:	da53      	bge.n	8006806 <_dtoa_r+0x8f6>
 800675e:	1e7b      	subs	r3, r7, #1
 8006760:	9304      	str	r3, [sp, #16]
 8006762:	4649      	mov	r1, r9
 8006764:	2300      	movs	r3, #0
 8006766:	220a      	movs	r2, #10
 8006768:	4658      	mov	r0, fp
 800676a:	f000 faf7 	bl	8006d5c <__multadd>
 800676e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006770:	4681      	mov	r9, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8172 	beq.w	8006a5c <_dtoa_r+0xb4c>
 8006778:	2300      	movs	r3, #0
 800677a:	4629      	mov	r1, r5
 800677c:	220a      	movs	r2, #10
 800677e:	4658      	mov	r0, fp
 8006780:	f000 faec 	bl	8006d5c <__multadd>
 8006784:	9b00      	ldr	r3, [sp, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	4605      	mov	r5, r0
 800678a:	dc67      	bgt.n	800685c <_dtoa_r+0x94c>
 800678c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800678e:	2b02      	cmp	r3, #2
 8006790:	dc41      	bgt.n	8006816 <_dtoa_r+0x906>
 8006792:	e063      	b.n	800685c <_dtoa_r+0x94c>
 8006794:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006796:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800679a:	e746      	b.n	800662a <_dtoa_r+0x71a>
 800679c:	9b07      	ldr	r3, [sp, #28]
 800679e:	1e5c      	subs	r4, r3, #1
 80067a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067a2:	42a3      	cmp	r3, r4
 80067a4:	bfbf      	itttt	lt
 80067a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80067a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80067aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80067ac:	1ae3      	sublt	r3, r4, r3
 80067ae:	bfb4      	ite	lt
 80067b0:	18d2      	addlt	r2, r2, r3
 80067b2:	1b1c      	subge	r4, r3, r4
 80067b4:	9b07      	ldr	r3, [sp, #28]
 80067b6:	bfbc      	itt	lt
 80067b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80067ba:	2400      	movlt	r4, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bfb5      	itete	lt
 80067c0:	eba8 0603 	sublt.w	r6, r8, r3
 80067c4:	9b07      	ldrge	r3, [sp, #28]
 80067c6:	2300      	movlt	r3, #0
 80067c8:	4646      	movge	r6, r8
 80067ca:	e730      	b.n	800662e <_dtoa_r+0x71e>
 80067cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80067d0:	4646      	mov	r6, r8
 80067d2:	e735      	b.n	8006640 <_dtoa_r+0x730>
 80067d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067d6:	e75c      	b.n	8006692 <_dtoa_r+0x782>
 80067d8:	2300      	movs	r3, #0
 80067da:	e788      	b.n	80066ee <_dtoa_r+0x7de>
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	40240000 	.word	0x40240000
 80067e4:	40140000 	.word	0x40140000
 80067e8:	9b02      	ldr	r3, [sp, #8]
 80067ea:	e780      	b.n	80066ee <_dtoa_r+0x7de>
 80067ec:	2300      	movs	r3, #0
 80067ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80067f0:	e782      	b.n	80066f8 <_dtoa_r+0x7e8>
 80067f2:	d099      	beq.n	8006728 <_dtoa_r+0x818>
 80067f4:	9a08      	ldr	r2, [sp, #32]
 80067f6:	331c      	adds	r3, #28
 80067f8:	441a      	add	r2, r3
 80067fa:	4498      	add	r8, r3
 80067fc:	441e      	add	r6, r3
 80067fe:	9208      	str	r2, [sp, #32]
 8006800:	e792      	b.n	8006728 <_dtoa_r+0x818>
 8006802:	4603      	mov	r3, r0
 8006804:	e7f6      	b.n	80067f4 <_dtoa_r+0x8e4>
 8006806:	9b07      	ldr	r3, [sp, #28]
 8006808:	9704      	str	r7, [sp, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	dc20      	bgt.n	8006850 <_dtoa_r+0x940>
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006812:	2b02      	cmp	r3, #2
 8006814:	dd1e      	ble.n	8006854 <_dtoa_r+0x944>
 8006816:	9b00      	ldr	r3, [sp, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f47f aec0 	bne.w	800659e <_dtoa_r+0x68e>
 800681e:	4621      	mov	r1, r4
 8006820:	2205      	movs	r2, #5
 8006822:	4658      	mov	r0, fp
 8006824:	f000 fa9a 	bl	8006d5c <__multadd>
 8006828:	4601      	mov	r1, r0
 800682a:	4604      	mov	r4, r0
 800682c:	4648      	mov	r0, r9
 800682e:	f000 fcad 	bl	800718c <__mcmp>
 8006832:	2800      	cmp	r0, #0
 8006834:	f77f aeb3 	ble.w	800659e <_dtoa_r+0x68e>
 8006838:	4656      	mov	r6, sl
 800683a:	2331      	movs	r3, #49	@ 0x31
 800683c:	f806 3b01 	strb.w	r3, [r6], #1
 8006840:	9b04      	ldr	r3, [sp, #16]
 8006842:	3301      	adds	r3, #1
 8006844:	9304      	str	r3, [sp, #16]
 8006846:	e6ae      	b.n	80065a6 <_dtoa_r+0x696>
 8006848:	9c07      	ldr	r4, [sp, #28]
 800684a:	9704      	str	r7, [sp, #16]
 800684c:	4625      	mov	r5, r4
 800684e:	e7f3      	b.n	8006838 <_dtoa_r+0x928>
 8006850:	9b07      	ldr	r3, [sp, #28]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8104 	beq.w	8006a64 <_dtoa_r+0xb54>
 800685c:	2e00      	cmp	r6, #0
 800685e:	dd05      	ble.n	800686c <_dtoa_r+0x95c>
 8006860:	4629      	mov	r1, r5
 8006862:	4632      	mov	r2, r6
 8006864:	4658      	mov	r0, fp
 8006866:	f000 fc25 	bl	80070b4 <__lshift>
 800686a:	4605      	mov	r5, r0
 800686c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	d05a      	beq.n	8006928 <_dtoa_r+0xa18>
 8006872:	6869      	ldr	r1, [r5, #4]
 8006874:	4658      	mov	r0, fp
 8006876:	f000 fa0f 	bl	8006c98 <_Balloc>
 800687a:	4606      	mov	r6, r0
 800687c:	b928      	cbnz	r0, 800688a <_dtoa_r+0x97a>
 800687e:	4b84      	ldr	r3, [pc, #528]	@ (8006a90 <_dtoa_r+0xb80>)
 8006880:	4602      	mov	r2, r0
 8006882:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006886:	f7ff bb5a 	b.w	8005f3e <_dtoa_r+0x2e>
 800688a:	692a      	ldr	r2, [r5, #16]
 800688c:	3202      	adds	r2, #2
 800688e:	0092      	lsls	r2, r2, #2
 8006890:	f105 010c 	add.w	r1, r5, #12
 8006894:	300c      	adds	r0, #12
 8006896:	f000 fe3d 	bl	8007514 <memcpy>
 800689a:	2201      	movs	r2, #1
 800689c:	4631      	mov	r1, r6
 800689e:	4658      	mov	r0, fp
 80068a0:	f000 fc08 	bl	80070b4 <__lshift>
 80068a4:	f10a 0301 	add.w	r3, sl, #1
 80068a8:	9307      	str	r3, [sp, #28]
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	4453      	add	r3, sl
 80068ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068b0:	9b02      	ldr	r3, [sp, #8]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	462f      	mov	r7, r5
 80068b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ba:	4605      	mov	r5, r0
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	4621      	mov	r1, r4
 80068c0:	3b01      	subs	r3, #1
 80068c2:	4648      	mov	r0, r9
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	f7ff fa98 	bl	8005dfa <quorem>
 80068ca:	4639      	mov	r1, r7
 80068cc:	9002      	str	r0, [sp, #8]
 80068ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068d2:	4648      	mov	r0, r9
 80068d4:	f000 fc5a 	bl	800718c <__mcmp>
 80068d8:	462a      	mov	r2, r5
 80068da:	9008      	str	r0, [sp, #32]
 80068dc:	4621      	mov	r1, r4
 80068de:	4658      	mov	r0, fp
 80068e0:	f000 fc70 	bl	80071c4 <__mdiff>
 80068e4:	68c2      	ldr	r2, [r0, #12]
 80068e6:	4606      	mov	r6, r0
 80068e8:	bb02      	cbnz	r2, 800692c <_dtoa_r+0xa1c>
 80068ea:	4601      	mov	r1, r0
 80068ec:	4648      	mov	r0, r9
 80068ee:	f000 fc4d 	bl	800718c <__mcmp>
 80068f2:	4602      	mov	r2, r0
 80068f4:	4631      	mov	r1, r6
 80068f6:	4658      	mov	r0, fp
 80068f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80068fa:	f000 fa0d 	bl	8006d18 <_Bfree>
 80068fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006900:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006902:	9e07      	ldr	r6, [sp, #28]
 8006904:	ea43 0102 	orr.w	r1, r3, r2
 8006908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800690a:	4319      	orrs	r1, r3
 800690c:	d110      	bne.n	8006930 <_dtoa_r+0xa20>
 800690e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006912:	d029      	beq.n	8006968 <_dtoa_r+0xa58>
 8006914:	9b08      	ldr	r3, [sp, #32]
 8006916:	2b00      	cmp	r3, #0
 8006918:	dd02      	ble.n	8006920 <_dtoa_r+0xa10>
 800691a:	9b02      	ldr	r3, [sp, #8]
 800691c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006920:	9b00      	ldr	r3, [sp, #0]
 8006922:	f883 8000 	strb.w	r8, [r3]
 8006926:	e63f      	b.n	80065a8 <_dtoa_r+0x698>
 8006928:	4628      	mov	r0, r5
 800692a:	e7bb      	b.n	80068a4 <_dtoa_r+0x994>
 800692c:	2201      	movs	r2, #1
 800692e:	e7e1      	b.n	80068f4 <_dtoa_r+0x9e4>
 8006930:	9b08      	ldr	r3, [sp, #32]
 8006932:	2b00      	cmp	r3, #0
 8006934:	db04      	blt.n	8006940 <_dtoa_r+0xa30>
 8006936:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006938:	430b      	orrs	r3, r1
 800693a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800693c:	430b      	orrs	r3, r1
 800693e:	d120      	bne.n	8006982 <_dtoa_r+0xa72>
 8006940:	2a00      	cmp	r2, #0
 8006942:	dded      	ble.n	8006920 <_dtoa_r+0xa10>
 8006944:	4649      	mov	r1, r9
 8006946:	2201      	movs	r2, #1
 8006948:	4658      	mov	r0, fp
 800694a:	f000 fbb3 	bl	80070b4 <__lshift>
 800694e:	4621      	mov	r1, r4
 8006950:	4681      	mov	r9, r0
 8006952:	f000 fc1b 	bl	800718c <__mcmp>
 8006956:	2800      	cmp	r0, #0
 8006958:	dc03      	bgt.n	8006962 <_dtoa_r+0xa52>
 800695a:	d1e1      	bne.n	8006920 <_dtoa_r+0xa10>
 800695c:	f018 0f01 	tst.w	r8, #1
 8006960:	d0de      	beq.n	8006920 <_dtoa_r+0xa10>
 8006962:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006966:	d1d8      	bne.n	800691a <_dtoa_r+0xa0a>
 8006968:	9a00      	ldr	r2, [sp, #0]
 800696a:	2339      	movs	r3, #57	@ 0x39
 800696c:	7013      	strb	r3, [r2, #0]
 800696e:	4633      	mov	r3, r6
 8006970:	461e      	mov	r6, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006978:	2a39      	cmp	r2, #57	@ 0x39
 800697a:	d052      	beq.n	8006a22 <_dtoa_r+0xb12>
 800697c:	3201      	adds	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e612      	b.n	80065a8 <_dtoa_r+0x698>
 8006982:	2a00      	cmp	r2, #0
 8006984:	dd07      	ble.n	8006996 <_dtoa_r+0xa86>
 8006986:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800698a:	d0ed      	beq.n	8006968 <_dtoa_r+0xa58>
 800698c:	9a00      	ldr	r2, [sp, #0]
 800698e:	f108 0301 	add.w	r3, r8, #1
 8006992:	7013      	strb	r3, [r2, #0]
 8006994:	e608      	b.n	80065a8 <_dtoa_r+0x698>
 8006996:	9b07      	ldr	r3, [sp, #28]
 8006998:	9a07      	ldr	r2, [sp, #28]
 800699a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800699e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d028      	beq.n	80069f6 <_dtoa_r+0xae6>
 80069a4:	4649      	mov	r1, r9
 80069a6:	2300      	movs	r3, #0
 80069a8:	220a      	movs	r2, #10
 80069aa:	4658      	mov	r0, fp
 80069ac:	f000 f9d6 	bl	8006d5c <__multadd>
 80069b0:	42af      	cmp	r7, r5
 80069b2:	4681      	mov	r9, r0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	f04f 020a 	mov.w	r2, #10
 80069bc:	4639      	mov	r1, r7
 80069be:	4658      	mov	r0, fp
 80069c0:	d107      	bne.n	80069d2 <_dtoa_r+0xac2>
 80069c2:	f000 f9cb 	bl	8006d5c <__multadd>
 80069c6:	4607      	mov	r7, r0
 80069c8:	4605      	mov	r5, r0
 80069ca:	9b07      	ldr	r3, [sp, #28]
 80069cc:	3301      	adds	r3, #1
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	e774      	b.n	80068bc <_dtoa_r+0x9ac>
 80069d2:	f000 f9c3 	bl	8006d5c <__multadd>
 80069d6:	4629      	mov	r1, r5
 80069d8:	4607      	mov	r7, r0
 80069da:	2300      	movs	r3, #0
 80069dc:	220a      	movs	r2, #10
 80069de:	4658      	mov	r0, fp
 80069e0:	f000 f9bc 	bl	8006d5c <__multadd>
 80069e4:	4605      	mov	r5, r0
 80069e6:	e7f0      	b.n	80069ca <_dtoa_r+0xaba>
 80069e8:	9b00      	ldr	r3, [sp, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bfcc      	ite	gt
 80069ee:	461e      	movgt	r6, r3
 80069f0:	2601      	movle	r6, #1
 80069f2:	4456      	add	r6, sl
 80069f4:	2700      	movs	r7, #0
 80069f6:	4649      	mov	r1, r9
 80069f8:	2201      	movs	r2, #1
 80069fa:	4658      	mov	r0, fp
 80069fc:	f000 fb5a 	bl	80070b4 <__lshift>
 8006a00:	4621      	mov	r1, r4
 8006a02:	4681      	mov	r9, r0
 8006a04:	f000 fbc2 	bl	800718c <__mcmp>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	dcb0      	bgt.n	800696e <_dtoa_r+0xa5e>
 8006a0c:	d102      	bne.n	8006a14 <_dtoa_r+0xb04>
 8006a0e:	f018 0f01 	tst.w	r8, #1
 8006a12:	d1ac      	bne.n	800696e <_dtoa_r+0xa5e>
 8006a14:	4633      	mov	r3, r6
 8006a16:	461e      	mov	r6, r3
 8006a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a1c:	2a30      	cmp	r2, #48	@ 0x30
 8006a1e:	d0fa      	beq.n	8006a16 <_dtoa_r+0xb06>
 8006a20:	e5c2      	b.n	80065a8 <_dtoa_r+0x698>
 8006a22:	459a      	cmp	sl, r3
 8006a24:	d1a4      	bne.n	8006970 <_dtoa_r+0xa60>
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	2331      	movs	r3, #49	@ 0x31
 8006a2e:	f88a 3000 	strb.w	r3, [sl]
 8006a32:	e5b9      	b.n	80065a8 <_dtoa_r+0x698>
 8006a34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006a94 <_dtoa_r+0xb84>
 8006a3a:	b11b      	cbz	r3, 8006a44 <_dtoa_r+0xb34>
 8006a3c:	f10a 0308 	add.w	r3, sl, #8
 8006a40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	4650      	mov	r0, sl
 8006a46:	b019      	add	sp, #100	@ 0x64
 8006a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	f77f ae37 	ble.w	80066c2 <_dtoa_r+0x7b2>
 8006a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a58:	2001      	movs	r0, #1
 8006a5a:	e655      	b.n	8006708 <_dtoa_r+0x7f8>
 8006a5c:	9b00      	ldr	r3, [sp, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f77f aed6 	ble.w	8006810 <_dtoa_r+0x900>
 8006a64:	4656      	mov	r6, sl
 8006a66:	4621      	mov	r1, r4
 8006a68:	4648      	mov	r0, r9
 8006a6a:	f7ff f9c6 	bl	8005dfa <quorem>
 8006a6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a72:	f806 8b01 	strb.w	r8, [r6], #1
 8006a76:	9b00      	ldr	r3, [sp, #0]
 8006a78:	eba6 020a 	sub.w	r2, r6, sl
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	ddb3      	ble.n	80069e8 <_dtoa_r+0xad8>
 8006a80:	4649      	mov	r1, r9
 8006a82:	2300      	movs	r3, #0
 8006a84:	220a      	movs	r2, #10
 8006a86:	4658      	mov	r0, fp
 8006a88:	f000 f968 	bl	8006d5c <__multadd>
 8006a8c:	4681      	mov	r9, r0
 8006a8e:	e7ea      	b.n	8006a66 <_dtoa_r+0xb56>
 8006a90:	08007c20 	.word	0x08007c20
 8006a94:	08007ba4 	.word	0x08007ba4

08006a98 <_free_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	2900      	cmp	r1, #0
 8006a9e:	d041      	beq.n	8006b24 <_free_r+0x8c>
 8006aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa4:	1f0c      	subs	r4, r1, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	bfb8      	it	lt
 8006aaa:	18e4      	addlt	r4, r4, r3
 8006aac:	f000 f8e8 	bl	8006c80 <__malloc_lock>
 8006ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b28 <_free_r+0x90>)
 8006ab2:	6813      	ldr	r3, [r2, #0]
 8006ab4:	b933      	cbnz	r3, 8006ac4 <_free_r+0x2c>
 8006ab6:	6063      	str	r3, [r4, #4]
 8006ab8:	6014      	str	r4, [r2, #0]
 8006aba:	4628      	mov	r0, r5
 8006abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ac0:	f000 b8e4 	b.w	8006c8c <__malloc_unlock>
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	d908      	bls.n	8006ada <_free_r+0x42>
 8006ac8:	6820      	ldr	r0, [r4, #0]
 8006aca:	1821      	adds	r1, r4, r0
 8006acc:	428b      	cmp	r3, r1
 8006ace:	bf01      	itttt	eq
 8006ad0:	6819      	ldreq	r1, [r3, #0]
 8006ad2:	685b      	ldreq	r3, [r3, #4]
 8006ad4:	1809      	addeq	r1, r1, r0
 8006ad6:	6021      	streq	r1, [r4, #0]
 8006ad8:	e7ed      	b.n	8006ab6 <_free_r+0x1e>
 8006ada:	461a      	mov	r2, r3
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	b10b      	cbz	r3, 8006ae4 <_free_r+0x4c>
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	d9fa      	bls.n	8006ada <_free_r+0x42>
 8006ae4:	6811      	ldr	r1, [r2, #0]
 8006ae6:	1850      	adds	r0, r2, r1
 8006ae8:	42a0      	cmp	r0, r4
 8006aea:	d10b      	bne.n	8006b04 <_free_r+0x6c>
 8006aec:	6820      	ldr	r0, [r4, #0]
 8006aee:	4401      	add	r1, r0
 8006af0:	1850      	adds	r0, r2, r1
 8006af2:	4283      	cmp	r3, r0
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	d1e0      	bne.n	8006aba <_free_r+0x22>
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	6053      	str	r3, [r2, #4]
 8006afe:	4408      	add	r0, r1
 8006b00:	6010      	str	r0, [r2, #0]
 8006b02:	e7da      	b.n	8006aba <_free_r+0x22>
 8006b04:	d902      	bls.n	8006b0c <_free_r+0x74>
 8006b06:	230c      	movs	r3, #12
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	e7d6      	b.n	8006aba <_free_r+0x22>
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	1821      	adds	r1, r4, r0
 8006b10:	428b      	cmp	r3, r1
 8006b12:	bf04      	itt	eq
 8006b14:	6819      	ldreq	r1, [r3, #0]
 8006b16:	685b      	ldreq	r3, [r3, #4]
 8006b18:	6063      	str	r3, [r4, #4]
 8006b1a:	bf04      	itt	eq
 8006b1c:	1809      	addeq	r1, r1, r0
 8006b1e:	6021      	streq	r1, [r4, #0]
 8006b20:	6054      	str	r4, [r2, #4]
 8006b22:	e7ca      	b.n	8006aba <_free_r+0x22>
 8006b24:	bd38      	pop	{r3, r4, r5, pc}
 8006b26:	bf00      	nop
 8006b28:	200005b0 	.word	0x200005b0

08006b2c <malloc>:
 8006b2c:	4b02      	ldr	r3, [pc, #8]	@ (8006b38 <malloc+0xc>)
 8006b2e:	4601      	mov	r1, r0
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	f000 b825 	b.w	8006b80 <_malloc_r>
 8006b36:	bf00      	nop
 8006b38:	20000018 	.word	0x20000018

08006b3c <sbrk_aligned>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8006b7c <sbrk_aligned+0x40>)
 8006b40:	460c      	mov	r4, r1
 8006b42:	6831      	ldr	r1, [r6, #0]
 8006b44:	4605      	mov	r5, r0
 8006b46:	b911      	cbnz	r1, 8006b4e <sbrk_aligned+0x12>
 8006b48:	f000 fcd4 	bl	80074f4 <_sbrk_r>
 8006b4c:	6030      	str	r0, [r6, #0]
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4628      	mov	r0, r5
 8006b52:	f000 fccf 	bl	80074f4 <_sbrk_r>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d103      	bne.n	8006b62 <sbrk_aligned+0x26>
 8006b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b5e:	4620      	mov	r0, r4
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	1cc4      	adds	r4, r0, #3
 8006b64:	f024 0403 	bic.w	r4, r4, #3
 8006b68:	42a0      	cmp	r0, r4
 8006b6a:	d0f8      	beq.n	8006b5e <sbrk_aligned+0x22>
 8006b6c:	1a21      	subs	r1, r4, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 fcc0 	bl	80074f4 <_sbrk_r>
 8006b74:	3001      	adds	r0, #1
 8006b76:	d1f2      	bne.n	8006b5e <sbrk_aligned+0x22>
 8006b78:	e7ef      	b.n	8006b5a <sbrk_aligned+0x1e>
 8006b7a:	bf00      	nop
 8006b7c:	200005ac 	.word	0x200005ac

08006b80 <_malloc_r>:
 8006b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b84:	1ccd      	adds	r5, r1, #3
 8006b86:	f025 0503 	bic.w	r5, r5, #3
 8006b8a:	3508      	adds	r5, #8
 8006b8c:	2d0c      	cmp	r5, #12
 8006b8e:	bf38      	it	cc
 8006b90:	250c      	movcc	r5, #12
 8006b92:	2d00      	cmp	r5, #0
 8006b94:	4606      	mov	r6, r0
 8006b96:	db01      	blt.n	8006b9c <_malloc_r+0x1c>
 8006b98:	42a9      	cmp	r1, r5
 8006b9a:	d904      	bls.n	8006ba6 <_malloc_r+0x26>
 8006b9c:	230c      	movs	r3, #12
 8006b9e:	6033      	str	r3, [r6, #0]
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c7c <_malloc_r+0xfc>
 8006baa:	f000 f869 	bl	8006c80 <__malloc_lock>
 8006bae:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb2:	461c      	mov	r4, r3
 8006bb4:	bb44      	cbnz	r4, 8006c08 <_malloc_r+0x88>
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff ffbf 	bl	8006b3c <sbrk_aligned>
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	d158      	bne.n	8006c76 <_malloc_r+0xf6>
 8006bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8006bc8:	4627      	mov	r7, r4
 8006bca:	2f00      	cmp	r7, #0
 8006bcc:	d143      	bne.n	8006c56 <_malloc_r+0xd6>
 8006bce:	2c00      	cmp	r4, #0
 8006bd0:	d04b      	beq.n	8006c6a <_malloc_r+0xea>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	eb04 0903 	add.w	r9, r4, r3
 8006bdc:	f000 fc8a 	bl	80074f4 <_sbrk_r>
 8006be0:	4581      	cmp	r9, r0
 8006be2:	d142      	bne.n	8006c6a <_malloc_r+0xea>
 8006be4:	6821      	ldr	r1, [r4, #0]
 8006be6:	1a6d      	subs	r5, r5, r1
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff ffa6 	bl	8006b3c <sbrk_aligned>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d03a      	beq.n	8006c6a <_malloc_r+0xea>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	442b      	add	r3, r5
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	bb62      	cbnz	r2, 8006c5c <_malloc_r+0xdc>
 8006c02:	f8c8 7000 	str.w	r7, [r8]
 8006c06:	e00f      	b.n	8006c28 <_malloc_r+0xa8>
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	1b52      	subs	r2, r2, r5
 8006c0c:	d420      	bmi.n	8006c50 <_malloc_r+0xd0>
 8006c0e:	2a0b      	cmp	r2, #11
 8006c10:	d917      	bls.n	8006c42 <_malloc_r+0xc2>
 8006c12:	1961      	adds	r1, r4, r5
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	6025      	str	r5, [r4, #0]
 8006c18:	bf18      	it	ne
 8006c1a:	6059      	strne	r1, [r3, #4]
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	bf08      	it	eq
 8006c20:	f8c8 1000 	streq.w	r1, [r8]
 8006c24:	5162      	str	r2, [r4, r5]
 8006c26:	604b      	str	r3, [r1, #4]
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 f82f 	bl	8006c8c <__malloc_unlock>
 8006c2e:	f104 000b 	add.w	r0, r4, #11
 8006c32:	1d23      	adds	r3, r4, #4
 8006c34:	f020 0007 	bic.w	r0, r0, #7
 8006c38:	1ac2      	subs	r2, r0, r3
 8006c3a:	bf1c      	itt	ne
 8006c3c:	1a1b      	subne	r3, r3, r0
 8006c3e:	50a3      	strne	r3, [r4, r2]
 8006c40:	e7af      	b.n	8006ba2 <_malloc_r+0x22>
 8006c42:	6862      	ldr	r2, [r4, #4]
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	bf0c      	ite	eq
 8006c48:	f8c8 2000 	streq.w	r2, [r8]
 8006c4c:	605a      	strne	r2, [r3, #4]
 8006c4e:	e7eb      	b.n	8006c28 <_malloc_r+0xa8>
 8006c50:	4623      	mov	r3, r4
 8006c52:	6864      	ldr	r4, [r4, #4]
 8006c54:	e7ae      	b.n	8006bb4 <_malloc_r+0x34>
 8006c56:	463c      	mov	r4, r7
 8006c58:	687f      	ldr	r7, [r7, #4]
 8006c5a:	e7b6      	b.n	8006bca <_malloc_r+0x4a>
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	d1fb      	bne.n	8006c5c <_malloc_r+0xdc>
 8006c64:	2300      	movs	r3, #0
 8006c66:	6053      	str	r3, [r2, #4]
 8006c68:	e7de      	b.n	8006c28 <_malloc_r+0xa8>
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	6033      	str	r3, [r6, #0]
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f000 f80c 	bl	8006c8c <__malloc_unlock>
 8006c74:	e794      	b.n	8006ba0 <_malloc_r+0x20>
 8006c76:	6005      	str	r5, [r0, #0]
 8006c78:	e7d6      	b.n	8006c28 <_malloc_r+0xa8>
 8006c7a:	bf00      	nop
 8006c7c:	200005b0 	.word	0x200005b0

08006c80 <__malloc_lock>:
 8006c80:	4801      	ldr	r0, [pc, #4]	@ (8006c88 <__malloc_lock+0x8>)
 8006c82:	f7ff b8b8 	b.w	8005df6 <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	200005a8 	.word	0x200005a8

08006c8c <__malloc_unlock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	@ (8006c94 <__malloc_unlock+0x8>)
 8006c8e:	f7ff b8b3 	b.w	8005df8 <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	200005a8 	.word	0x200005a8

08006c98 <_Balloc>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	69c6      	ldr	r6, [r0, #28]
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	460d      	mov	r5, r1
 8006ca0:	b976      	cbnz	r6, 8006cc0 <_Balloc+0x28>
 8006ca2:	2010      	movs	r0, #16
 8006ca4:	f7ff ff42 	bl	8006b2c <malloc>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	61e0      	str	r0, [r4, #28]
 8006cac:	b920      	cbnz	r0, 8006cb8 <_Balloc+0x20>
 8006cae:	4b18      	ldr	r3, [pc, #96]	@ (8006d10 <_Balloc+0x78>)
 8006cb0:	4818      	ldr	r0, [pc, #96]	@ (8006d14 <_Balloc+0x7c>)
 8006cb2:	216b      	movs	r1, #107	@ 0x6b
 8006cb4:	f000 fc3c 	bl	8007530 <__assert_func>
 8006cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cbc:	6006      	str	r6, [r0, #0]
 8006cbe:	60c6      	str	r6, [r0, #12]
 8006cc0:	69e6      	ldr	r6, [r4, #28]
 8006cc2:	68f3      	ldr	r3, [r6, #12]
 8006cc4:	b183      	cbz	r3, 8006ce8 <_Balloc+0x50>
 8006cc6:	69e3      	ldr	r3, [r4, #28]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cce:	b9b8      	cbnz	r0, 8006d00 <_Balloc+0x68>
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8006cd6:	1d72      	adds	r2, r6, #5
 8006cd8:	0092      	lsls	r2, r2, #2
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 fc46 	bl	800756c <_calloc_r>
 8006ce0:	b160      	cbz	r0, 8006cfc <_Balloc+0x64>
 8006ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ce6:	e00e      	b.n	8006d06 <_Balloc+0x6e>
 8006ce8:	2221      	movs	r2, #33	@ 0x21
 8006cea:	2104      	movs	r1, #4
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 fc3d 	bl	800756c <_calloc_r>
 8006cf2:	69e3      	ldr	r3, [r4, #28]
 8006cf4:	60f0      	str	r0, [r6, #12]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e4      	bne.n	8006cc6 <_Balloc+0x2e>
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
 8006d00:	6802      	ldr	r2, [r0, #0]
 8006d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d06:	2300      	movs	r3, #0
 8006d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d0c:	e7f7      	b.n	8006cfe <_Balloc+0x66>
 8006d0e:	bf00      	nop
 8006d10:	08007bb1 	.word	0x08007bb1
 8006d14:	08007c31 	.word	0x08007c31

08006d18 <_Bfree>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	69c6      	ldr	r6, [r0, #28]
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	b976      	cbnz	r6, 8006d40 <_Bfree+0x28>
 8006d22:	2010      	movs	r0, #16
 8006d24:	f7ff ff02 	bl	8006b2c <malloc>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	61e8      	str	r0, [r5, #28]
 8006d2c:	b920      	cbnz	r0, 8006d38 <_Bfree+0x20>
 8006d2e:	4b09      	ldr	r3, [pc, #36]	@ (8006d54 <_Bfree+0x3c>)
 8006d30:	4809      	ldr	r0, [pc, #36]	@ (8006d58 <_Bfree+0x40>)
 8006d32:	218f      	movs	r1, #143	@ 0x8f
 8006d34:	f000 fbfc 	bl	8007530 <__assert_func>
 8006d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d3c:	6006      	str	r6, [r0, #0]
 8006d3e:	60c6      	str	r6, [r0, #12]
 8006d40:	b13c      	cbz	r4, 8006d52 <_Bfree+0x3a>
 8006d42:	69eb      	ldr	r3, [r5, #28]
 8006d44:	6862      	ldr	r2, [r4, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d4c:	6021      	str	r1, [r4, #0]
 8006d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	08007bb1 	.word	0x08007bb1
 8006d58:	08007c31 	.word	0x08007c31

08006d5c <__multadd>:
 8006d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d60:	690d      	ldr	r5, [r1, #16]
 8006d62:	4607      	mov	r7, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	461e      	mov	r6, r3
 8006d68:	f101 0c14 	add.w	ip, r1, #20
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8006d72:	b299      	uxth	r1, r3
 8006d74:	fb02 6101 	mla	r1, r2, r1, r6
 8006d78:	0c1e      	lsrs	r6, r3, #16
 8006d7a:	0c0b      	lsrs	r3, r1, #16
 8006d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8006d80:	b289      	uxth	r1, r1
 8006d82:	3001      	adds	r0, #1
 8006d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d88:	4285      	cmp	r5, r0
 8006d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d92:	dcec      	bgt.n	8006d6e <__multadd+0x12>
 8006d94:	b30e      	cbz	r6, 8006dda <__multadd+0x7e>
 8006d96:	68a3      	ldr	r3, [r4, #8]
 8006d98:	42ab      	cmp	r3, r5
 8006d9a:	dc19      	bgt.n	8006dd0 <__multadd+0x74>
 8006d9c:	6861      	ldr	r1, [r4, #4]
 8006d9e:	4638      	mov	r0, r7
 8006da0:	3101      	adds	r1, #1
 8006da2:	f7ff ff79 	bl	8006c98 <_Balloc>
 8006da6:	4680      	mov	r8, r0
 8006da8:	b928      	cbnz	r0, 8006db6 <__multadd+0x5a>
 8006daa:	4602      	mov	r2, r0
 8006dac:	4b0c      	ldr	r3, [pc, #48]	@ (8006de0 <__multadd+0x84>)
 8006dae:	480d      	ldr	r0, [pc, #52]	@ (8006de4 <__multadd+0x88>)
 8006db0:	21ba      	movs	r1, #186	@ 0xba
 8006db2:	f000 fbbd 	bl	8007530 <__assert_func>
 8006db6:	6922      	ldr	r2, [r4, #16]
 8006db8:	3202      	adds	r2, #2
 8006dba:	f104 010c 	add.w	r1, r4, #12
 8006dbe:	0092      	lsls	r2, r2, #2
 8006dc0:	300c      	adds	r0, #12
 8006dc2:	f000 fba7 	bl	8007514 <memcpy>
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f7ff ffa5 	bl	8006d18 <_Bfree>
 8006dce:	4644      	mov	r4, r8
 8006dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	615e      	str	r6, [r3, #20]
 8006dd8:	6125      	str	r5, [r4, #16]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de0:	08007c20 	.word	0x08007c20
 8006de4:	08007c31 	.word	0x08007c31

08006de8 <__hi0bits>:
 8006de8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006dec:	4603      	mov	r3, r0
 8006dee:	bf36      	itet	cc
 8006df0:	0403      	lslcc	r3, r0, #16
 8006df2:	2000      	movcs	r0, #0
 8006df4:	2010      	movcc	r0, #16
 8006df6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dfa:	bf3c      	itt	cc
 8006dfc:	021b      	lslcc	r3, r3, #8
 8006dfe:	3008      	addcc	r0, #8
 8006e00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e04:	bf3c      	itt	cc
 8006e06:	011b      	lslcc	r3, r3, #4
 8006e08:	3004      	addcc	r0, #4
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0e:	bf3c      	itt	cc
 8006e10:	009b      	lslcc	r3, r3, #2
 8006e12:	3002      	addcc	r0, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	db05      	blt.n	8006e24 <__hi0bits+0x3c>
 8006e18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e1c:	f100 0001 	add.w	r0, r0, #1
 8006e20:	bf08      	it	eq
 8006e22:	2020      	moveq	r0, #32
 8006e24:	4770      	bx	lr

08006e26 <__lo0bits>:
 8006e26:	6803      	ldr	r3, [r0, #0]
 8006e28:	4602      	mov	r2, r0
 8006e2a:	f013 0007 	ands.w	r0, r3, #7
 8006e2e:	d00b      	beq.n	8006e48 <__lo0bits+0x22>
 8006e30:	07d9      	lsls	r1, r3, #31
 8006e32:	d421      	bmi.n	8006e78 <__lo0bits+0x52>
 8006e34:	0798      	lsls	r0, r3, #30
 8006e36:	bf49      	itett	mi
 8006e38:	085b      	lsrmi	r3, r3, #1
 8006e3a:	089b      	lsrpl	r3, r3, #2
 8006e3c:	2001      	movmi	r0, #1
 8006e3e:	6013      	strmi	r3, [r2, #0]
 8006e40:	bf5c      	itt	pl
 8006e42:	6013      	strpl	r3, [r2, #0]
 8006e44:	2002      	movpl	r0, #2
 8006e46:	4770      	bx	lr
 8006e48:	b299      	uxth	r1, r3
 8006e4a:	b909      	cbnz	r1, 8006e50 <__lo0bits+0x2a>
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	2010      	movs	r0, #16
 8006e50:	b2d9      	uxtb	r1, r3
 8006e52:	b909      	cbnz	r1, 8006e58 <__lo0bits+0x32>
 8006e54:	3008      	adds	r0, #8
 8006e56:	0a1b      	lsrs	r3, r3, #8
 8006e58:	0719      	lsls	r1, r3, #28
 8006e5a:	bf04      	itt	eq
 8006e5c:	091b      	lsreq	r3, r3, #4
 8006e5e:	3004      	addeq	r0, #4
 8006e60:	0799      	lsls	r1, r3, #30
 8006e62:	bf04      	itt	eq
 8006e64:	089b      	lsreq	r3, r3, #2
 8006e66:	3002      	addeq	r0, #2
 8006e68:	07d9      	lsls	r1, r3, #31
 8006e6a:	d403      	bmi.n	8006e74 <__lo0bits+0x4e>
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	f100 0001 	add.w	r0, r0, #1
 8006e72:	d003      	beq.n	8006e7c <__lo0bits+0x56>
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	4770      	bx	lr
 8006e78:	2000      	movs	r0, #0
 8006e7a:	4770      	bx	lr
 8006e7c:	2020      	movs	r0, #32
 8006e7e:	4770      	bx	lr

08006e80 <__i2b>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	460c      	mov	r4, r1
 8006e84:	2101      	movs	r1, #1
 8006e86:	f7ff ff07 	bl	8006c98 <_Balloc>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	b928      	cbnz	r0, 8006e9a <__i2b+0x1a>
 8006e8e:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <__i2b+0x24>)
 8006e90:	4805      	ldr	r0, [pc, #20]	@ (8006ea8 <__i2b+0x28>)
 8006e92:	f240 1145 	movw	r1, #325	@ 0x145
 8006e96:	f000 fb4b 	bl	8007530 <__assert_func>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	6144      	str	r4, [r0, #20]
 8006e9e:	6103      	str	r3, [r0, #16]
 8006ea0:	bd10      	pop	{r4, pc}
 8006ea2:	bf00      	nop
 8006ea4:	08007c20 	.word	0x08007c20
 8006ea8:	08007c31 	.word	0x08007c31

08006eac <__multiply>:
 8006eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	690a      	ldr	r2, [r1, #16]
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	bfa8      	it	ge
 8006eba:	4623      	movge	r3, r4
 8006ebc:	460f      	mov	r7, r1
 8006ebe:	bfa4      	itt	ge
 8006ec0:	460c      	movge	r4, r1
 8006ec2:	461f      	movge	r7, r3
 8006ec4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006ec8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006ecc:	68a3      	ldr	r3, [r4, #8]
 8006ece:	6861      	ldr	r1, [r4, #4]
 8006ed0:	eb0a 0609 	add.w	r6, sl, r9
 8006ed4:	42b3      	cmp	r3, r6
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	bfb8      	it	lt
 8006eda:	3101      	addlt	r1, #1
 8006edc:	f7ff fedc 	bl	8006c98 <_Balloc>
 8006ee0:	b930      	cbnz	r0, 8006ef0 <__multiply+0x44>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	4b44      	ldr	r3, [pc, #272]	@ (8006ff8 <__multiply+0x14c>)
 8006ee6:	4845      	ldr	r0, [pc, #276]	@ (8006ffc <__multiply+0x150>)
 8006ee8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006eec:	f000 fb20 	bl	8007530 <__assert_func>
 8006ef0:	f100 0514 	add.w	r5, r0, #20
 8006ef4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ef8:	462b      	mov	r3, r5
 8006efa:	2200      	movs	r2, #0
 8006efc:	4543      	cmp	r3, r8
 8006efe:	d321      	bcc.n	8006f44 <__multiply+0x98>
 8006f00:	f107 0114 	add.w	r1, r7, #20
 8006f04:	f104 0214 	add.w	r2, r4, #20
 8006f08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f10:	9302      	str	r3, [sp, #8]
 8006f12:	1b13      	subs	r3, r2, r4
 8006f14:	3b15      	subs	r3, #21
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	f104 0715 	add.w	r7, r4, #21
 8006f20:	42ba      	cmp	r2, r7
 8006f22:	bf38      	it	cc
 8006f24:	2304      	movcc	r3, #4
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	9b02      	ldr	r3, [sp, #8]
 8006f2a:	9103      	str	r1, [sp, #12]
 8006f2c:	428b      	cmp	r3, r1
 8006f2e:	d80c      	bhi.n	8006f4a <__multiply+0x9e>
 8006f30:	2e00      	cmp	r6, #0
 8006f32:	dd03      	ble.n	8006f3c <__multiply+0x90>
 8006f34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d05b      	beq.n	8006ff4 <__multiply+0x148>
 8006f3c:	6106      	str	r6, [r0, #16]
 8006f3e:	b005      	add	sp, #20
 8006f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f44:	f843 2b04 	str.w	r2, [r3], #4
 8006f48:	e7d8      	b.n	8006efc <__multiply+0x50>
 8006f4a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f4e:	f1ba 0f00 	cmp.w	sl, #0
 8006f52:	d024      	beq.n	8006f9e <__multiply+0xf2>
 8006f54:	f104 0e14 	add.w	lr, r4, #20
 8006f58:	46a9      	mov	r9, r5
 8006f5a:	f04f 0c00 	mov.w	ip, #0
 8006f5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f62:	f8d9 3000 	ldr.w	r3, [r9]
 8006f66:	fa1f fb87 	uxth.w	fp, r7
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f74:	f8d9 7000 	ldr.w	r7, [r9]
 8006f78:	4463      	add	r3, ip
 8006f7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f7e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f8c:	4572      	cmp	r2, lr
 8006f8e:	f849 3b04 	str.w	r3, [r9], #4
 8006f92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f96:	d8e2      	bhi.n	8006f5e <__multiply+0xb2>
 8006f98:	9b01      	ldr	r3, [sp, #4]
 8006f9a:	f845 c003 	str.w	ip, [r5, r3]
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006fa4:	3104      	adds	r1, #4
 8006fa6:	f1b9 0f00 	cmp.w	r9, #0
 8006faa:	d021      	beq.n	8006ff0 <__multiply+0x144>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	f104 0c14 	add.w	ip, r4, #20
 8006fb2:	46ae      	mov	lr, r5
 8006fb4:	f04f 0a00 	mov.w	sl, #0
 8006fb8:	f8bc b000 	ldrh.w	fp, [ip]
 8006fbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006fc0:	fb09 770b 	mla	r7, r9, fp, r7
 8006fc4:	4457      	add	r7, sl
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006fcc:	f84e 3b04 	str.w	r3, [lr], #4
 8006fd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fd8:	f8be 3000 	ldrh.w	r3, [lr]
 8006fdc:	fb09 330a 	mla	r3, r9, sl, r3
 8006fe0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006fe4:	4562      	cmp	r2, ip
 8006fe6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fea:	d8e5      	bhi.n	8006fb8 <__multiply+0x10c>
 8006fec:	9f01      	ldr	r7, [sp, #4]
 8006fee:	51eb      	str	r3, [r5, r7]
 8006ff0:	3504      	adds	r5, #4
 8006ff2:	e799      	b.n	8006f28 <__multiply+0x7c>
 8006ff4:	3e01      	subs	r6, #1
 8006ff6:	e79b      	b.n	8006f30 <__multiply+0x84>
 8006ff8:	08007c20 	.word	0x08007c20
 8006ffc:	08007c31 	.word	0x08007c31

08007000 <__pow5mult>:
 8007000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007004:	4615      	mov	r5, r2
 8007006:	f012 0203 	ands.w	r2, r2, #3
 800700a:	4607      	mov	r7, r0
 800700c:	460e      	mov	r6, r1
 800700e:	d007      	beq.n	8007020 <__pow5mult+0x20>
 8007010:	4c25      	ldr	r4, [pc, #148]	@ (80070a8 <__pow5mult+0xa8>)
 8007012:	3a01      	subs	r2, #1
 8007014:	2300      	movs	r3, #0
 8007016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800701a:	f7ff fe9f 	bl	8006d5c <__multadd>
 800701e:	4606      	mov	r6, r0
 8007020:	10ad      	asrs	r5, r5, #2
 8007022:	d03d      	beq.n	80070a0 <__pow5mult+0xa0>
 8007024:	69fc      	ldr	r4, [r7, #28]
 8007026:	b97c      	cbnz	r4, 8007048 <__pow5mult+0x48>
 8007028:	2010      	movs	r0, #16
 800702a:	f7ff fd7f 	bl	8006b2c <malloc>
 800702e:	4602      	mov	r2, r0
 8007030:	61f8      	str	r0, [r7, #28]
 8007032:	b928      	cbnz	r0, 8007040 <__pow5mult+0x40>
 8007034:	4b1d      	ldr	r3, [pc, #116]	@ (80070ac <__pow5mult+0xac>)
 8007036:	481e      	ldr	r0, [pc, #120]	@ (80070b0 <__pow5mult+0xb0>)
 8007038:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800703c:	f000 fa78 	bl	8007530 <__assert_func>
 8007040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007044:	6004      	str	r4, [r0, #0]
 8007046:	60c4      	str	r4, [r0, #12]
 8007048:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800704c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007050:	b94c      	cbnz	r4, 8007066 <__pow5mult+0x66>
 8007052:	f240 2171 	movw	r1, #625	@ 0x271
 8007056:	4638      	mov	r0, r7
 8007058:	f7ff ff12 	bl	8006e80 <__i2b>
 800705c:	2300      	movs	r3, #0
 800705e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007062:	4604      	mov	r4, r0
 8007064:	6003      	str	r3, [r0, #0]
 8007066:	f04f 0900 	mov.w	r9, #0
 800706a:	07eb      	lsls	r3, r5, #31
 800706c:	d50a      	bpl.n	8007084 <__pow5mult+0x84>
 800706e:	4631      	mov	r1, r6
 8007070:	4622      	mov	r2, r4
 8007072:	4638      	mov	r0, r7
 8007074:	f7ff ff1a 	bl	8006eac <__multiply>
 8007078:	4631      	mov	r1, r6
 800707a:	4680      	mov	r8, r0
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff fe4b 	bl	8006d18 <_Bfree>
 8007082:	4646      	mov	r6, r8
 8007084:	106d      	asrs	r5, r5, #1
 8007086:	d00b      	beq.n	80070a0 <__pow5mult+0xa0>
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	b938      	cbnz	r0, 800709c <__pow5mult+0x9c>
 800708c:	4622      	mov	r2, r4
 800708e:	4621      	mov	r1, r4
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff ff0b 	bl	8006eac <__multiply>
 8007096:	6020      	str	r0, [r4, #0]
 8007098:	f8c0 9000 	str.w	r9, [r0]
 800709c:	4604      	mov	r4, r0
 800709e:	e7e4      	b.n	800706a <__pow5mult+0x6a>
 80070a0:	4630      	mov	r0, r6
 80070a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a6:	bf00      	nop
 80070a8:	08007c8c 	.word	0x08007c8c
 80070ac:	08007bb1 	.word	0x08007bb1
 80070b0:	08007c31 	.word	0x08007c31

080070b4 <__lshift>:
 80070b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	6849      	ldr	r1, [r1, #4]
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070c2:	68a3      	ldr	r3, [r4, #8]
 80070c4:	4607      	mov	r7, r0
 80070c6:	4691      	mov	r9, r2
 80070c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070cc:	f108 0601 	add.w	r6, r8, #1
 80070d0:	42b3      	cmp	r3, r6
 80070d2:	db0b      	blt.n	80070ec <__lshift+0x38>
 80070d4:	4638      	mov	r0, r7
 80070d6:	f7ff fddf 	bl	8006c98 <_Balloc>
 80070da:	4605      	mov	r5, r0
 80070dc:	b948      	cbnz	r0, 80070f2 <__lshift+0x3e>
 80070de:	4602      	mov	r2, r0
 80070e0:	4b28      	ldr	r3, [pc, #160]	@ (8007184 <__lshift+0xd0>)
 80070e2:	4829      	ldr	r0, [pc, #164]	@ (8007188 <__lshift+0xd4>)
 80070e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070e8:	f000 fa22 	bl	8007530 <__assert_func>
 80070ec:	3101      	adds	r1, #1
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	e7ee      	b.n	80070d0 <__lshift+0x1c>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f100 0114 	add.w	r1, r0, #20
 80070f8:	f100 0210 	add.w	r2, r0, #16
 80070fc:	4618      	mov	r0, r3
 80070fe:	4553      	cmp	r3, sl
 8007100:	db33      	blt.n	800716a <__lshift+0xb6>
 8007102:	6920      	ldr	r0, [r4, #16]
 8007104:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007108:	f104 0314 	add.w	r3, r4, #20
 800710c:	f019 091f 	ands.w	r9, r9, #31
 8007110:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007114:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007118:	d02b      	beq.n	8007172 <__lshift+0xbe>
 800711a:	f1c9 0e20 	rsb	lr, r9, #32
 800711e:	468a      	mov	sl, r1
 8007120:	2200      	movs	r2, #0
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	fa00 f009 	lsl.w	r0, r0, r9
 8007128:	4310      	orrs	r0, r2
 800712a:	f84a 0b04 	str.w	r0, [sl], #4
 800712e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007132:	459c      	cmp	ip, r3
 8007134:	fa22 f20e 	lsr.w	r2, r2, lr
 8007138:	d8f3      	bhi.n	8007122 <__lshift+0x6e>
 800713a:	ebac 0304 	sub.w	r3, ip, r4
 800713e:	3b15      	subs	r3, #21
 8007140:	f023 0303 	bic.w	r3, r3, #3
 8007144:	3304      	adds	r3, #4
 8007146:	f104 0015 	add.w	r0, r4, #21
 800714a:	4584      	cmp	ip, r0
 800714c:	bf38      	it	cc
 800714e:	2304      	movcc	r3, #4
 8007150:	50ca      	str	r2, [r1, r3]
 8007152:	b10a      	cbz	r2, 8007158 <__lshift+0xa4>
 8007154:	f108 0602 	add.w	r6, r8, #2
 8007158:	3e01      	subs	r6, #1
 800715a:	4638      	mov	r0, r7
 800715c:	612e      	str	r6, [r5, #16]
 800715e:	4621      	mov	r1, r4
 8007160:	f7ff fdda 	bl	8006d18 <_Bfree>
 8007164:	4628      	mov	r0, r5
 8007166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716a:	f842 0f04 	str.w	r0, [r2, #4]!
 800716e:	3301      	adds	r3, #1
 8007170:	e7c5      	b.n	80070fe <__lshift+0x4a>
 8007172:	3904      	subs	r1, #4
 8007174:	f853 2b04 	ldr.w	r2, [r3], #4
 8007178:	f841 2f04 	str.w	r2, [r1, #4]!
 800717c:	459c      	cmp	ip, r3
 800717e:	d8f9      	bhi.n	8007174 <__lshift+0xc0>
 8007180:	e7ea      	b.n	8007158 <__lshift+0xa4>
 8007182:	bf00      	nop
 8007184:	08007c20 	.word	0x08007c20
 8007188:	08007c31 	.word	0x08007c31

0800718c <__mcmp>:
 800718c:	690a      	ldr	r2, [r1, #16]
 800718e:	4603      	mov	r3, r0
 8007190:	6900      	ldr	r0, [r0, #16]
 8007192:	1a80      	subs	r0, r0, r2
 8007194:	b530      	push	{r4, r5, lr}
 8007196:	d10e      	bne.n	80071b6 <__mcmp+0x2a>
 8007198:	3314      	adds	r3, #20
 800719a:	3114      	adds	r1, #20
 800719c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80071a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80071a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071ac:	4295      	cmp	r5, r2
 80071ae:	d003      	beq.n	80071b8 <__mcmp+0x2c>
 80071b0:	d205      	bcs.n	80071be <__mcmp+0x32>
 80071b2:	f04f 30ff 	mov.w	r0, #4294967295
 80071b6:	bd30      	pop	{r4, r5, pc}
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	d3f3      	bcc.n	80071a4 <__mcmp+0x18>
 80071bc:	e7fb      	b.n	80071b6 <__mcmp+0x2a>
 80071be:	2001      	movs	r0, #1
 80071c0:	e7f9      	b.n	80071b6 <__mcmp+0x2a>
	...

080071c4 <__mdiff>:
 80071c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	4689      	mov	r9, r1
 80071ca:	4606      	mov	r6, r0
 80071cc:	4611      	mov	r1, r2
 80071ce:	4648      	mov	r0, r9
 80071d0:	4614      	mov	r4, r2
 80071d2:	f7ff ffdb 	bl	800718c <__mcmp>
 80071d6:	1e05      	subs	r5, r0, #0
 80071d8:	d112      	bne.n	8007200 <__mdiff+0x3c>
 80071da:	4629      	mov	r1, r5
 80071dc:	4630      	mov	r0, r6
 80071de:	f7ff fd5b 	bl	8006c98 <_Balloc>
 80071e2:	4602      	mov	r2, r0
 80071e4:	b928      	cbnz	r0, 80071f2 <__mdiff+0x2e>
 80071e6:	4b3f      	ldr	r3, [pc, #252]	@ (80072e4 <__mdiff+0x120>)
 80071e8:	f240 2137 	movw	r1, #567	@ 0x237
 80071ec:	483e      	ldr	r0, [pc, #248]	@ (80072e8 <__mdiff+0x124>)
 80071ee:	f000 f99f 	bl	8007530 <__assert_func>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071f8:	4610      	mov	r0, r2
 80071fa:	b003      	add	sp, #12
 80071fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007200:	bfbc      	itt	lt
 8007202:	464b      	movlt	r3, r9
 8007204:	46a1      	movlt	r9, r4
 8007206:	4630      	mov	r0, r6
 8007208:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800720c:	bfba      	itte	lt
 800720e:	461c      	movlt	r4, r3
 8007210:	2501      	movlt	r5, #1
 8007212:	2500      	movge	r5, #0
 8007214:	f7ff fd40 	bl	8006c98 <_Balloc>
 8007218:	4602      	mov	r2, r0
 800721a:	b918      	cbnz	r0, 8007224 <__mdiff+0x60>
 800721c:	4b31      	ldr	r3, [pc, #196]	@ (80072e4 <__mdiff+0x120>)
 800721e:	f240 2145 	movw	r1, #581	@ 0x245
 8007222:	e7e3      	b.n	80071ec <__mdiff+0x28>
 8007224:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007228:	6926      	ldr	r6, [r4, #16]
 800722a:	60c5      	str	r5, [r0, #12]
 800722c:	f109 0310 	add.w	r3, r9, #16
 8007230:	f109 0514 	add.w	r5, r9, #20
 8007234:	f104 0e14 	add.w	lr, r4, #20
 8007238:	f100 0b14 	add.w	fp, r0, #20
 800723c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007240:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	46d9      	mov	r9, fp
 8007248:	f04f 0c00 	mov.w	ip, #0
 800724c:	9b01      	ldr	r3, [sp, #4]
 800724e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007252:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	fa1f f38a 	uxth.w	r3, sl
 800725c:	4619      	mov	r1, r3
 800725e:	b283      	uxth	r3, r0
 8007260:	1acb      	subs	r3, r1, r3
 8007262:	0c00      	lsrs	r0, r0, #16
 8007264:	4463      	add	r3, ip
 8007266:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800726a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800726e:	b29b      	uxth	r3, r3
 8007270:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007274:	4576      	cmp	r6, lr
 8007276:	f849 3b04 	str.w	r3, [r9], #4
 800727a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800727e:	d8e5      	bhi.n	800724c <__mdiff+0x88>
 8007280:	1b33      	subs	r3, r6, r4
 8007282:	3b15      	subs	r3, #21
 8007284:	f023 0303 	bic.w	r3, r3, #3
 8007288:	3415      	adds	r4, #21
 800728a:	3304      	adds	r3, #4
 800728c:	42a6      	cmp	r6, r4
 800728e:	bf38      	it	cc
 8007290:	2304      	movcc	r3, #4
 8007292:	441d      	add	r5, r3
 8007294:	445b      	add	r3, fp
 8007296:	461e      	mov	r6, r3
 8007298:	462c      	mov	r4, r5
 800729a:	4544      	cmp	r4, r8
 800729c:	d30e      	bcc.n	80072bc <__mdiff+0xf8>
 800729e:	f108 0103 	add.w	r1, r8, #3
 80072a2:	1b49      	subs	r1, r1, r5
 80072a4:	f021 0103 	bic.w	r1, r1, #3
 80072a8:	3d03      	subs	r5, #3
 80072aa:	45a8      	cmp	r8, r5
 80072ac:	bf38      	it	cc
 80072ae:	2100      	movcc	r1, #0
 80072b0:	440b      	add	r3, r1
 80072b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072b6:	b191      	cbz	r1, 80072de <__mdiff+0x11a>
 80072b8:	6117      	str	r7, [r2, #16]
 80072ba:	e79d      	b.n	80071f8 <__mdiff+0x34>
 80072bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80072c0:	46e6      	mov	lr, ip
 80072c2:	0c08      	lsrs	r0, r1, #16
 80072c4:	fa1c fc81 	uxtah	ip, ip, r1
 80072c8:	4471      	add	r1, lr
 80072ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80072ce:	b289      	uxth	r1, r1
 80072d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072d4:	f846 1b04 	str.w	r1, [r6], #4
 80072d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072dc:	e7dd      	b.n	800729a <__mdiff+0xd6>
 80072de:	3f01      	subs	r7, #1
 80072e0:	e7e7      	b.n	80072b2 <__mdiff+0xee>
 80072e2:	bf00      	nop
 80072e4:	08007c20 	.word	0x08007c20
 80072e8:	08007c31 	.word	0x08007c31

080072ec <__d2b>:
 80072ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	460f      	mov	r7, r1
 80072f2:	2101      	movs	r1, #1
 80072f4:	ec59 8b10 	vmov	r8, r9, d0
 80072f8:	4616      	mov	r6, r2
 80072fa:	f7ff fccd 	bl	8006c98 <_Balloc>
 80072fe:	4604      	mov	r4, r0
 8007300:	b930      	cbnz	r0, 8007310 <__d2b+0x24>
 8007302:	4602      	mov	r2, r0
 8007304:	4b23      	ldr	r3, [pc, #140]	@ (8007394 <__d2b+0xa8>)
 8007306:	4824      	ldr	r0, [pc, #144]	@ (8007398 <__d2b+0xac>)
 8007308:	f240 310f 	movw	r1, #783	@ 0x30f
 800730c:	f000 f910 	bl	8007530 <__assert_func>
 8007310:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007314:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007318:	b10d      	cbz	r5, 800731e <__d2b+0x32>
 800731a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	f1b8 0300 	subs.w	r3, r8, #0
 8007324:	d023      	beq.n	800736e <__d2b+0x82>
 8007326:	4668      	mov	r0, sp
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	f7ff fd7c 	bl	8006e26 <__lo0bits>
 800732e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007332:	b1d0      	cbz	r0, 800736a <__d2b+0x7e>
 8007334:	f1c0 0320 	rsb	r3, r0, #32
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	430b      	orrs	r3, r1
 800733e:	40c2      	lsrs	r2, r0
 8007340:	6163      	str	r3, [r4, #20]
 8007342:	9201      	str	r2, [sp, #4]
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	61a3      	str	r3, [r4, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf0c      	ite	eq
 800734c:	2201      	moveq	r2, #1
 800734e:	2202      	movne	r2, #2
 8007350:	6122      	str	r2, [r4, #16]
 8007352:	b1a5      	cbz	r5, 800737e <__d2b+0x92>
 8007354:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007358:	4405      	add	r5, r0
 800735a:	603d      	str	r5, [r7, #0]
 800735c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007360:	6030      	str	r0, [r6, #0]
 8007362:	4620      	mov	r0, r4
 8007364:	b003      	add	sp, #12
 8007366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800736a:	6161      	str	r1, [r4, #20]
 800736c:	e7ea      	b.n	8007344 <__d2b+0x58>
 800736e:	a801      	add	r0, sp, #4
 8007370:	f7ff fd59 	bl	8006e26 <__lo0bits>
 8007374:	9b01      	ldr	r3, [sp, #4]
 8007376:	6163      	str	r3, [r4, #20]
 8007378:	3020      	adds	r0, #32
 800737a:	2201      	movs	r2, #1
 800737c:	e7e8      	b.n	8007350 <__d2b+0x64>
 800737e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007382:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007386:	6038      	str	r0, [r7, #0]
 8007388:	6918      	ldr	r0, [r3, #16]
 800738a:	f7ff fd2d 	bl	8006de8 <__hi0bits>
 800738e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007392:	e7e5      	b.n	8007360 <__d2b+0x74>
 8007394:	08007c20 	.word	0x08007c20
 8007398:	08007c31 	.word	0x08007c31

0800739c <__sflush_r>:
 800739c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a4:	0716      	lsls	r6, r2, #28
 80073a6:	4605      	mov	r5, r0
 80073a8:	460c      	mov	r4, r1
 80073aa:	d454      	bmi.n	8007456 <__sflush_r+0xba>
 80073ac:	684b      	ldr	r3, [r1, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	dc02      	bgt.n	80073b8 <__sflush_r+0x1c>
 80073b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	dd48      	ble.n	800744a <__sflush_r+0xae>
 80073b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	d045      	beq.n	800744a <__sflush_r+0xae>
 80073be:	2300      	movs	r3, #0
 80073c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073c4:	682f      	ldr	r7, [r5, #0]
 80073c6:	6a21      	ldr	r1, [r4, #32]
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	d030      	beq.n	800742e <__sflush_r+0x92>
 80073cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	0759      	lsls	r1, r3, #29
 80073d2:	d505      	bpl.n	80073e0 <__sflush_r+0x44>
 80073d4:	6863      	ldr	r3, [r4, #4]
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073da:	b10b      	cbz	r3, 80073e0 <__sflush_r+0x44>
 80073dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	2300      	movs	r3, #0
 80073e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073e4:	6a21      	ldr	r1, [r4, #32]
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b0      	blx	r6
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	d106      	bne.n	80073fe <__sflush_r+0x62>
 80073f0:	6829      	ldr	r1, [r5, #0]
 80073f2:	291d      	cmp	r1, #29
 80073f4:	d82b      	bhi.n	800744e <__sflush_r+0xb2>
 80073f6:	4a2a      	ldr	r2, [pc, #168]	@ (80074a0 <__sflush_r+0x104>)
 80073f8:	410a      	asrs	r2, r1
 80073fa:	07d6      	lsls	r6, r2, #31
 80073fc:	d427      	bmi.n	800744e <__sflush_r+0xb2>
 80073fe:	2200      	movs	r2, #0
 8007400:	6062      	str	r2, [r4, #4]
 8007402:	04d9      	lsls	r1, r3, #19
 8007404:	6922      	ldr	r2, [r4, #16]
 8007406:	6022      	str	r2, [r4, #0]
 8007408:	d504      	bpl.n	8007414 <__sflush_r+0x78>
 800740a:	1c42      	adds	r2, r0, #1
 800740c:	d101      	bne.n	8007412 <__sflush_r+0x76>
 800740e:	682b      	ldr	r3, [r5, #0]
 8007410:	b903      	cbnz	r3, 8007414 <__sflush_r+0x78>
 8007412:	6560      	str	r0, [r4, #84]	@ 0x54
 8007414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007416:	602f      	str	r7, [r5, #0]
 8007418:	b1b9      	cbz	r1, 800744a <__sflush_r+0xae>
 800741a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800741e:	4299      	cmp	r1, r3
 8007420:	d002      	beq.n	8007428 <__sflush_r+0x8c>
 8007422:	4628      	mov	r0, r5
 8007424:	f7ff fb38 	bl	8006a98 <_free_r>
 8007428:	2300      	movs	r3, #0
 800742a:	6363      	str	r3, [r4, #52]	@ 0x34
 800742c:	e00d      	b.n	800744a <__sflush_r+0xae>
 800742e:	2301      	movs	r3, #1
 8007430:	4628      	mov	r0, r5
 8007432:	47b0      	blx	r6
 8007434:	4602      	mov	r2, r0
 8007436:	1c50      	adds	r0, r2, #1
 8007438:	d1c9      	bne.n	80073ce <__sflush_r+0x32>
 800743a:	682b      	ldr	r3, [r5, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0c6      	beq.n	80073ce <__sflush_r+0x32>
 8007440:	2b1d      	cmp	r3, #29
 8007442:	d001      	beq.n	8007448 <__sflush_r+0xac>
 8007444:	2b16      	cmp	r3, #22
 8007446:	d11e      	bne.n	8007486 <__sflush_r+0xea>
 8007448:	602f      	str	r7, [r5, #0]
 800744a:	2000      	movs	r0, #0
 800744c:	e022      	b.n	8007494 <__sflush_r+0xf8>
 800744e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007452:	b21b      	sxth	r3, r3
 8007454:	e01b      	b.n	800748e <__sflush_r+0xf2>
 8007456:	690f      	ldr	r7, [r1, #16]
 8007458:	2f00      	cmp	r7, #0
 800745a:	d0f6      	beq.n	800744a <__sflush_r+0xae>
 800745c:	0793      	lsls	r3, r2, #30
 800745e:	680e      	ldr	r6, [r1, #0]
 8007460:	bf08      	it	eq
 8007462:	694b      	ldreq	r3, [r1, #20]
 8007464:	600f      	str	r7, [r1, #0]
 8007466:	bf18      	it	ne
 8007468:	2300      	movne	r3, #0
 800746a:	eba6 0807 	sub.w	r8, r6, r7
 800746e:	608b      	str	r3, [r1, #8]
 8007470:	f1b8 0f00 	cmp.w	r8, #0
 8007474:	dde9      	ble.n	800744a <__sflush_r+0xae>
 8007476:	6a21      	ldr	r1, [r4, #32]
 8007478:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800747a:	4643      	mov	r3, r8
 800747c:	463a      	mov	r2, r7
 800747e:	4628      	mov	r0, r5
 8007480:	47b0      	blx	r6
 8007482:	2800      	cmp	r0, #0
 8007484:	dc08      	bgt.n	8007498 <__sflush_r+0xfc>
 8007486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800748a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800748e:	81a3      	strh	r3, [r4, #12]
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007498:	4407      	add	r7, r0
 800749a:	eba8 0800 	sub.w	r8, r8, r0
 800749e:	e7e7      	b.n	8007470 <__sflush_r+0xd4>
 80074a0:	dfbffffe 	.word	0xdfbffffe

080074a4 <_fflush_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	690b      	ldr	r3, [r1, #16]
 80074a8:	4605      	mov	r5, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	b913      	cbnz	r3, 80074b4 <_fflush_r+0x10>
 80074ae:	2500      	movs	r5, #0
 80074b0:	4628      	mov	r0, r5
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	b118      	cbz	r0, 80074be <_fflush_r+0x1a>
 80074b6:	6a03      	ldr	r3, [r0, #32]
 80074b8:	b90b      	cbnz	r3, 80074be <_fflush_r+0x1a>
 80074ba:	f7fe fba5 	bl	8005c08 <__sinit>
 80074be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0f3      	beq.n	80074ae <_fflush_r+0xa>
 80074c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074c8:	07d0      	lsls	r0, r2, #31
 80074ca:	d404      	bmi.n	80074d6 <_fflush_r+0x32>
 80074cc:	0599      	lsls	r1, r3, #22
 80074ce:	d402      	bmi.n	80074d6 <_fflush_r+0x32>
 80074d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074d2:	f7fe fc90 	bl	8005df6 <__retarget_lock_acquire_recursive>
 80074d6:	4628      	mov	r0, r5
 80074d8:	4621      	mov	r1, r4
 80074da:	f7ff ff5f 	bl	800739c <__sflush_r>
 80074de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074e0:	07da      	lsls	r2, r3, #31
 80074e2:	4605      	mov	r5, r0
 80074e4:	d4e4      	bmi.n	80074b0 <_fflush_r+0xc>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	059b      	lsls	r3, r3, #22
 80074ea:	d4e1      	bmi.n	80074b0 <_fflush_r+0xc>
 80074ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ee:	f7fe fc83 	bl	8005df8 <__retarget_lock_release_recursive>
 80074f2:	e7dd      	b.n	80074b0 <_fflush_r+0xc>

080074f4 <_sbrk_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d06      	ldr	r5, [pc, #24]	@ (8007510 <_sbrk_r+0x1c>)
 80074f8:	2300      	movs	r3, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	f7fa fd10 	bl	8001f24 <_sbrk>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_sbrk_r+0x1a>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_sbrk_r+0x1a>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	200005a4 	.word	0x200005a4

08007514 <memcpy>:
 8007514:	440a      	add	r2, r1
 8007516:	4291      	cmp	r1, r2
 8007518:	f100 33ff 	add.w	r3, r0, #4294967295
 800751c:	d100      	bne.n	8007520 <memcpy+0xc>
 800751e:	4770      	bx	lr
 8007520:	b510      	push	{r4, lr}
 8007522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800752a:	4291      	cmp	r1, r2
 800752c:	d1f9      	bne.n	8007522 <memcpy+0xe>
 800752e:	bd10      	pop	{r4, pc}

08007530 <__assert_func>:
 8007530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007532:	4614      	mov	r4, r2
 8007534:	461a      	mov	r2, r3
 8007536:	4b09      	ldr	r3, [pc, #36]	@ (800755c <__assert_func+0x2c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4605      	mov	r5, r0
 800753c:	68d8      	ldr	r0, [r3, #12]
 800753e:	b954      	cbnz	r4, 8007556 <__assert_func+0x26>
 8007540:	4b07      	ldr	r3, [pc, #28]	@ (8007560 <__assert_func+0x30>)
 8007542:	461c      	mov	r4, r3
 8007544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007548:	9100      	str	r1, [sp, #0]
 800754a:	462b      	mov	r3, r5
 800754c:	4905      	ldr	r1, [pc, #20]	@ (8007564 <__assert_func+0x34>)
 800754e:	f000 f841 	bl	80075d4 <fiprintf>
 8007552:	f000 f851 	bl	80075f8 <abort>
 8007556:	4b04      	ldr	r3, [pc, #16]	@ (8007568 <__assert_func+0x38>)
 8007558:	e7f4      	b.n	8007544 <__assert_func+0x14>
 800755a:	bf00      	nop
 800755c:	20000018 	.word	0x20000018
 8007560:	08007dcd 	.word	0x08007dcd
 8007564:	08007d9f 	.word	0x08007d9f
 8007568:	08007d92 	.word	0x08007d92

0800756c <_calloc_r>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	fba1 5402 	umull	r5, r4, r1, r2
 8007572:	b93c      	cbnz	r4, 8007584 <_calloc_r+0x18>
 8007574:	4629      	mov	r1, r5
 8007576:	f7ff fb03 	bl	8006b80 <_malloc_r>
 800757a:	4606      	mov	r6, r0
 800757c:	b928      	cbnz	r0, 800758a <_calloc_r+0x1e>
 800757e:	2600      	movs	r6, #0
 8007580:	4630      	mov	r0, r6
 8007582:	bd70      	pop	{r4, r5, r6, pc}
 8007584:	220c      	movs	r2, #12
 8007586:	6002      	str	r2, [r0, #0]
 8007588:	e7f9      	b.n	800757e <_calloc_r+0x12>
 800758a:	462a      	mov	r2, r5
 800758c:	4621      	mov	r1, r4
 800758e:	f7fe fbb4 	bl	8005cfa <memset>
 8007592:	e7f5      	b.n	8007580 <_calloc_r+0x14>

08007594 <__ascii_mbtowc>:
 8007594:	b082      	sub	sp, #8
 8007596:	b901      	cbnz	r1, 800759a <__ascii_mbtowc+0x6>
 8007598:	a901      	add	r1, sp, #4
 800759a:	b142      	cbz	r2, 80075ae <__ascii_mbtowc+0x1a>
 800759c:	b14b      	cbz	r3, 80075b2 <__ascii_mbtowc+0x1e>
 800759e:	7813      	ldrb	r3, [r2, #0]
 80075a0:	600b      	str	r3, [r1, #0]
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	1e10      	subs	r0, r2, #0
 80075a6:	bf18      	it	ne
 80075a8:	2001      	movne	r0, #1
 80075aa:	b002      	add	sp, #8
 80075ac:	4770      	bx	lr
 80075ae:	4610      	mov	r0, r2
 80075b0:	e7fb      	b.n	80075aa <__ascii_mbtowc+0x16>
 80075b2:	f06f 0001 	mvn.w	r0, #1
 80075b6:	e7f8      	b.n	80075aa <__ascii_mbtowc+0x16>

080075b8 <__ascii_wctomb>:
 80075b8:	4603      	mov	r3, r0
 80075ba:	4608      	mov	r0, r1
 80075bc:	b141      	cbz	r1, 80075d0 <__ascii_wctomb+0x18>
 80075be:	2aff      	cmp	r2, #255	@ 0xff
 80075c0:	d904      	bls.n	80075cc <__ascii_wctomb+0x14>
 80075c2:	228a      	movs	r2, #138	@ 0x8a
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ca:	4770      	bx	lr
 80075cc:	700a      	strb	r2, [r1, #0]
 80075ce:	2001      	movs	r0, #1
 80075d0:	4770      	bx	lr
	...

080075d4 <fiprintf>:
 80075d4:	b40e      	push	{r1, r2, r3}
 80075d6:	b503      	push	{r0, r1, lr}
 80075d8:	4601      	mov	r1, r0
 80075da:	ab03      	add	r3, sp, #12
 80075dc:	4805      	ldr	r0, [pc, #20]	@ (80075f4 <fiprintf+0x20>)
 80075de:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e2:	6800      	ldr	r0, [r0, #0]
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	f000 f837 	bl	8007658 <_vfiprintf_r>
 80075ea:	b002      	add	sp, #8
 80075ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80075f0:	b003      	add	sp, #12
 80075f2:	4770      	bx	lr
 80075f4:	20000018 	.word	0x20000018

080075f8 <abort>:
 80075f8:	b508      	push	{r3, lr}
 80075fa:	2006      	movs	r0, #6
 80075fc:	f000 fa00 	bl	8007a00 <raise>
 8007600:	2001      	movs	r0, #1
 8007602:	f7fa fc17 	bl	8001e34 <_exit>

08007606 <__sfputc_r>:
 8007606:	6893      	ldr	r3, [r2, #8]
 8007608:	3b01      	subs	r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	b410      	push	{r4}
 800760e:	6093      	str	r3, [r2, #8]
 8007610:	da08      	bge.n	8007624 <__sfputc_r+0x1e>
 8007612:	6994      	ldr	r4, [r2, #24]
 8007614:	42a3      	cmp	r3, r4
 8007616:	db01      	blt.n	800761c <__sfputc_r+0x16>
 8007618:	290a      	cmp	r1, #10
 800761a:	d103      	bne.n	8007624 <__sfputc_r+0x1e>
 800761c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007620:	f000 b932 	b.w	8007888 <__swbuf_r>
 8007624:	6813      	ldr	r3, [r2, #0]
 8007626:	1c58      	adds	r0, r3, #1
 8007628:	6010      	str	r0, [r2, #0]
 800762a:	7019      	strb	r1, [r3, #0]
 800762c:	4608      	mov	r0, r1
 800762e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007632:	4770      	bx	lr

08007634 <__sfputs_r>:
 8007634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007636:	4606      	mov	r6, r0
 8007638:	460f      	mov	r7, r1
 800763a:	4614      	mov	r4, r2
 800763c:	18d5      	adds	r5, r2, r3
 800763e:	42ac      	cmp	r4, r5
 8007640:	d101      	bne.n	8007646 <__sfputs_r+0x12>
 8007642:	2000      	movs	r0, #0
 8007644:	e007      	b.n	8007656 <__sfputs_r+0x22>
 8007646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764a:	463a      	mov	r2, r7
 800764c:	4630      	mov	r0, r6
 800764e:	f7ff ffda 	bl	8007606 <__sfputc_r>
 8007652:	1c43      	adds	r3, r0, #1
 8007654:	d1f3      	bne.n	800763e <__sfputs_r+0xa>
 8007656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007658 <_vfiprintf_r>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	460d      	mov	r5, r1
 800765e:	b09d      	sub	sp, #116	@ 0x74
 8007660:	4614      	mov	r4, r2
 8007662:	4698      	mov	r8, r3
 8007664:	4606      	mov	r6, r0
 8007666:	b118      	cbz	r0, 8007670 <_vfiprintf_r+0x18>
 8007668:	6a03      	ldr	r3, [r0, #32]
 800766a:	b90b      	cbnz	r3, 8007670 <_vfiprintf_r+0x18>
 800766c:	f7fe facc 	bl	8005c08 <__sinit>
 8007670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007672:	07d9      	lsls	r1, r3, #31
 8007674:	d405      	bmi.n	8007682 <_vfiprintf_r+0x2a>
 8007676:	89ab      	ldrh	r3, [r5, #12]
 8007678:	059a      	lsls	r2, r3, #22
 800767a:	d402      	bmi.n	8007682 <_vfiprintf_r+0x2a>
 800767c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800767e:	f7fe fbba 	bl	8005df6 <__retarget_lock_acquire_recursive>
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	071b      	lsls	r3, r3, #28
 8007686:	d501      	bpl.n	800768c <_vfiprintf_r+0x34>
 8007688:	692b      	ldr	r3, [r5, #16]
 800768a:	b99b      	cbnz	r3, 80076b4 <_vfiprintf_r+0x5c>
 800768c:	4629      	mov	r1, r5
 800768e:	4630      	mov	r0, r6
 8007690:	f000 f938 	bl	8007904 <__swsetup_r>
 8007694:	b170      	cbz	r0, 80076b4 <_vfiprintf_r+0x5c>
 8007696:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007698:	07dc      	lsls	r4, r3, #31
 800769a:	d504      	bpl.n	80076a6 <_vfiprintf_r+0x4e>
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	b01d      	add	sp, #116	@ 0x74
 80076a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a6:	89ab      	ldrh	r3, [r5, #12]
 80076a8:	0598      	lsls	r0, r3, #22
 80076aa:	d4f7      	bmi.n	800769c <_vfiprintf_r+0x44>
 80076ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076ae:	f7fe fba3 	bl	8005df8 <__retarget_lock_release_recursive>
 80076b2:	e7f3      	b.n	800769c <_vfiprintf_r+0x44>
 80076b4:	2300      	movs	r3, #0
 80076b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076b8:	2320      	movs	r3, #32
 80076ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076be:	f8cd 800c 	str.w	r8, [sp, #12]
 80076c2:	2330      	movs	r3, #48	@ 0x30
 80076c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007874 <_vfiprintf_r+0x21c>
 80076c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076cc:	f04f 0901 	mov.w	r9, #1
 80076d0:	4623      	mov	r3, r4
 80076d2:	469a      	mov	sl, r3
 80076d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d8:	b10a      	cbz	r2, 80076de <_vfiprintf_r+0x86>
 80076da:	2a25      	cmp	r2, #37	@ 0x25
 80076dc:	d1f9      	bne.n	80076d2 <_vfiprintf_r+0x7a>
 80076de:	ebba 0b04 	subs.w	fp, sl, r4
 80076e2:	d00b      	beq.n	80076fc <_vfiprintf_r+0xa4>
 80076e4:	465b      	mov	r3, fp
 80076e6:	4622      	mov	r2, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff ffa2 	bl	8007634 <__sfputs_r>
 80076f0:	3001      	adds	r0, #1
 80076f2:	f000 80a7 	beq.w	8007844 <_vfiprintf_r+0x1ec>
 80076f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076f8:	445a      	add	r2, fp
 80076fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80076fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 809f 	beq.w	8007844 <_vfiprintf_r+0x1ec>
 8007706:	2300      	movs	r3, #0
 8007708:	f04f 32ff 	mov.w	r2, #4294967295
 800770c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007710:	f10a 0a01 	add.w	sl, sl, #1
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	9307      	str	r3, [sp, #28]
 8007718:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800771c:	931a      	str	r3, [sp, #104]	@ 0x68
 800771e:	4654      	mov	r4, sl
 8007720:	2205      	movs	r2, #5
 8007722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007726:	4853      	ldr	r0, [pc, #332]	@ (8007874 <_vfiprintf_r+0x21c>)
 8007728:	f7f8 fd52 	bl	80001d0 <memchr>
 800772c:	9a04      	ldr	r2, [sp, #16]
 800772e:	b9d8      	cbnz	r0, 8007768 <_vfiprintf_r+0x110>
 8007730:	06d1      	lsls	r1, r2, #27
 8007732:	bf44      	itt	mi
 8007734:	2320      	movmi	r3, #32
 8007736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800773a:	0713      	lsls	r3, r2, #28
 800773c:	bf44      	itt	mi
 800773e:	232b      	movmi	r3, #43	@ 0x2b
 8007740:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007744:	f89a 3000 	ldrb.w	r3, [sl]
 8007748:	2b2a      	cmp	r3, #42	@ 0x2a
 800774a:	d015      	beq.n	8007778 <_vfiprintf_r+0x120>
 800774c:	9a07      	ldr	r2, [sp, #28]
 800774e:	4654      	mov	r4, sl
 8007750:	2000      	movs	r0, #0
 8007752:	f04f 0c0a 	mov.w	ip, #10
 8007756:	4621      	mov	r1, r4
 8007758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800775c:	3b30      	subs	r3, #48	@ 0x30
 800775e:	2b09      	cmp	r3, #9
 8007760:	d94b      	bls.n	80077fa <_vfiprintf_r+0x1a2>
 8007762:	b1b0      	cbz	r0, 8007792 <_vfiprintf_r+0x13a>
 8007764:	9207      	str	r2, [sp, #28]
 8007766:	e014      	b.n	8007792 <_vfiprintf_r+0x13a>
 8007768:	eba0 0308 	sub.w	r3, r0, r8
 800776c:	fa09 f303 	lsl.w	r3, r9, r3
 8007770:	4313      	orrs	r3, r2
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	46a2      	mov	sl, r4
 8007776:	e7d2      	b.n	800771e <_vfiprintf_r+0xc6>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	1d19      	adds	r1, r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	9103      	str	r1, [sp, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	bfbb      	ittet	lt
 8007784:	425b      	neglt	r3, r3
 8007786:	f042 0202 	orrlt.w	r2, r2, #2
 800778a:	9307      	strge	r3, [sp, #28]
 800778c:	9307      	strlt	r3, [sp, #28]
 800778e:	bfb8      	it	lt
 8007790:	9204      	strlt	r2, [sp, #16]
 8007792:	7823      	ldrb	r3, [r4, #0]
 8007794:	2b2e      	cmp	r3, #46	@ 0x2e
 8007796:	d10a      	bne.n	80077ae <_vfiprintf_r+0x156>
 8007798:	7863      	ldrb	r3, [r4, #1]
 800779a:	2b2a      	cmp	r3, #42	@ 0x2a
 800779c:	d132      	bne.n	8007804 <_vfiprintf_r+0x1ac>
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	1d1a      	adds	r2, r3, #4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	9203      	str	r2, [sp, #12]
 80077a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077aa:	3402      	adds	r4, #2
 80077ac:	9305      	str	r3, [sp, #20]
 80077ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007884 <_vfiprintf_r+0x22c>
 80077b2:	7821      	ldrb	r1, [r4, #0]
 80077b4:	2203      	movs	r2, #3
 80077b6:	4650      	mov	r0, sl
 80077b8:	f7f8 fd0a 	bl	80001d0 <memchr>
 80077bc:	b138      	cbz	r0, 80077ce <_vfiprintf_r+0x176>
 80077be:	9b04      	ldr	r3, [sp, #16]
 80077c0:	eba0 000a 	sub.w	r0, r0, sl
 80077c4:	2240      	movs	r2, #64	@ 0x40
 80077c6:	4082      	lsls	r2, r0
 80077c8:	4313      	orrs	r3, r2
 80077ca:	3401      	adds	r4, #1
 80077cc:	9304      	str	r3, [sp, #16]
 80077ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d2:	4829      	ldr	r0, [pc, #164]	@ (8007878 <_vfiprintf_r+0x220>)
 80077d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077d8:	2206      	movs	r2, #6
 80077da:	f7f8 fcf9 	bl	80001d0 <memchr>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d03f      	beq.n	8007862 <_vfiprintf_r+0x20a>
 80077e2:	4b26      	ldr	r3, [pc, #152]	@ (800787c <_vfiprintf_r+0x224>)
 80077e4:	bb1b      	cbnz	r3, 800782e <_vfiprintf_r+0x1d6>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	3307      	adds	r3, #7
 80077ea:	f023 0307 	bic.w	r3, r3, #7
 80077ee:	3308      	adds	r3, #8
 80077f0:	9303      	str	r3, [sp, #12]
 80077f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f4:	443b      	add	r3, r7
 80077f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80077f8:	e76a      	b.n	80076d0 <_vfiprintf_r+0x78>
 80077fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80077fe:	460c      	mov	r4, r1
 8007800:	2001      	movs	r0, #1
 8007802:	e7a8      	b.n	8007756 <_vfiprintf_r+0xfe>
 8007804:	2300      	movs	r3, #0
 8007806:	3401      	adds	r4, #1
 8007808:	9305      	str	r3, [sp, #20]
 800780a:	4619      	mov	r1, r3
 800780c:	f04f 0c0a 	mov.w	ip, #10
 8007810:	4620      	mov	r0, r4
 8007812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007816:	3a30      	subs	r2, #48	@ 0x30
 8007818:	2a09      	cmp	r2, #9
 800781a:	d903      	bls.n	8007824 <_vfiprintf_r+0x1cc>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0c6      	beq.n	80077ae <_vfiprintf_r+0x156>
 8007820:	9105      	str	r1, [sp, #20]
 8007822:	e7c4      	b.n	80077ae <_vfiprintf_r+0x156>
 8007824:	fb0c 2101 	mla	r1, ip, r1, r2
 8007828:	4604      	mov	r4, r0
 800782a:	2301      	movs	r3, #1
 800782c:	e7f0      	b.n	8007810 <_vfiprintf_r+0x1b8>
 800782e:	ab03      	add	r3, sp, #12
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	462a      	mov	r2, r5
 8007834:	4b12      	ldr	r3, [pc, #72]	@ (8007880 <_vfiprintf_r+0x228>)
 8007836:	a904      	add	r1, sp, #16
 8007838:	4630      	mov	r0, r6
 800783a:	f7fd fda1 	bl	8005380 <_printf_float>
 800783e:	4607      	mov	r7, r0
 8007840:	1c78      	adds	r0, r7, #1
 8007842:	d1d6      	bne.n	80077f2 <_vfiprintf_r+0x19a>
 8007844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007846:	07d9      	lsls	r1, r3, #31
 8007848:	d405      	bmi.n	8007856 <_vfiprintf_r+0x1fe>
 800784a:	89ab      	ldrh	r3, [r5, #12]
 800784c:	059a      	lsls	r2, r3, #22
 800784e:	d402      	bmi.n	8007856 <_vfiprintf_r+0x1fe>
 8007850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007852:	f7fe fad1 	bl	8005df8 <__retarget_lock_release_recursive>
 8007856:	89ab      	ldrh	r3, [r5, #12]
 8007858:	065b      	lsls	r3, r3, #25
 800785a:	f53f af1f 	bmi.w	800769c <_vfiprintf_r+0x44>
 800785e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007860:	e71e      	b.n	80076a0 <_vfiprintf_r+0x48>
 8007862:	ab03      	add	r3, sp, #12
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	462a      	mov	r2, r5
 8007868:	4b05      	ldr	r3, [pc, #20]	@ (8007880 <_vfiprintf_r+0x228>)
 800786a:	a904      	add	r1, sp, #16
 800786c:	4630      	mov	r0, r6
 800786e:	f7fe f81f 	bl	80058b0 <_printf_i>
 8007872:	e7e4      	b.n	800783e <_vfiprintf_r+0x1e6>
 8007874:	08007ecf 	.word	0x08007ecf
 8007878:	08007ed9 	.word	0x08007ed9
 800787c:	08005381 	.word	0x08005381
 8007880:	08007635 	.word	0x08007635
 8007884:	08007ed5 	.word	0x08007ed5

08007888 <__swbuf_r>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	460e      	mov	r6, r1
 800788c:	4614      	mov	r4, r2
 800788e:	4605      	mov	r5, r0
 8007890:	b118      	cbz	r0, 800789a <__swbuf_r+0x12>
 8007892:	6a03      	ldr	r3, [r0, #32]
 8007894:	b90b      	cbnz	r3, 800789a <__swbuf_r+0x12>
 8007896:	f7fe f9b7 	bl	8005c08 <__sinit>
 800789a:	69a3      	ldr	r3, [r4, #24]
 800789c:	60a3      	str	r3, [r4, #8]
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	071a      	lsls	r2, r3, #28
 80078a2:	d501      	bpl.n	80078a8 <__swbuf_r+0x20>
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	b943      	cbnz	r3, 80078ba <__swbuf_r+0x32>
 80078a8:	4621      	mov	r1, r4
 80078aa:	4628      	mov	r0, r5
 80078ac:	f000 f82a 	bl	8007904 <__swsetup_r>
 80078b0:	b118      	cbz	r0, 80078ba <__swbuf_r+0x32>
 80078b2:	f04f 37ff 	mov.w	r7, #4294967295
 80078b6:	4638      	mov	r0, r7
 80078b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	6922      	ldr	r2, [r4, #16]
 80078be:	1a98      	subs	r0, r3, r2
 80078c0:	6963      	ldr	r3, [r4, #20]
 80078c2:	b2f6      	uxtb	r6, r6
 80078c4:	4283      	cmp	r3, r0
 80078c6:	4637      	mov	r7, r6
 80078c8:	dc05      	bgt.n	80078d6 <__swbuf_r+0x4e>
 80078ca:	4621      	mov	r1, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	f7ff fde9 	bl	80074a4 <_fflush_r>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d1ed      	bne.n	80078b2 <__swbuf_r+0x2a>
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	3b01      	subs	r3, #1
 80078da:	60a3      	str	r3, [r4, #8]
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	6022      	str	r2, [r4, #0]
 80078e2:	701e      	strb	r6, [r3, #0]
 80078e4:	6962      	ldr	r2, [r4, #20]
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d004      	beq.n	80078f6 <__swbuf_r+0x6e>
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	07db      	lsls	r3, r3, #31
 80078f0:	d5e1      	bpl.n	80078b6 <__swbuf_r+0x2e>
 80078f2:	2e0a      	cmp	r6, #10
 80078f4:	d1df      	bne.n	80078b6 <__swbuf_r+0x2e>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f7ff fdd3 	bl	80074a4 <_fflush_r>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d0d9      	beq.n	80078b6 <__swbuf_r+0x2e>
 8007902:	e7d6      	b.n	80078b2 <__swbuf_r+0x2a>

08007904 <__swsetup_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4b29      	ldr	r3, [pc, #164]	@ (80079ac <__swsetup_r+0xa8>)
 8007908:	4605      	mov	r5, r0
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	460c      	mov	r4, r1
 800790e:	b118      	cbz	r0, 8007918 <__swsetup_r+0x14>
 8007910:	6a03      	ldr	r3, [r0, #32]
 8007912:	b90b      	cbnz	r3, 8007918 <__swsetup_r+0x14>
 8007914:	f7fe f978 	bl	8005c08 <__sinit>
 8007918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791c:	0719      	lsls	r1, r3, #28
 800791e:	d422      	bmi.n	8007966 <__swsetup_r+0x62>
 8007920:	06da      	lsls	r2, r3, #27
 8007922:	d407      	bmi.n	8007934 <__swsetup_r+0x30>
 8007924:	2209      	movs	r2, #9
 8007926:	602a      	str	r2, [r5, #0]
 8007928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	f04f 30ff 	mov.w	r0, #4294967295
 8007932:	e033      	b.n	800799c <__swsetup_r+0x98>
 8007934:	0758      	lsls	r0, r3, #29
 8007936:	d512      	bpl.n	800795e <__swsetup_r+0x5a>
 8007938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800793a:	b141      	cbz	r1, 800794e <__swsetup_r+0x4a>
 800793c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007940:	4299      	cmp	r1, r3
 8007942:	d002      	beq.n	800794a <__swsetup_r+0x46>
 8007944:	4628      	mov	r0, r5
 8007946:	f7ff f8a7 	bl	8006a98 <_free_r>
 800794a:	2300      	movs	r3, #0
 800794c:	6363      	str	r3, [r4, #52]	@ 0x34
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	2300      	movs	r3, #0
 8007958:	6063      	str	r3, [r4, #4]
 800795a:	6923      	ldr	r3, [r4, #16]
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	f043 0308 	orr.w	r3, r3, #8
 8007964:	81a3      	strh	r3, [r4, #12]
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	b94b      	cbnz	r3, 800797e <__swsetup_r+0x7a>
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007974:	d003      	beq.n	800797e <__swsetup_r+0x7a>
 8007976:	4621      	mov	r1, r4
 8007978:	4628      	mov	r0, r5
 800797a:	f000 f883 	bl	8007a84 <__smakebuf_r>
 800797e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007982:	f013 0201 	ands.w	r2, r3, #1
 8007986:	d00a      	beq.n	800799e <__swsetup_r+0x9a>
 8007988:	2200      	movs	r2, #0
 800798a:	60a2      	str	r2, [r4, #8]
 800798c:	6962      	ldr	r2, [r4, #20]
 800798e:	4252      	negs	r2, r2
 8007990:	61a2      	str	r2, [r4, #24]
 8007992:	6922      	ldr	r2, [r4, #16]
 8007994:	b942      	cbnz	r2, 80079a8 <__swsetup_r+0xa4>
 8007996:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800799a:	d1c5      	bne.n	8007928 <__swsetup_r+0x24>
 800799c:	bd38      	pop	{r3, r4, r5, pc}
 800799e:	0799      	lsls	r1, r3, #30
 80079a0:	bf58      	it	pl
 80079a2:	6962      	ldrpl	r2, [r4, #20]
 80079a4:	60a2      	str	r2, [r4, #8]
 80079a6:	e7f4      	b.n	8007992 <__swsetup_r+0x8e>
 80079a8:	2000      	movs	r0, #0
 80079aa:	e7f7      	b.n	800799c <__swsetup_r+0x98>
 80079ac:	20000018 	.word	0x20000018

080079b0 <_raise_r>:
 80079b0:	291f      	cmp	r1, #31
 80079b2:	b538      	push	{r3, r4, r5, lr}
 80079b4:	4605      	mov	r5, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	d904      	bls.n	80079c4 <_raise_r+0x14>
 80079ba:	2316      	movs	r3, #22
 80079bc:	6003      	str	r3, [r0, #0]
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079c6:	b112      	cbz	r2, 80079ce <_raise_r+0x1e>
 80079c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079cc:	b94b      	cbnz	r3, 80079e2 <_raise_r+0x32>
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 f830 	bl	8007a34 <_getpid_r>
 80079d4:	4622      	mov	r2, r4
 80079d6:	4601      	mov	r1, r0
 80079d8:	4628      	mov	r0, r5
 80079da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079de:	f000 b817 	b.w	8007a10 <_kill_r>
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d00a      	beq.n	80079fc <_raise_r+0x4c>
 80079e6:	1c59      	adds	r1, r3, #1
 80079e8:	d103      	bne.n	80079f2 <_raise_r+0x42>
 80079ea:	2316      	movs	r3, #22
 80079ec:	6003      	str	r3, [r0, #0]
 80079ee:	2001      	movs	r0, #1
 80079f0:	e7e7      	b.n	80079c2 <_raise_r+0x12>
 80079f2:	2100      	movs	r1, #0
 80079f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079f8:	4620      	mov	r0, r4
 80079fa:	4798      	blx	r3
 80079fc:	2000      	movs	r0, #0
 80079fe:	e7e0      	b.n	80079c2 <_raise_r+0x12>

08007a00 <raise>:
 8007a00:	4b02      	ldr	r3, [pc, #8]	@ (8007a0c <raise+0xc>)
 8007a02:	4601      	mov	r1, r0
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	f7ff bfd3 	b.w	80079b0 <_raise_r>
 8007a0a:	bf00      	nop
 8007a0c:	20000018 	.word	0x20000018

08007a10 <_kill_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d07      	ldr	r5, [pc, #28]	@ (8007a30 <_kill_r+0x20>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	f7fa f9f9 	bl	8001e14 <_kill>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	d102      	bne.n	8007a2c <_kill_r+0x1c>
 8007a26:	682b      	ldr	r3, [r5, #0]
 8007a28:	b103      	cbz	r3, 8007a2c <_kill_r+0x1c>
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	bd38      	pop	{r3, r4, r5, pc}
 8007a2e:	bf00      	nop
 8007a30:	200005a4 	.word	0x200005a4

08007a34 <_getpid_r>:
 8007a34:	f7fa b9e6 	b.w	8001e04 <_getpid>

08007a38 <__swhatbuf_r>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	2900      	cmp	r1, #0
 8007a42:	b096      	sub	sp, #88	@ 0x58
 8007a44:	4615      	mov	r5, r2
 8007a46:	461e      	mov	r6, r3
 8007a48:	da0d      	bge.n	8007a66 <__swhatbuf_r+0x2e>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a50:	f04f 0100 	mov.w	r1, #0
 8007a54:	bf14      	ite	ne
 8007a56:	2340      	movne	r3, #64	@ 0x40
 8007a58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	6031      	str	r1, [r6, #0]
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	b016      	add	sp, #88	@ 0x58
 8007a64:	bd70      	pop	{r4, r5, r6, pc}
 8007a66:	466a      	mov	r2, sp
 8007a68:	f000 f848 	bl	8007afc <_fstat_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	dbec      	blt.n	8007a4a <__swhatbuf_r+0x12>
 8007a70:	9901      	ldr	r1, [sp, #4]
 8007a72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a7a:	4259      	negs	r1, r3
 8007a7c:	4159      	adcs	r1, r3
 8007a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a82:	e7eb      	b.n	8007a5c <__swhatbuf_r+0x24>

08007a84 <__smakebuf_r>:
 8007a84:	898b      	ldrh	r3, [r1, #12]
 8007a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a88:	079d      	lsls	r5, r3, #30
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	d507      	bpl.n	8007aa0 <__smakebuf_r+0x1c>
 8007a90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	b003      	add	sp, #12
 8007a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa0:	ab01      	add	r3, sp, #4
 8007aa2:	466a      	mov	r2, sp
 8007aa4:	f7ff ffc8 	bl	8007a38 <__swhatbuf_r>
 8007aa8:	9f00      	ldr	r7, [sp, #0]
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4639      	mov	r1, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff f866 	bl	8006b80 <_malloc_r>
 8007ab4:	b948      	cbnz	r0, 8007aca <__smakebuf_r+0x46>
 8007ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aba:	059a      	lsls	r2, r3, #22
 8007abc:	d4ee      	bmi.n	8007a9c <__smakebuf_r+0x18>
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	f043 0302 	orr.w	r3, r3, #2
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	e7e2      	b.n	8007a90 <__smakebuf_r+0xc>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	6020      	str	r0, [r4, #0]
 8007ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	9b01      	ldr	r3, [sp, #4]
 8007ad6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ada:	b15b      	cbz	r3, 8007af4 <__smakebuf_r+0x70>
 8007adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f000 f81d 	bl	8007b20 <_isatty_r>
 8007ae6:	b128      	cbz	r0, 8007af4 <__smakebuf_r+0x70>
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	f043 0301 	orr.w	r3, r3, #1
 8007af2:	81a3      	strh	r3, [r4, #12]
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	431d      	orrs	r5, r3
 8007af8:	81a5      	strh	r5, [r4, #12]
 8007afa:	e7cf      	b.n	8007a9c <__smakebuf_r+0x18>

08007afc <_fstat_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	@ (8007b1c <_fstat_r+0x20>)
 8007b00:	2300      	movs	r3, #0
 8007b02:	4604      	mov	r4, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	602b      	str	r3, [r5, #0]
 8007b0a:	f7fa f9e3 	bl	8001ed4 <_fstat>
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	d102      	bne.n	8007b18 <_fstat_r+0x1c>
 8007b12:	682b      	ldr	r3, [r5, #0]
 8007b14:	b103      	cbz	r3, 8007b18 <_fstat_r+0x1c>
 8007b16:	6023      	str	r3, [r4, #0]
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200005a4 	.word	0x200005a4

08007b20 <_isatty_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d06      	ldr	r5, [pc, #24]	@ (8007b3c <_isatty_r+0x1c>)
 8007b24:	2300      	movs	r3, #0
 8007b26:	4604      	mov	r4, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	f7fa f9e2 	bl	8001ef4 <_isatty>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d102      	bne.n	8007b3a <_isatty_r+0x1a>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b103      	cbz	r3, 8007b3a <_isatty_r+0x1a>
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	200005a4 	.word	0x200005a4

08007b40 <_init>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	bf00      	nop
 8007b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b46:	bc08      	pop	{r3}
 8007b48:	469e      	mov	lr, r3
 8007b4a:	4770      	bx	lr

08007b4c <_fini>:
 8007b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4e:	bf00      	nop
 8007b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b52:	bc08      	pop	{r3}
 8007b54:	469e      	mov	lr, r3
 8007b56:	4770      	bx	lr
